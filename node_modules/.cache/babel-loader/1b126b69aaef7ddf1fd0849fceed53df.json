{"ast":null,"code":"import { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nvar _jsxFileName = \"C:\\\\Users\\\\kadam\\\\react\\\\Visualization\\\\src\\\\components\\\\Matrix.js\",\n    _s = $RefreshSig$();\n\nimport React, { useEffect, useState } from \"react\";\nimport \"./Matrix.css\";\nimport Node from \"./Node\";\nimport \"./Node.css\";\nimport dijkstra, { getNodesInShortestPathOrder } from \"../algorithms/dijkstra\";\nimport \"./index.css\";\nimport Button from \"./Button\";\nimport Heading from \"./Heading\";\nimport Dropdown from \"./Dropdown\";\n\nfunction getInitialGrid() {\n  const grid = [];\n\n  for (let row = 0; row < 15; row++) {\n    const rowgri = [];\n\n    for (let col = 0; col < 40; col++) {\n      rowgri.push(createNode(col, row));\n    }\n\n    grid.push(rowgri);\n  }\n\n  return grid;\n}\n\n;\n\nfunction Matrix() {\n  _s();\n\n  const [grid1, setgrid] = useState([]);\n  useEffect(() => {\n    const grid2 = getInitialGrid();\n    setgrid(grid2);\n  }, []);\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"navbar\",\n      children: [/*#__PURE__*/_jsxDEV(Heading, {\n        name: \"Path Visualization\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 32,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"ul\", {\n        children: [/*#__PURE__*/_jsxDEV(Dropdown, {\n          name: \"Algorithm\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 34,\n          columnNumber: 17\n        }, this), /*#__PURE__*/_jsxDEV(Dropdown, {\n          name: \"Maze and pattern\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 35,\n          columnNumber: 17\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          onClick: () => visualizeAstar(grid1),\n          children: \"Start\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 36,\n          columnNumber: 17\n        }, this), /*#__PURE__*/_jsxDEV(Button, {\n          title: \"Stop!\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 38,\n          columnNumber: 17\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 33,\n        columnNumber: 13\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 31,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"center\", {\n      children: /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"grid\",\n        children: grid1.map((row, rowIdx) => {\n          return /*#__PURE__*/_jsxDEV(\"div\", {\n            children: row.map((node, nodeIdx) => {\n              const {\n                row,\n                col,\n                isFinish,\n                isStart,\n                isWall\n              } = node;\n              return /*#__PURE__*/_jsxDEV(Node, {\n                col: col,\n                isFinish: isFinish,\n                isStart: isStart,\n                isWall: isWall,\n                row: row\n              }, nodeIdx, false, {\n                fileName: _jsxFileName,\n                lineNumber: 49,\n                columnNumber: 21\n              }, this);\n            })\n          }, rowIdx, false, {\n            fileName: _jsxFileName,\n            lineNumber: 45,\n            columnNumber: 15\n          }, this);\n        })\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 42,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 41,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true);\n}\n\n_s(Matrix, \"IRCaDD26VMkKeE1Pl0lEgIB+Sc8=\");\n\n_c = Matrix;\nexport default Matrix;\n\nconst createNode = (col, row) => {\n  return {\n    col,\n    row,\n    isStart: row === 6 && col === 10,\n    isFinish: row === 13 && col === 13,\n    distance: Infinity,\n    isVisited: false,\n    isWall: false,\n    previousNode: null\n  };\n};\n\nfunction animateDijkstra(visitedNodesInOrder, nodesInShortestPathOrder) {\n  for (let i = 0; i <= visitedNodesInOrder.length; i++) {\n    if (i === visitedNodesInOrder.length) {\n      setTimeout(() => {\n        animateShortestPath(nodesInShortestPathOrder);\n      }, 10 * i);\n      return;\n    }\n\n    setTimeout(() => {\n      const node = visitedNodesInOrder[i];\n      document.getElementById(`node-${node.row}-${node.col}`).className = 'node-visited';\n    }, 10 * i);\n  }\n}\n\nfunction animateShortestPath(nodesInShortestPathOrder) {\n  for (let i = 0; i < nodesInShortestPathOrder.length; i++) {\n    setTimeout(() => {\n      const node = nodesInShortestPathOrder[i];\n      document.getElementById(`node-${node.row}-${node.col}`).className = 'node-shortest-path';\n    }, 50 * i);\n  }\n}\n\nfunction visualizeDijkstra(grid1) {\n  console.log(\"run\");\n  const startNode = grid1[6][10];\n  const finishNode = grid1[7][13];\n  const visitedNodes = dijkstra(grid1, startNode, finishNode);\n  const nodesInShortestPathOrder = getNodesInShortestPathOrder(finishNode, startNode);\n  animateDijkstra(visitedNodes, nodesInShortestPathOrder);\n}\n\nvar _c;\n\n$RefreshReg$(_c, \"Matrix\");","map":{"version":3,"sources":["C:/Users/kadam/react/Visualization/src/components/Matrix.js"],"names":["React","useEffect","useState","Node","dijkstra","getNodesInShortestPathOrder","Button","Heading","Dropdown","getInitialGrid","grid","row","rowgri","col","push","createNode","Matrix","grid1","setgrid","grid2","visualizeAstar","map","rowIdx","node","nodeIdx","isFinish","isStart","isWall","distance","Infinity","isVisited","previousNode","animateDijkstra","visitedNodesInOrder","nodesInShortestPathOrder","i","length","setTimeout","animateShortestPath","document","getElementById","className","visualizeDijkstra","console","log","startNode","finishNode","visitedNodes"],"mappings":"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","sourcesContent":["import React, { useEffect ,useState} from \"react\";\r\nimport \"./Matrix.css\";\r\nimport Node from \"./Node\";\r\nimport \"./Node.css\";\r\nimport dijkstra,{getNodesInShortestPathOrder} from \"../algorithms/dijkstra\";\r\nimport \"./index.css\";\r\nimport Button from \"./Button\"; \r\nimport Heading from \"./Heading\";\r\nimport Dropdown from \"./Dropdown\"\r\n\r\nfunction getInitialGrid () {\r\n  const grid=[];\r\n  for (let row = 0; row < 15; row++) {\r\n    const rowgri=[];\r\n    for (let col = 0; col < 40; col++) {\r\n      rowgri.push(createNode(col, row));\r\n    }\r\n    grid.push(rowgri);\r\n  }\r\n  return grid;\r\n};\r\n\r\nfunction Matrix() {\r\n  const [grid1, setgrid] = useState([]);\r\n  useEffect(()=>{\r\n    const grid2=getInitialGrid();\r\n    setgrid(grid2);\r\n  },[]);\r\n  return (\r\n    <>\r\n      <div className=\"navbar\">\r\n                <Heading name=\"Path Visualization\"></Heading>\r\n            <ul>\r\n                <Dropdown name=\"Algorithm\"></Dropdown>\r\n                <Dropdown name=\"Maze and pattern\"></Dropdown>\r\n                <button onClick={()=>visualizeAstar(grid1)}>Start</button>\r\n                {/* <button onClick={()=>visualizeDijkstra(grid1)}>Start</button> */}\r\n                <Button title=\"Stop!\"></Button>\r\n            </ul>\r\n        </div>\r\n      <center>\r\n        <div className=\"grid\">\r\n          {grid1.map((row, rowIdx) => {\r\n            return (\r\n              <div key={rowIdx}>\r\n                {row.map((node, nodeIdx) => {\r\n                  const { row, col, isFinish, isStart, isWall } = node;\r\n                  return (\r\n                    <Node\r\n                      key={nodeIdx}\r\n                      col={col}\r\n                      isFinish={isFinish}\r\n                      isStart={isStart}\r\n                      isWall={isWall}\r\n                      row={row}\r\n                    />\r\n                  );\r\n                })}\r\n              </div>\r\n            );\r\n          })}\r\n        </div>\r\n      </center>\r\n    </>\r\n  );\r\n}\r\n\r\nexport default Matrix;\r\n\r\nconst createNode = (col, row) => {\r\n  return {\r\n    col,\r\n    row,\r\n    isStart: row === 6 && col === 10,\r\n    isFinish: row === 13 && col === 13,\r\n    distance: Infinity,\r\n    isVisited: false,\r\n    isWall: false,\r\n    previousNode: null,\r\n  };\r\n};\r\n\r\nfunction animateDijkstra(visitedNodesInOrder, nodesInShortestPathOrder) {\r\n  for (let i = 0; i <= visitedNodesInOrder.length; i++) {\r\n    if (i === visitedNodesInOrder.length) {\r\n      setTimeout(() => {\r\n        animateShortestPath(nodesInShortestPathOrder);\r\n      }, 10 * i);\r\n      return;\r\n    }\r\n    setTimeout(() => {\r\n      const node = visitedNodesInOrder[i];\r\n      document.getElementById(`node-${node.row}-${node.col}`).className =\r\n        'node-visited';\r\n    }, 10 * i);\r\n  }\r\n}\r\n\r\nfunction animateShortestPath(nodesInShortestPathOrder) {\r\n  for (let i = 0; i < nodesInShortestPathOrder.length; i++) {\r\n    setTimeout(() => {\r\n      const node = nodesInShortestPathOrder[i];\r\n      document.getElementById(`node-${node.row}-${node.col}`).className =\r\n        'node-shortest-path';\r\n    }, 50 * i);\r\n  }\r\n}\r\n\r\nfunction visualizeDijkstra(grid1) {\r\n  console.log(\"run\");\r\n  const startNode = grid1[6][10];\r\n  const finishNode = grid1[7][13];\r\n  const visitedNodes  = dijkstra(grid1, startNode, finishNode);\r\n  const nodesInShortestPathOrder =  getNodesInShortestPathOrder(finishNode,startNode)\r\n  animateDijkstra(visitedNodes, nodesInShortestPathOrder);\r\n}\r\n\r\n\r\n"]},"metadata":{},"sourceType":"module"}