<<<<<<< HEAD
[{"/home/sourabh/Downloads/react/visualization/src/index.js":"1","/home/sourabh/Downloads/react/visualization/src/components/Matrix.js":"2","/home/sourabh/Downloads/react/visualization/src/algorithms/dijkstra.js":"3","/home/sourabh/Downloads/react/visualization/src/components/Button.jsx":"4","/home/sourabh/Downloads/react/visualization/src/components/Dropdown.jsx":"5","/home/sourabh/Downloads/react/visualization/src/components/Heading.jsx":"6","/home/sourabh/Downloads/react/visualization/src/App.js":"7","/home/sourabh/Downloads/react/visualization/src/serviceWorker.js":"8","/home/sourabh/Downloads/react/visualization/src/visualizers/PathfindingVisualizer.jsx":"9","/home/sourabh/Downloads/react/visualization/src/models/Node/Node.jsx":"10","/home/sourabh/Downloads/react/visualization/src/components/Navbar.jsx":"11","/home/sourabh/Downloads/react/visualization/src/algorithms/bfs.js":"12"},{"size":452,"mtime":1616734565024,"results":"13","hashOfConfig":"14"},{"size":3218,"mtime":1616772667237,"results":"15","hashOfConfig":"14"},{"size":2085,"mtime":1616866363131,"results":"16","hashOfConfig":"14"},{"size":165,"mtime":1616772372200,"results":"17","hashOfConfig":"14"},{"size":316,"mtime":1616773578183,"results":"18","hashOfConfig":"14"},{"size":156,"mtime":1616772382772,"results":"19","hashOfConfig":"14"},{"size":268,"mtime":1616867199773,"results":"20","hashOfConfig":"14"},{"size":4951,"mtime":1616734565028,"results":"21","hashOfConfig":"14"},{"size":6434,"mtime":1616934537441,"results":"22","hashOfConfig":"14"},{"size":683,"mtime":1616734565024,"results":"23","hashOfConfig":"14"},{"size":618,"mtime":1616772599233,"results":"24","hashOfConfig":"14"},{"size":1793,"mtime":1616928777990,"results":"25","hashOfConfig":"14"},{"filePath":"26","messages":"27","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"28"},"15hazi4",{"filePath":"29","messages":"30","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"31","messages":"32","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"28"},{"filePath":"33","messages":"34","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"35"},{"filePath":"36","messages":"37","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"28"},{"filePath":"38","messages":"39","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"28"},{"filePath":"40","messages":"41","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"28"},{"filePath":"42","messages":"43","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"28"},{"filePath":"44","messages":"45","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"46","messages":"47","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"28"},{"filePath":"48","messages":"49","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"35"},{"filePath":"50","messages":"51","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"/home/sourabh/Downloads/react/visualization/src/index.js",[],["52","53"],"/home/sourabh/Downloads/react/visualization/src/components/Matrix.js",[],"/home/sourabh/Downloads/react/visualization/src/algorithms/dijkstra.js",[],"/home/sourabh/Downloads/react/visualization/src/components/Button.jsx",[],["54","55"],"/home/sourabh/Downloads/react/visualization/src/components/Dropdown.jsx",[],"/home/sourabh/Downloads/react/visualization/src/components/Heading.jsx",[],"/home/sourabh/Downloads/react/visualization/src/App.js",[],"/home/sourabh/Downloads/react/visualization/src/serviceWorker.js",[],"/home/sourabh/Downloads/react/visualization/src/visualizers/PathfindingVisualizer.jsx",["56","57"],"/home/sourabh/Downloads/react/visualization/src/models/Node/Node.jsx",[],"/home/sourabh/Downloads/react/visualization/src/components/Navbar.jsx",[],"/home/sourabh/Downloads/react/visualization/src/algorithms/bfs.js",[],{"ruleId":"58","replacedBy":"59"},{"ruleId":"60","replacedBy":"61"},{"ruleId":"58","replacedBy":"62"},{"ruleId":"60","replacedBy":"63"},{"ruleId":"64","severity":1,"message":"65","line":18,"column":10,"nodeType":"66","messageId":"67","endLine":18,"endColumn":18},{"ruleId":"64","severity":1,"message":"68","line":19,"column":10,"nodeType":"66","messageId":"67","endLine":19,"endColumn":18},"no-native-reassign",["69"],"no-negated-in-lhs",["70"],["69"],["70"],"no-unused-vars","'isActive' is assigned a value but never used.","Identifier","unusedVar","'isPaused' is assigned a value but never used.","no-global-assign","no-unsafe-negation"]
=======
[{"C:\\Users\\kadam\\react\\Visualization\\src\\index.js":"1","C:\\Users\\kadam\\react\\Visualization\\src\\components\\Matrix.js":"2","C:\\Users\\kadam\\react\\Visualization\\src\\algorithms\\dijkstra.js":"3","C:\\Users\\kadam\\react\\Visualization\\src\\algorithms\\BFS.js":"4","C:\\Users\\kadam\\react\\Visualization\\src\\algorithms\\Astar.js":"5","C:\\Users\\kadam\\react\\Visualization\\src\\components\\Heading.jsx":"6","C:\\Users\\kadam\\react\\Visualization\\src\\components\\Button.jsx":"7","C:\\Users\\kadam\\react\\Visualization\\src\\components\\Dropdown.jsx":"8","C:\\Users\\kadam\\react\\Visualization\\src\\serviceWorker.js":"9","C:\\Users\\kadam\\react\\Visualization\\src\\App.js":"10","C:\\Users\\kadam\\react\\Visualization\\src\\visualizers\\PathfindingVisualizer.jsx":"11","C:\\Users\\kadam\\react\\Visualization\\src\\models\\Node\\Node.jsx":"12"},{"size":464,"mtime":1616930096223,"results":"13","hashOfConfig":"14"},{"size":4356,"mtime":1616930096305,"results":"15","hashOfConfig":"14"},{"size":2147,"mtime":1616930156102,"results":"16","hashOfConfig":"14"},{"size":2741,"mtime":1616924659123,"results":"17","hashOfConfig":"14"},{"size":1596,"mtime":1616743918475,"results":"18","hashOfConfig":"14"},{"size":156,"mtime":1616930096209,"results":"19","hashOfConfig":"14"},{"size":165,"mtime":1616930096203,"results":"20","hashOfConfig":"14"},{"size":316,"mtime":1616930096206,"results":"21","hashOfConfig":"14"},{"size":5086,"mtime":1616930096242,"results":"22","hashOfConfig":"14"},{"size":281,"mtime":1616930096196,"results":"23","hashOfConfig":"14"},{"size":5928,"mtime":1616930096250,"results":"24","hashOfConfig":"14"},{"size":717,"mtime":1616930096237,"results":"25","hashOfConfig":"14"},{"filePath":"26","messages":"27","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"triyp6",{"filePath":"28","messages":"29","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"30","usedDeprecatedRules":"31"},{"filePath":"32","messages":"33","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"34","messages":"35","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"31"},{"filePath":"36","messages":"37","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"38","usedDeprecatedRules":"31"},{"filePath":"39","messages":"40","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"41","messages":"42","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"43","usedDeprecatedRules":"31"},{"filePath":"44","messages":"45","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"46","messages":"47","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"48","messages":"49","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"50","messages":"51","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"52"},{"filePath":"53","messages":"54","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"C:\\Users\\kadam\\react\\Visualization\\src\\index.js",[],"C:\\Users\\kadam\\react\\Visualization\\src\\components\\Matrix.js",["55","56","57","58"],"import React, { useEffect ,useState} from \"react\";\r\nimport \"./Matrix.css\";\r\nimport Node from \"./Node\";\r\nimport \"./Node.css\";\r\nimport dijkstra,{getNodesInShortestPathOrder} from \"../algorithms/dijkstra\";\r\nimport Astar from \"../algorithms/Astar\";\r\nimport BFS from \"../algorithms/BFS\";\r\nimport \"./index.css\";\r\nimport Button from \"./Button\"; \r\nimport Heading from \"./Heading\";\r\nimport Dropdown from \"./Dropdown\"\r\n\r\nfunction getInitialGrid () {\r\n  const grid=[];\r\n  for (let row = 0; row < 15; row++) {\r\n    const rowgri=[];\r\n    for (let col = 0; col < 40; col++) {\r\n      rowgri.push(createNode(col, row));\r\n    }\r\n    grid.push(rowgri);\r\n  }\r\n  return grid;\r\n};\r\n\r\nfunction Matrix() {\r\n  const [grid1, setgrid] = useState([]);\r\n  useEffect(()=>{\r\n    const grid2=getInitialGrid();\r\n    setgrid(grid2);\r\n  },[]);\r\n  return (\r\n    <>\r\n      <div className=\"navbar\">\r\n                <Heading name=\"Path Visualization\"></Heading>\r\n            <ul>\r\n                <Dropdown name=\"Algorithm\"></Dropdown>\r\n                <Dropdown name=\"Maze and pattern\"></Dropdown>\r\n                {/* <button onClick={()=>visualizeBFS(grid1)}>Start</button> */}\r\n                {/* <button onClick={()=>visualizeAstar(grid1)}>Start</button> */}\r\n                <button onClick={()=>visualizeDijkstra(grid1)}>Start</button>\r\n                <Button title=\"Stop!\"></Button>\r\n            </ul>\r\n        </div>\r\n      <center>\r\n        <div className=\"grid\">\r\n          {grid1.map((row, rowIdx) => {\r\n            return (\r\n              <div key={rowIdx}>\r\n                {row.map((node, nodeIdx) => {\r\n                  const { row, col, isFinish, isStart, isWall } = node;\r\n                  return (\r\n                    <Node\r\n                      key={nodeIdx}\r\n                      col={col}\r\n                      isFinish={isFinish}\r\n                      isStart={isStart}\r\n                      isWall={isWall}\r\n                      row={row}\r\n                    />\r\n                  );\r\n                })}\r\n              </div>\r\n            );\r\n          })}\r\n        </div>\r\n      </center>\r\n    </>\r\n  );\r\n}\r\n\r\nexport default Matrix;\r\n\r\nconst createNode = (col, row) => {\r\n  return {\r\n    col,\r\n    row,\r\n    isStart: row === 6 && col === 10,\r\n    isFinish: row === 7 && col === 13,\r\n    distance: Infinity,\r\n    isVisited: false,\r\n    isWall: false,\r\n    previousNode: null,\r\n  };\r\n};\r\n\r\nfunction animateDijkstra(visitedNodesInOrder, nodesInShortestPathOrder) {\r\n  for (let i = 0; i <= visitedNodesInOrder.length; i++) {\r\n    if (i === visitedNodesInOrder.length) {\r\n      setTimeout(() => {\r\n        animateShortestPath(nodesInShortestPathOrder);\r\n      }, 10 * i);\r\n      return;\r\n    }\r\n    setTimeout(() => {\r\n      const node = visitedNodesInOrder[i];\r\n      document.getElementById(`node-${node.row}-${node.col}`).className =\r\n        'node-visited';\r\n    }, 10 * i);\r\n  }\r\n}\r\n\r\nfunction animateShortestPath(nodesInShortestPathOrder) {\r\n  for (let i = 0; i < nodesInShortestPathOrder.length; i++) {\r\n    setTimeout(() => {\r\n      const node = nodesInShortestPathOrder[i];\r\n      document.getElementById(`node-${node.row}-${node.col}`).className =\r\n        'node-shortest-path';\r\n    }, 50 * i);\r\n  }\r\n}\r\n\r\nfunction visualizeDijkstra(grid1) {\r\n  console.log(\"run\");\r\n  const startNode = grid1[6][10];\r\n  const finishNode = grid1[7][13];\r\n  const visitedNodes  = dijkstra(grid1, startNode, finishNode);\r\n  const nodesInShortestPathOrder =  getNodesInShortestPathOrder(finishNode,startNode)\r\n  animateDijkstra(visitedNodes, nodesInShortestPathOrder);\r\n}\r\n\r\n\r\nfunction visualizeAstar(grid1) {\r\n  console.log(\"run\");\r\n  const startNode = grid1[6][10];\r\n  const finishNode = grid1[7][13];\r\n  const visitedNodes  = Astar(grid1, startNode, finishNode);\r\n  // const nodesInShortestPathOrder =  getNodesInShortestPathOrder(finishNode,startNode)\r\n  // animateDijkstra(visitedNodes, nodesInShortestPathOrder);\r\n}\r\n\r\n\r\nfunction visualizeBFS(grid1) {\r\n  console.log(\"run\");\r\n  const startNode = grid1[6][10];\r\n  const finishNode = grid1[7][13];\r\n  const visitedNodes  = BFS(grid1, startNode, finishNode);\r\n  // const nodesInShortestPathOrder =  getNodesInShortestPathOrder(finishNode,startNode)\r\n  // animateDijkstra(visitedNodes, nodesInShortestPathOrder);\r\n}\r\n\r\n",["59","60"],"C:\\Users\\kadam\\react\\Visualization\\src\\algorithms\\dijkstra.js",[],"C:\\Users\\kadam\\react\\Visualization\\src\\algorithms\\BFS.js",[],"C:\\Users\\kadam\\react\\Visualization\\src\\algorithms\\Astar.js",["61","62","63"],"\r\nfunction Astar(grid1,startNode, finishNode){\r\n    if(startNode==finishNode || !startNode || !finishNode){\r\n        return false;\r\n    }\r\n    \r\n    const graph=creategraph(grid1);\r\n    console.log(\"Graph created\");\r\n\r\n}\r\n\r\n\r\n\r\nfunction creategraph(grid){\r\n    const graph=new Graph();\r\n    for(let row=0;row<15;row++)\r\n    {\r\n        for(let col=0;col<=40;col++)\r\n        {\r\n            graph.addVertex(grid[row][col]);\r\n        }\r\n    }\r\n    for(let row=0;row<15;row++)\r\n    {\r\n        for(let col=0;col<=40;col++)\r\n        {\r\n            if((col+1<40)){\r\n                graph.addVertex(grid[row][col],grid[row][col+1]);\r\n            }\r\n            if((col-1>=0)){\r\n                graph.addVertex(grid[row][col],grid[row][col-1]);\r\n            }\r\n            if((row-1)>=0){\r\n                graph.addVertex(grid[row][col],grid[row-1][col]);\r\n            }\r\n            if((row+1)<15){\r\n                graph.addVertex(grid[row][col],grid[row+1][col]);\r\n            }\r\n        }\r\n    }\r\n    return graph;\r\n}\r\n\r\n\r\nclass Graph{\r\n  constructor(noOfVertices){\r\n      this.noOfVertices=noOfVertices;\r\n      this.Adjlist=new Map()\r\n  }  \r\n\r\n  addVertex(v){\r\n      this.Adjlist.set(v,[]);\r\n  }\r\n\r\n  addEdge(v,w){\r\n      this.Adjlist.get(v).push(w);\r\n  }\r\n\r\n  getAdjacents(node){\r\n      return this.Adjlist.get(node)\r\n  }\r\n\r\n  isAdjacent(node,neighbor) {\r\n    var temp=0;\r\n    this.AdjList.get(node).forEach(adj => {\r\n        if(adj === neighbor){\r\n            temp++;\r\n        }\r\n    })\r\n    if(temp==0){\r\n        return false;\r\n    }else{\r\n        return true;\r\n    }\r\n}\r\n}\r\n\r\nexport default Astar;","C:\\Users\\kadam\\react\\Visualization\\src\\components\\Heading.jsx",[],"C:\\Users\\kadam\\react\\Visualization\\src\\components\\Button.jsx",["64"],"import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\n\r\n\r\nfunction Button(props){\r\n  return (\r\n  <>\r\n  <button className=\"buttons\">{props.title}</button>\r\n  </>);\r\n}\r\n\r\n\r\nexport default Button;","C:\\Users\\kadam\\react\\Visualization\\src\\components\\Dropdown.jsx",[],"C:\\Users\\kadam\\react\\Visualization\\src\\serviceWorker.js",[],"C:\\Users\\kadam\\react\\Visualization\\src\\App.js",[],"C:\\Users\\kadam\\react\\Visualization\\src\\visualizers\\PathfindingVisualizer.jsx",["65","66"],"import React, {useEffect ,useState, useRef} from 'react';\r\n\r\nimport Node from '../models/Node/Node';\r\nimport {dijkstra, getNodesInShortestPathOrder} from '../algorithms/dijkstra';\r\nimport './PathfindingVisualizer.css'; \r\nimport Heading from \"../components/Heading\";\r\nimport Dropdown from \"../components/Dropdown\"\r\n\r\nconst START_NODE_ROW = 10;\r\nconst START_NODE_COL = 10;\r\nconst FINISH_NODE_ROW = 8;\r\nconst FINISH_NODE_COL = 39;\r\n\r\n\r\nconst PathfindingVisualizer = () => {\r\n  const [grid, setGrid] = useState([]);\r\n  const [mouseIsPressed, setMouseIsPressed] = useState(false);\r\n  const [timer, setTimer] = useState(0)\r\n  const [isActive, setIsActive] = useState(false)\r\n  const [isPaused, setIsPaused] = useState(false)\r\n  const countRef = useRef(null)\r\n\r\n  const handleStart = () => {\r\n    setIsActive(true)\r\n    setIsPaused(true)\r\n    countRef.current = setInterval(() => {\r\n      setTimer((timer) => timer + 1)\r\n    }, 1000)\r\n  }\r\n\r\n  const handlePause = () => {\r\n    clearInterval(countRef.current)\r\n    setIsPaused(false)\r\n  }\r\n\r\n  const handleReset = () => {\r\n    clearInterval(countRef.current)\r\n    setIsActive(false)\r\n    setIsPaused(false)\r\n    setTimer(0)\r\n  }\r\n\r\n  const formatTime = () => {\r\n    const getSeconds = `0${(timer % 60)}`.slice(-2)\r\n    const minutes = `${Math.floor(timer / 60)}`\r\n    const getMinutes = `0${minutes % 60}`.slice(-2)\r\n    const getHours = `0${Math.floor(timer / 3600)}`.slice(-2)\r\n\r\n    return `${getHours} : ${getMinutes} : ${getSeconds}`\r\n  }\r\n\r\n  useEffect(()=>{\r\n    console.log('component mounted');\r\n    const grid = getInitialGrid();\r\n    setGrid(grid);\r\n  },[])\r\n\r\n  const handleMouseDown = (row, col) => {\r\n    const newGrid = getNewGridWithWallToggled(grid, row, col);\r\n    setGrid(newGrid);\r\n    setMouseIsPressed(true);\r\n  }\r\n\r\n  const handleMouseEnter = (row, col) => {\r\n    if (!mouseIsPressed) return;\r\n    const newGrid = getNewGridWithWallToggled(grid, row, col);\r\n    setGrid(newGrid);\r\n  }\r\n\r\n  const handleMouseUp = () => {\r\n    setMouseIsPressed(false);\r\n  }\r\n\r\n  const animateDijkstra = (visitedNodesInOrder, nodesInShortestPathOrder) => {\r\n    for (let i = 0; i <= visitedNodesInOrder.length; i++) {\r\n      if (i === visitedNodesInOrder.length) {\r\n        setTimeout(() => {\r\n          animateShortestPath(nodesInShortestPathOrder);\r\n        }, 10 * i);\r\n        return;\r\n      }\r\n      setTimeout(() => {\r\n        const node = visitedNodesInOrder[i];\r\n        document.getElementById(`node-${node.row}-${node.col}`).className =\r\n          'node node-visited';\r\n      }, 10 * i);\r\n    }\r\n  }\r\n\r\n  const animateShortestPath = (nodesInShortestPathOrder) =>  {\r\n    for (let i = 0; i < nodesInShortestPathOrder.length; i++) {\r\n      setTimeout(() => {\r\n        const node = nodesInShortestPathOrder[i];\r\n        document.getElementById(`node-${node.row}-${node.col}`).className =\r\n          'node node-shortest-path';\r\n      }, 50 * i);\r\n    }\r\n    handlePause();\r\n  }\r\n\r\n  const visualizeDijkstra = () => {\r\n    handleStart();\r\n    const startNode = grid[START_NODE_ROW][START_NODE_COL];\r\n    const finishNode = grid[FINISH_NODE_ROW][FINISH_NODE_COL];\r\n    const visitedNodesInOrder = dijkstra(grid, startNode, finishNode);\r\n    const nodesInShortestPathOrder = getNodesInShortestPathOrder(finishNode);\r\n    animateDijkstra(visitedNodesInOrder, nodesInShortestPathOrder);\r\n  }\r\n\r\n  const clearBoard = () => {\r\n    handleReset();\r\n    setGrid(getInitialGrid());\r\n  }\r\n\r\n\r\n  return (\r\n    <>\r\n      <div className=\"navbar\">\r\n              <Heading name=\"Path Visualization\"></Heading>\r\n          <ul>\r\n              <Dropdown name=\"Dijkstra\"></Dropdown>\r\n              <Dropdown name=\"Maze and pattern\"></Dropdown>\r\n              \r\n              <button onClick={() => visualizeDijkstra()}>\r\n                Start\r\n              </button>\r\n              <button onClick={() => clearBoard()}>\r\n                Clear Board\r\n              </button>\r\n              <button >\r\n                Select Start Node\r\n              </button>\r\n              {formatTime()}\r\n          </ul>\r\n      </div>\r\n      <div className=\"grid\">\r\n        {grid.map((row, rowIdx) => {\r\n          return (\r\n            <div key={rowIdx}>\r\n              {row.map((node, nodeIdx) => {\r\n                const {row, col, isFinish, isStart, isWall} = node;\r\n                return (\r\n                  <Node\r\n                    key={nodeIdx}\r\n                    col={col}\r\n                    isFinish={isFinish}\r\n                    isStart={isStart}\r\n                    isWall={isWall}\r\n                    mouseIsPressed={mouseIsPressed}\r\n                    onMouseDown={(row, col) => handleMouseDown(row, col)}\r\n                    onMouseEnter={(row, col) =>\r\n                      handleMouseEnter(row, col)\r\n                    }\r\n                    onMouseUp={() => handleMouseUp()}\r\n                    row={row}></Node>\r\n                );\r\n              })}\r\n            </div>\r\n          );\r\n        })}\r\n      </div>\r\n    </>\r\n  );\r\n}\r\n\r\n\r\n\r\nconst getInitialGrid = () => {\r\n    const grid = [];\r\n    for (let row = 0; row < 20; row++) {\r\n      const currentRow = [];\r\n      for (let col = 0; col < 50; col++) {\r\n        currentRow.push(createNode(col, row));\r\n      }\r\n      grid.push(currentRow);\r\n    }\r\n    return grid;\r\n};\r\n\r\nconst createNode = (col, row) => {\r\n    return {\r\n        col,\r\n        row,\r\n        isStart: row === START_NODE_ROW && col === START_NODE_COL,\r\n        isFinish: row === FINISH_NODE_ROW && col === FINISH_NODE_COL,\r\n        distance: Infinity,\r\n        isVisited: false,\r\n        isWall: false,\r\n        previousNode: null,\r\n    };\r\n};\r\n\r\nconst getNewGridWithWallToggled = (grid, row, col) => {\r\n    const newGrid = grid.slice();\r\n    const node = newGrid[row][col];\r\n    const newNode = {\r\n        ...node,\r\n        isWall: !node.isWall,\r\n    };\r\n    newGrid[row][col] = newNode;\r\n    return newGrid;\r\n};\r\n  \r\n\r\nexport default PathfindingVisualizer;","C:\\Users\\kadam\\react\\Visualization\\src\\models\\Node\\Node.jsx",[],{"ruleId":"67","severity":1,"message":"68","line":122,"column":10,"nodeType":"69","messageId":"70","endLine":122,"endColumn":24},{"ruleId":"67","severity":1,"message":"71","line":126,"column":9,"nodeType":"69","messageId":"70","endLine":126,"endColumn":21},{"ruleId":"67","severity":1,"message":"72","line":132,"column":10,"nodeType":"69","messageId":"70","endLine":132,"endColumn":22},{"ruleId":"67","severity":1,"message":"71","line":136,"column":9,"nodeType":"69","messageId":"70","endLine":136,"endColumn":21},{"ruleId":"73","replacedBy":"74"},{"ruleId":"75","replacedBy":"76"},{"ruleId":"77","severity":1,"message":"78","line":3,"column":17,"nodeType":"79","messageId":"80","endLine":3,"endColumn":19},{"ruleId":"67","severity":1,"message":"81","line":7,"column":11,"nodeType":"69","messageId":"70","endLine":7,"endColumn":16},{"ruleId":"77","severity":1,"message":"78","line":70,"column":12,"nodeType":"79","messageId":"80","endLine":70,"endColumn":14},{"ruleId":"67","severity":1,"message":"82","line":2,"column":8,"nodeType":"69","messageId":"70","endLine":2,"endColumn":16},{"ruleId":"67","severity":1,"message":"83","line":19,"column":10,"nodeType":"69","messageId":"70","endLine":19,"endColumn":18},{"ruleId":"67","severity":1,"message":"84","line":20,"column":10,"nodeType":"69","messageId":"70","endLine":20,"endColumn":18},"no-unused-vars","'visualizeAstar' is defined but never used.","Identifier","unusedVar","'visitedNodes' is assigned a value but never used.","'visualizeBFS' is defined but never used.","no-native-reassign",["85"],"no-negated-in-lhs",["86"],"eqeqeq","Expected '===' and instead saw '=='.","BinaryExpression","unexpected","'graph' is assigned a value but never used.","'ReactDOM' is defined but never used.","'isActive' is assigned a value but never used.","'isPaused' is assigned a value but never used.","no-global-assign","no-unsafe-negation"]
>>>>>>> 54563864a8eeea9b30ea05630c98cba1ab2b2fa7
