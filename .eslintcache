[{"C:\\Users\\kadam\\react\\Visualization\\src\\index.js":"1","C:\\Users\\kadam\\react\\Visualization\\src\\components\\Matrix.js":"2","C:\\Users\\kadam\\react\\Visualization\\src\\components\\Node.js":"3","C:\\Users\\kadam\\react\\Visualization\\src\\algorithms\\dijkstra.js":"4","C:\\Users\\kadam\\react\\Visualization\\src\\algorithms\\BFS.js":"5","C:\\Users\\kadam\\react\\Visualization\\src\\algorithms\\Astar.js":"6","C:\\Users\\kadam\\react\\Visualization\\src\\components\\Heading.jsx":"7","C:\\Users\\kadam\\react\\Visualization\\src\\components\\Button.jsx":"8","C:\\Users\\kadam\\react\\Visualization\\src\\components\\Dropdown.jsx":"9"},{"size":214,"mtime":1616737413823,"results":"10","hashOfConfig":"11"},{"size":4257,"mtime":1616924588584,"results":"12","hashOfConfig":"11"},{"size":510,"mtime":1612193667368,"results":"13","hashOfConfig":"11"},{"size":3356,"mtime":1616924632408,"results":"14","hashOfConfig":"11"},{"size":2741,"mtime":1616924659123,"results":"15","hashOfConfig":"11"},{"size":1596,"mtime":1616743918475,"results":"16","hashOfConfig":"11"},{"size":193,"mtime":1612089458921,"results":"17","hashOfConfig":"11"},{"size":202,"mtime":1612092257458,"results":"18","hashOfConfig":"11"},{"size":350,"mtime":1612093074459,"results":"19","hashOfConfig":"11"},{"filePath":"20","messages":"21","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"triyp6",{"filePath":"22","messages":"23","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"24"},{"filePath":"25","messages":"26","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"27","messages":"28","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"29","messages":"30","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"31","messages":"32","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"33"},{"filePath":"34","messages":"35","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"36"},{"filePath":"37","messages":"38","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"39"},{"filePath":"40","messages":"41","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"42"},"C:\\Users\\kadam\\react\\Visualization\\src\\index.js",[],"C:\\Users\\kadam\\react\\Visualization\\src\\components\\Matrix.js",["43","44","45","46"],"import React, { useEffect ,useState} from \"react\";\r\nimport \"./Matrix.css\";\r\nimport Node from \"./Node\";\r\nimport \"./Node.css\";\r\nimport dijkstra,{getNodesInShortestPathOrder} from \"../algorithms/dijkstra\";\r\nimport Astar from \"../algorithms/Astar\";\r\nimport BFS from \"../algorithms/BFS\";\r\nimport \"./index.css\";\r\nimport Button from \"./Button\"; \r\nimport Heading from \"./Heading\";\r\nimport Dropdown from \"./Dropdown\"\r\n\r\nfunction getInitialGrid () {\r\n  const grid=[];\r\n  for (let row = 0; row < 15; row++) {\r\n    const rowgri=[];\r\n    for (let col = 0; col < 40; col++) {\r\n      rowgri.push(createNode(col, row));\r\n    }\r\n    grid.push(rowgri);\r\n  }\r\n  return grid;\r\n};\r\n\r\nfunction Matrix() {\r\n  const [grid1, setgrid] = useState([]);\r\n  useEffect(()=>{\r\n    const grid2=getInitialGrid();\r\n    setgrid(grid2);\r\n  },[]);\r\n  return (\r\n    <>\r\n      <div className=\"navbar\">\r\n                <Heading name=\"Path Visualization\"></Heading>\r\n            <ul>\r\n                <Dropdown name=\"Algorithm\"></Dropdown>\r\n                <Dropdown name=\"Maze and pattern\"></Dropdown>\r\n                {/* <button onClick={()=>visualizeBFS(grid1)}>Start</button> */}\r\n                {/* <button onClick={()=>visualizeAstar(grid1)}>Start</button> */}\r\n                <button onClick={()=>visualizeDijkstra(grid1)}>Start</button>\r\n                <Button title=\"Stop!\"></Button>\r\n            </ul>\r\n        </div>\r\n      <center>\r\n        <div className=\"grid\">\r\n          {grid1.map((row, rowIdx) => {\r\n            return (\r\n              <div key={rowIdx}>\r\n                {row.map((node, nodeIdx) => {\r\n                  const { row, col, isFinish, isStart, isWall } = node;\r\n                  return (\r\n                    <Node\r\n                      key={nodeIdx}\r\n                      col={col}\r\n                      isFinish={isFinish}\r\n                      isStart={isStart}\r\n                      isWall={isWall}\r\n                      row={row}\r\n                    />\r\n                  );\r\n                })}\r\n              </div>\r\n            );\r\n          })}\r\n        </div>\r\n      </center>\r\n    </>\r\n  );\r\n}\r\n\r\nexport default Matrix;\r\n\r\nconst createNode = (col, row) => {\r\n  return {\r\n    col,\r\n    row,\r\n    isStart: row === 6 && col === 10,\r\n    isFinish: row === 7 && col === 13,\r\n    distance: Infinity,\r\n    isVisited: false,\r\n    isWall: false,\r\n    previousNode: null,\r\n  };\r\n};\r\n\r\nfunction animateDijkstra(visitedNodesInOrder, nodesInShortestPathOrder) {\r\n  for (let i = 0; i <= visitedNodesInOrder.length; i++) {\r\n    if (i === visitedNodesInOrder.length) {\r\n      setTimeout(() => {\r\n        animateShortestPath(nodesInShortestPathOrder);\r\n      }, 10 * i);\r\n      return;\r\n    }\r\n    setTimeout(() => {\r\n      const node = visitedNodesInOrder[i];\r\n      document.getElementById(`node-${node.row}-${node.col}`).className =\r\n        'node-visited';\r\n    }, 10 * i);\r\n  }\r\n}\r\n\r\nfunction animateShortestPath(nodesInShortestPathOrder) {\r\n  for (let i = 0; i < nodesInShortestPathOrder.length; i++) {\r\n    setTimeout(() => {\r\n      const node = nodesInShortestPathOrder[i];\r\n      document.getElementById(`node-${node.row}-${node.col}`).className =\r\n        'node-shortest-path';\r\n    }, 50 * i);\r\n  }\r\n}\r\n\r\nfunction visualizeDijkstra(grid1) {\r\n  console.log(\"run\");\r\n  const startNode = grid1[6][10];\r\n  const finishNode = grid1[7][13];\r\n  const visitedNodes  = dijkstra(grid1, startNode, finishNode);\r\n  const nodesInShortestPathOrder =  getNodesInShortestPathOrder(finishNode,startNode)\r\n  animateDijkstra(visitedNodes, nodesInShortestPathOrder);\r\n}\r\n\r\n\r\nfunction visualizeAstar(grid1) {\r\n  console.log(\"run\");\r\n  const startNode = grid1[6][10];\r\n  const finishNode = grid1[7][13];\r\n  const visitedNodes  = Astar(grid1, startNode, finishNode);\r\n  // const nodesInShortestPathOrder =  getNodesInShortestPathOrder(finishNode,startNode)\r\n  // animateDijkstra(visitedNodes, nodesInShortestPathOrder);\r\n}\r\n\r\n\r\nfunction visualizeBFS(grid1) {\r\n  console.log(\"run\");\r\n  const startNode = grid1[6][10];\r\n  const finishNode = grid1[7][13];\r\n  const visitedNodes  = BFS(grid1, startNode, finishNode);\r\n  // const nodesInShortestPathOrder =  getNodesInShortestPathOrder(finishNode,startNode)\r\n  // animateDijkstra(visitedNodes, nodesInShortestPathOrder);\r\n}\r\n\r\n","C:\\Users\\kadam\\react\\Visualization\\src\\components\\Node.js",[],"C:\\Users\\kadam\\react\\Visualization\\src\\algorithms\\dijkstra.js",[],"C:\\Users\\kadam\\react\\Visualization\\src\\algorithms\\BFS.js",[],"C:\\Users\\kadam\\react\\Visualization\\src\\algorithms\\Astar.js",["47","48","49"],"\r\nfunction Astar(grid1,startNode, finishNode){\r\n    if(startNode==finishNode || !startNode || !finishNode){\r\n        return false;\r\n    }\r\n    \r\n    const graph=creategraph(grid1);\r\n    console.log(\"Graph created\");\r\n\r\n}\r\n\r\n\r\n\r\nfunction creategraph(grid){\r\n    const graph=new Graph();\r\n    for(let row=0;row<15;row++)\r\n    {\r\n        for(let col=0;col<=40;col++)\r\n        {\r\n            graph.addVertex(grid[row][col]);\r\n        }\r\n    }\r\n    for(let row=0;row<15;row++)\r\n    {\r\n        for(let col=0;col<=40;col++)\r\n        {\r\n            if((col+1<40)){\r\n                graph.addVertex(grid[row][col],grid[row][col+1]);\r\n            }\r\n            if((col-1>=0)){\r\n                graph.addVertex(grid[row][col],grid[row][col-1]);\r\n            }\r\n            if((row-1)>=0){\r\n                graph.addVertex(grid[row][col],grid[row-1][col]);\r\n            }\r\n            if((row+1)<15){\r\n                graph.addVertex(grid[row][col],grid[row+1][col]);\r\n            }\r\n        }\r\n    }\r\n    return graph;\r\n}\r\n\r\n\r\nclass Graph{\r\n  constructor(noOfVertices){\r\n      this.noOfVertices=noOfVertices;\r\n      this.Adjlist=new Map()\r\n  }  \r\n\r\n  addVertex(v){\r\n      this.Adjlist.set(v,[]);\r\n  }\r\n\r\n  addEdge(v,w){\r\n      this.Adjlist.get(v).push(w);\r\n  }\r\n\r\n  getAdjacents(node){\r\n      return this.Adjlist.get(node)\r\n  }\r\n\r\n  isAdjacent(node,neighbor) {\r\n    var temp=0;\r\n    this.AdjList.get(node).forEach(adj => {\r\n        if(adj === neighbor){\r\n            temp++;\r\n        }\r\n    })\r\n    if(temp==0){\r\n        return false;\r\n    }else{\r\n        return true;\r\n    }\r\n}\r\n}\r\n\r\nexport default Astar;","C:\\Users\\kadam\\react\\Visualization\\src\\components\\Heading.jsx",["50"],"import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\n\r\n\r\nfunction Heading(props){\r\n  return (\r\n  <>\r\n  <p className=\"heading\">{props.name}</p>\r\n  </>);\r\n}\r\n\r\n\r\nexport default Heading;","C:\\Users\\kadam\\react\\Visualization\\src\\components\\Button.jsx",["51"],"import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\n\r\n\r\nfunction Button(props){\r\n  return (\r\n  <>\r\n  <button className=\"buttons\">{props.title}</button>\r\n  </>);\r\n}\r\n\r\n\r\nexport default Button;","C:\\Users\\kadam\\react\\Visualization\\src\\components\\Dropdown.jsx",["52"],"import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport \"./index.css\"\r\n\r\n\r\nfunction Dropdown(props){\r\n  return (\r\n  <>\r\n <select name=\"myName\" className=\"Dropdown\">\r\n\t<option value=\"1\">{props.name}</option>\r\n\t<option value=\"2\">Option 2</option>\r\n\t<option value=\"3\">Option 3</option>\r\n </select>\r\n  </>);\r\n}\r\n\r\n\r\nexport default Dropdown;",{"ruleId":"53","severity":1,"message":"54","line":122,"column":10,"nodeType":"55","messageId":"56","endLine":122,"endColumn":24},{"ruleId":"53","severity":1,"message":"57","line":126,"column":9,"nodeType":"55","messageId":"56","endLine":126,"endColumn":21},{"ruleId":"53","severity":1,"message":"58","line":132,"column":10,"nodeType":"55","messageId":"56","endLine":132,"endColumn":22},{"ruleId":"53","severity":1,"message":"57","line":136,"column":9,"nodeType":"55","messageId":"56","endLine":136,"endColumn":21},{"ruleId":"59","severity":1,"message":"60","line":3,"column":17,"nodeType":"61","messageId":"62","endLine":3,"endColumn":19},{"ruleId":"53","severity":1,"message":"63","line":7,"column":11,"nodeType":"55","messageId":"56","endLine":7,"endColumn":16},{"ruleId":"59","severity":1,"message":"60","line":70,"column":12,"nodeType":"61","messageId":"62","endLine":70,"endColumn":14},{"ruleId":"53","severity":1,"message":"64","line":2,"column":8,"nodeType":"55","messageId":"56","endLine":2,"endColumn":16},{"ruleId":"53","severity":1,"message":"64","line":2,"column":8,"nodeType":"55","messageId":"56","endLine":2,"endColumn":16},{"ruleId":"53","severity":1,"message":"64","line":2,"column":8,"nodeType":"55","messageId":"56","endLine":2,"endColumn":16},"no-unused-vars","'visualizeAstar' is defined but never used.","Identifier","unusedVar","'visitedNodes' is assigned a value but never used.","'visualizeBFS' is defined but never used.","eqeqeq","Expected '===' and instead saw '=='.","BinaryExpression","unexpected","'graph' is assigned a value but never used.","'ReactDOM' is defined but never used."]