[{"/home/sourabh/Downloads/react/tmp/Visualization/src/index.js":"1","/home/sourabh/Downloads/react/tmp/Visualization/src/App.js":"2","/home/sourabh/Downloads/react/tmp/Visualization/src/visualizers/PathfindingVisualizer.jsx":"3","/home/sourabh/Downloads/react/tmp/Visualization/src/mazeAlgorithms/basicWeighted.js":"4","/home/sourabh/Downloads/react/tmp/Visualization/src/mazeAlgorithms/Simplestair.js":"5","/home/sourabh/Downloads/react/tmp/Visualization/src/mazeAlgorithms/verticaldiv.js":"6","/home/sourabh/Downloads/react/tmp/Visualization/src/mazeAlgorithms/recursive.js":"7","/home/sourabh/Downloads/react/tmp/Visualization/src/mazeAlgorithms/basicRandom.js":"8","/home/sourabh/Downloads/react/tmp/Visualization/src/mazeAlgorithms/horizontaldiv.js":"9","/home/sourabh/Downloads/react/tmp/Visualization/src/mazeAlgorithms/Snakemaze.js":"10","/home/sourabh/Downloads/react/tmp/Visualization/src/components/Card.js":"11","/home/sourabh/Downloads/react/tmp/Visualization/src/algorithms/BFS.js":"12","/home/sourabh/Downloads/react/tmp/Visualization/src/algorithms/dijkstra.js":"13","/home/sourabh/Downloads/react/tmp/Visualization/src/algorithms/DFS.js":"14","/home/sourabh/Downloads/react/tmp/Visualization/src/algorithms/Astar.js":"15","/home/sourabh/Downloads/react/tmp/Visualization/src/mazeAlgorithms/chanceMazeV.js":"16","/home/sourabh/Downloads/react/tmp/Visualization/src/mazeAlgorithms/chanceMazeH.js":"17","/home/sourabh/Downloads/react/tmp/Visualization/src/models/Node/Node.jsx":"18"},{"size":168,"mtime":1618029189295,"results":"19","hashOfConfig":"20"},{"size":268,"mtime":1618759943892,"results":"21","hashOfConfig":"20"},{"size":27287,"mtime":1618808098338,"results":"22","hashOfConfig":"20"},{"size":651,"mtime":1618412414227,"results":"23","hashOfConfig":"20"},{"size":595,"mtime":1618759900035,"results":"24","hashOfConfig":"20"},{"size":1402,"mtime":1618759900035,"results":"25","hashOfConfig":"20"},{"size":3196,"mtime":1618759900035,"results":"26","hashOfConfig":"20"},{"size":1807,"mtime":1618759900035,"results":"27","hashOfConfig":"20"},{"size":1414,"mtime":1618759900035,"results":"28","hashOfConfig":"20"},{"size":1650,"mtime":1618412414227,"results":"29","hashOfConfig":"20"},{"size":655,"mtime":1618469338421,"results":"30","hashOfConfig":"20"},{"size":3524,"mtime":1618412414227,"results":"31","hashOfConfig":"20"},{"size":3527,"mtime":1618412414227,"results":"32","hashOfConfig":"20"},{"size":3402,"mtime":1618412414227,"results":"33","hashOfConfig":"20"},{"size":3269,"mtime":1618412414223,"results":"34","hashOfConfig":"20"},{"size":2326,"mtime":1618759900035,"results":"35","hashOfConfig":"20"},{"size":2488,"mtime":1618759900035,"results":"36","hashOfConfig":"20"},{"size":743,"mtime":1618029189295,"results":"37","hashOfConfig":"20"},{"filePath":"38","messages":"39","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"40"},"dytndw",{"filePath":"41","messages":"42","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"40"},{"filePath":"43","messages":"44","errorCount":0,"warningCount":54,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"45","messages":"46","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"47","usedDeprecatedRules":"40"},{"filePath":"48","messages":"49","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"50","usedDeprecatedRules":"40"},{"filePath":"51","messages":"52","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"40"},{"filePath":"53","messages":"54","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"40"},{"filePath":"55","messages":"56","errorCount":0,"warningCount":6,"fixableErrorCount":0,"fixableWarningCount":0,"source":"57","usedDeprecatedRules":"40"},{"filePath":"58","messages":"59","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"40"},{"filePath":"60","messages":"61","errorCount":0,"warningCount":14,"fixableErrorCount":0,"fixableWarningCount":0,"source":"62","usedDeprecatedRules":"40"},{"filePath":"63","messages":"64","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"40"},{"filePath":"65","messages":"66","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"67","usedDeprecatedRules":"40"},{"filePath":"68","messages":"69","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"70","usedDeprecatedRules":"40"},{"filePath":"71","messages":"72","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"73","usedDeprecatedRules":"40"},{"filePath":"74","messages":"75","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"76","usedDeprecatedRules":"40"},{"filePath":"77","messages":"78","errorCount":0,"warningCount":17,"fixableErrorCount":0,"fixableWarningCount":0,"source":"79","usedDeprecatedRules":"40"},{"filePath":"80","messages":"81","errorCount":0,"warningCount":17,"fixableErrorCount":0,"fixableWarningCount":0,"source":"82","usedDeprecatedRules":"40"},{"filePath":"83","messages":"84","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"85","usedDeprecatedRules":"40"},"/home/sourabh/Downloads/react/tmp/Visualization/src/index.js",[],["86","87"],"/home/sourabh/Downloads/react/tmp/Visualization/src/App.js",[],"/home/sourabh/Downloads/react/tmp/Visualization/src/visualizers/PathfindingVisualizer.jsx",["88","89","90","91","92","93","94","95","96","97","98","99","100","101","102","103","104","105","106","107","108","109","110","111","112","113","114","115","116","117","118","119","120","121","122","123","124","125","126","127","128","129","130","131","132","133","134","135","136","137","138","139","140","141"],"/home/sourabh/Downloads/react/tmp/Visualization/src/mazeAlgorithms/basicWeighted.js",["142","143","144","145"],"function basicWeighted(grid, startNode, finishNode) {\n     var grid1 = []\n     for (var i = 0; i < 20; i += 3) {\n          for (var j = 0; j < 50; j += 3) {\n               var x = Math.floor((Math.random() * 10) + 1);\n               var col = Math.abs(i - x);\n               var row = Math.abs(j - x);\n               if (col == startNode.col && row == startNode.row) {\n                    continue;\n               }\n               else if (col == finishNode.col && row == finishNode.row) {\n                    continue;\n               }\n               grid1.push(grid[col][row]);\n          }\n     }\n     return grid1;\n}\n\n\nexport default basicWeighted;","/home/sourabh/Downloads/react/tmp/Visualization/src/mazeAlgorithms/Simplestair.js",["146","147","148","149"],"function Simplestair(grid, startNode, finishNode) {\n  var grid1 = [];\n  let x = grid.length;\n  let y = 0;\n  while (x < 2 * (grid.length) - 1 && y < grid.length - 4) {\n    if (grid[y][x] == startNode || grid[y][x] == finishNode) {\n      continue;\n    }\n    else {\n      grid1.push(grid[y][x]);\n    }\n    x++;\n    y++;\n  };\n  x = grid.length - 1;\n  y = 0;\n  while (x >= 0 && y < grid.length-1) {\n    if (grid[y][x] == startNode || grid[y][x] == finishNode) {\n      continue;\n    }\n    else {\n      grid1.push(grid[y][x]);\n    }\n    x--;\n    y++;\n  };\n  return grid1;\n}\n\nexport default Simplestair;","/home/sourabh/Downloads/react/tmp/Visualization/src/mazeAlgorithms/verticaldiv.js",[],"/home/sourabh/Downloads/react/tmp/Visualization/src/mazeAlgorithms/recursive.js",[],"/home/sourabh/Downloads/react/tmp/Visualization/src/mazeAlgorithms/basicRandom.js",["150","151","152","153","154","155"],"function basicRandom(grid, startNode, finishNode) {\n     var grid1 = []\n     // let cIdY=grid.length[0]-10;\n     // for(let c=0 ;c<10;c++)\n     // {\n     //      let cIdXone= Math.floor(grid.length/2)-c;\n     //      let cIdXtwo = Math.floor(grid.length/2)+c;\n     //      // let cIdone = cIdY-cIdXone;\n     //      // let cIdtwo = cIdY-cIdXtwo;\n     //      console.log(cIdXone);\n     //      console.log(cIdXtwo);\n     //      // console.log((cIdY,cIdtwo));\n     //      if(cIdy>=20 || CIdXone>=50 || cIdXtwo>=50){\n     //           continue;\n     //      }\n     //      else{\n     //           grid1.push(grid[cIdY][cIdXone]);\n     //           grid1.push(grid[cIdY][cIdXtwo]);\n     //      }\n     //      // console.log(cIdone);\n     //      // console.log(cIdtwo);\n     // }\n     for (var i = 0; i < 20; i += 3) {\n          for (var j = 0; j < 50; j += 3) {\n               var x = Math.floor((Math.random() * 10) + 1);\n               var col = Math.abs(i - x);\n               var row = Math.abs(j - x);\n               if (col == startNode.col && row == startNode.row) {\n                    continue;\n               }\n               else if (col == finishNode.col && row == finishNode.row) {\n                    continue;\n               }\n               if(grid1.length>1){\n               var count=0;\n               for(var k=0;k<grid1.length;k++)\n               {\n                    if(grid1[k]==grid[col][row])\n                    {\n                         count=1;\n                    }\n               }\n               if(count==0)\n               {\n                    grid1.push(grid[col][row]);\n               }\n               }\n               else\n               {\n               grid1.push(grid[col][row]);\n               }\n          }\n     }\n     return grid1;\n}\n\n\nexport default basicRandom;","/home/sourabh/Downloads/react/tmp/Visualization/src/mazeAlgorithms/horizontaldiv.js",[],"/home/sourabh/Downloads/react/tmp/Visualization/src/mazeAlgorithms/Snakemaze.js",["156","157","158","159","160","161","162","163","164","165","166","167","168","169"],"function Snake(grid, startNode, finishNode) {\n    let grid1 = []\n    let nrequired = []\n    for (let k = 1; k < 10; k++) {\n        for (let j = 1; j < 15; j++) {\n            let x = Math.floor((Math.random() * 50) + 1);\n            nrequired.push(grid[j][x]);\n        }\n    }\n    for (var i = 1; i < 20; i += 2) {\n        for (var j = 0; j < 50; j++) {\n            if (grid[i][j] == startNode && grid[i][j] == finishNode) {\n                continue;\n            }\n            else {\n                if (grid[i][j] == startNode || grid[i][j] == finishNode) {\n                    continue;\n                }\n                else {\n                    let count = 1;\n                    for (let z = 0; z < nrequired.length; z++) {\n                        if (grid[i][j] == nrequired[z]) {\n                            count = 0;\n                        }\n                    }\n                    if (count == 1) {\n                        grid1.push(grid[i][j]);\n                    }\n                }\n            }\n        }\n    }\n    for (var i = 2; i < 20; i += 2) {\n        for (var j = 10; j < 30; j += 2) {\n            if (grid[i][j] == startNode || grid[i][j] == finishNode) {\n                continue;\n            }\n            else {\n                grid1.push(grid[i][j - i + 10]);\n            }\n        }\n    }\n    for (var i = 1; i < 20; i += 2) {\n        for (var j = 50; j < 50; j += 2) {\n            if (grid[i][j] == startNode || grid[i][j] == finishNode) {\n                continue;\n            }\n            else {\n                grid1.push(grid[i][j - i -1]);\n            }\n        }\n    }\n    return grid1;\n}\n\nexport default Snake;","/home/sourabh/Downloads/react/tmp/Visualization/src/components/Card.js",[],"/home/sourabh/Downloads/react/tmp/Visualization/src/algorithms/BFS.js",["170","171","172"],"export default function BFS(grid, startNode, finishNode) {\n    if (startNode == finishNode || !startNode || !finishNode) {\n        return false;\n    }\n    // console.log(\"in BFS\");\n    var count = 0;\n    startNode.distance = 0;\n    const visited = new Map();\n    const visitedinorder = [];\n    const visitList = [];\n    visitList.push(startNode)\n    const graph = creategraph(grid);\n    while (visitList.length !== 0) {\n        const node = visitList.shift();\n        if (node && !visited.has(node)) {\n            if (node.isWall) continue;\n            visitedinorder.push(node);\n            count++;\n            visited.set(node);\n            // console.log(\"visited\");\n            // console.log(node.row);\n            // console.log(node.col);\n            if (node === finishNode) {\n                // console.log(\"count\",count);\n                return visitedinorder;\n            }\n            graph.getAdjacents(node).forEach(adj => visitList.push(adj));\n            updateUnvisitedNeighbors(visitList, node, graph);\n        }\n    }\n    return visitedinorder;\n\n}\n\n\n\nfunction creategraph(grid) {\n    const graph = new Graph(1000);\n    for (let row = 0; row < 20; row++) {\n        for (let col = 0; col < 50; col++) {\n            graph.addVertex(grid[row][col]);\n        }\n    }\n    for (let row = 0; row < 20; row++) {\n        for (let col = 0; col < 50; col++) {\n            if ((col + 1 < 50)) {\n                graph.addEdge(grid[row][col], grid[row][col + 1]);\n            }\n            if ((col - 1 >= 0)) {\n                graph.addEdge(grid[row][col], grid[row][col - 1]);\n            }\n            if ((row - 1) >= 0) {\n                graph.addEdge(grid[row][col], grid[row - 1][col]);\n            }\n            if ((row + 1) < 20) {\n                graph.addEdge(grid[row][col], grid[row + 1][col]);\n            }\n        }\n    }\n    return graph;\n}\n\n\nclass Graph {\n    constructor(noOfVertices) {\n        this.noOfVertices = noOfVertices;\n        this.Adjlist = new Map();\n    }\n\n    addVertex(v) {\n        this.Adjlist.set(v, []);\n    }\n\n    addEdge(v, w) {\n        this.Adjlist.get(v).push(w);\n    }\n\n    getAdjacents(node) {\n        return this.Adjlist.get(node);\n    }\n\n    isAdjacent(node, neighbor) {\n        var temp = 0;\n        this.Adjlist.get(neighbor).forEach(x => {\n            if (x == node) {\n                temp++;\n            }\n        })\n        if (temp === 0) {\n            return false;\n        } else {\n            return true;\n        }\n    }\n}\n\nfunction updateUnvisitedNeighbors(visitList, node, graph) {\n    // console.log(\"neigbour\");\n    for (const neighbor of visitList) {\n        if (!graph.isAdjacent(node, neighbor) || neighbor.previousNode !== null) {\n            continue;\n        } else if (graph.isAdjacent(node, neighbor)) {\n            neighbor.distance = node.distance + neighbor.weight + 1;\n            neighbor.previousNode = node;\n        }\n    }\n}\n\nexport function getNodesInShortestPathOrderBFS(finishNode, startNode) {\n    // console.log(\"shortest Path\");\n    const nodesInShortestPathOrder = [];\n    let currentNode = finishNode;\n    while (currentNode !== null) {\n        nodesInShortestPathOrder.unshift(currentNode);\n        //   console.log(currentNode.row);\n        //   console.log(currentNode.col);\n        currentNode = currentNode.previousNode;\n        if (currentNode === startNode) {\n            //   console.log(currentNode.row);\n            //   console.log(currentNode.col);\n            break;\n        }\n    }\n    return nodesInShortestPathOrder;\n}\n","/home/sourabh/Downloads/react/tmp/Visualization/src/algorithms/dijkstra.js",["173","174"],"export default function dijkstra(grid, startnode, endnode) {\r\n    startnode.distance = 0;\r\n    const visited = new Map();\r\n    const visitedinorder = [];\r\n    const visitList = [];\r\n    visitList.push(startnode);\r\n    const graph = creategraph(grid);\r\n    while (visitList.length !== 0) {\r\n        const node = visitList.shift();\r\n        if (node && !visited.has(node)) {\r\n            if (node.isWall) continue;\r\n            visitedinorder.push(node);\r\n            visited.set(node);\r\n            //   console.log(node.row);\r\n            //   console.log(node.col);\r\n            if (node == endnode) {\r\n                return visitedinorder;\r\n            }\r\n            graph.getAdjacents(node).forEach(adj => visitList.push(adj));\r\n            updateUnvisitedNeighbors(visitList, node, graph);\r\n            sortnodebydistance(visitList);\r\n        }\r\n    }\r\n    return visitedinorder;\r\n}\r\n\r\nfunction creategraph(grid) {\r\n    const graph = new Graph(1000);\r\n    for (let row = 0; row < 20; row++) {\r\n        for (let col = 0; col < 50; col++) {\r\n            graph.addVertex(grid[row][col]);\r\n        }\r\n    }\r\n    for (let row = 0; row < 20; row++) {\r\n        for (let col = 0; col < 50; col++) {\r\n            if ((col + 1 < 50)) {\r\n                graph.addEdge(grid[row][col], grid[row][col + 1]);\r\n            }\r\n            if ((row + 1) < 20) {\r\n                graph.addEdge(grid[row][col], grid[row + 1][col]);\r\n            }\r\n            if ((col - 1) >= 0) {\r\n                graph.addEdge(grid[row][col], grid[row][col - 1]);\r\n            }\r\n            if ((row - 1) >= 0) {\r\n                graph.addEdge(grid[row][col], grid[row - 1][col]);\r\n            }\r\n\r\n        }\r\n    }\r\n    return graph;\r\n}\r\n\r\nclass Graph {\r\n    constructor(noOfVertices) {\r\n        this.noOfVertices = noOfVertices;\r\n        this.AdjList = new Map();\r\n    }\r\n    addVertex(v) {\r\n        this.AdjList.set(v, []);\r\n    }\r\n    addEdge(v, w) {\r\n        this.AdjList.get(v).push(w);\r\n    }\r\n    getAdjacents(node) {\r\n        return this.AdjList.get(node);\r\n    }\r\n\r\n    isAdjacent(node, neighbor) {\r\n        var temp = 0;\r\n        this.AdjList.get(node).forEach(adj => {\r\n            if (adj === neighbor) {\r\n                temp++;\r\n            }\r\n        })\r\n        if (temp == 0) {\r\n            return false;\r\n        } else {\r\n            return true;\r\n        }\r\n    }\r\n}\r\n\r\nfunction sortnodebydistance(unvisitednodes) {\r\n    unvisitednodes.sort((nodeA, nodeB) => nodeA.distance - nodeB.distance);\r\n}\r\n\r\nfunction updateUnvisitedNeighbors(visitList, node, graph) {\r\n    for (const neighbor of visitList) {\r\n        if ((neighbor.previousNode !== null && neighbor.distance <= node.distance) || !graph.isAdjacent(node, neighbor)) {\r\n            continue;\r\n        } else if (graph.isAdjacent(node, neighbor)) {\r\n            neighbor.distance = node.distance + neighbor.weight + 1;\r\n            neighbor.previousNode = node;\r\n        }\r\n    }\r\n}\r\n\r\nexport function getNodesInShortestPathOrderDijkstra(finishNode, startNode) {\r\n    const nodesInShortestPathOrder = [];\r\n    let currentNode = finishNode;\r\n    while (currentNode !== null) {\r\n        nodesInShortestPathOrder.unshift(currentNode);\r\n        // console.log(currentNode.row);\r\n        // console.log(currentNode.col);\r\n        currentNode = currentNode.previousNode;\r\n        if (currentNode === startNode) {\r\n            // console.log(currentNode.row);\r\n            // console.log(currentNode.col);\r\n            break;\r\n        }\r\n    }\r\n    return nodesInShortestPathOrder;\r\n}\r\n","/home/sourabh/Downloads/react/tmp/Visualization/src/algorithms/DFS.js",["175","176"],"export default function DFS(grid, startNode, finishNode) {\n    if (startNode == finishNode || !startNode || !finishNode) {\n        return false;\n    }\n    console.log(\"in DFS\");\n    var count = 0;\n    startNode.distance = 0;\n    const visited = new Map();\n    const visitedinorder = [];\n    const visitList = [];\n    visitList.push(startNode)\n    const graph = creategraph(grid);\n    while (visitList.length !== 0) {\n        const node = visitList.pop();\n        if (node && !visited.has(node)) {\n            if (node.isWall) continue;\n            visitedinorder.push(node);\n            count++;\n            visited.set(node);\n            // console.log(\"visited\");\n            // console.log(node.row);\n            // console.log(node.col);\n            if (node === finishNode) {\n                console.log(\"count\", count);\n                return visitedinorder;\n            }\n            graph.getAdjacents(node).forEach(adj => visitList.push(adj));\n            updateUnvisitedNeighbors(visitList, node, graph, visited);\n        }\n    }\n    return visitedinorder;\n\n}\n\n\n\nfunction creategraph(grid) {\n    const graph = new Graph(1000);\n    for (let row = 0; row < 20; row++) {\n        for (let col = 0; col < 50; col++) {\n            graph.addVertex(grid[row][col]);\n        }\n    }\n    for (let row = 0; row < 20; row++) {\n        for (let col = 0; col < 50; col++) {\n            if ((row + 1) < 20) {\n                graph.addEdge(grid[row][col], grid[row + 1][col]);\n            }\n            if ((col - 1 >= 0)) {\n                graph.addEdge(grid[row][col], grid[row][col - 1]);\n            }\n            if ((col + 1 < 50)) {\n                graph.addEdge(grid[row][col], grid[row][col + 1]);\n            }\n            if ((row - 1) >= 0) {\n                graph.addEdge(grid[row][col], grid[row - 1][col]);\n            }\n        }\n    }\n    return graph;\n}\n\n\nclass Graph {\n    constructor(noOfVertices) {\n        this.noOfVertices = noOfVertices;\n        this.Adjlist = new Map();\n    }\n\n    addVertex(v) {\n        this.Adjlist.set(v, []);\n    }\n\n    addEdge(v, w) {\n        this.Adjlist.get(v).push(w);\n    }\n\n    getAdjacents(node) {\n        return this.Adjlist.get(node);\n    }\n\n    isAdjacent(node, neighbor) {\n        var temp = 0;\n        this.Adjlist.get(neighbor).forEach(x => {\n            if (x == node) {\n                temp++;\n            }\n        })\n        if (temp === 0) {\n            return false;\n        } else {\n            return true;\n        }\n    }\n}\n\nfunction updateUnvisitedNeighbors(visitList, node, graph, visited) {\n    // console.log(\"neigbour\");\n    for (const neighbor of visitList) {\n        if (graph.isAdjacent(node, neighbor) && !visited.has(neighbor)) {\n            neighbor.distance = node.distance + neighbor.weight + 1;\n            neighbor.previousNode = node;\n        }\n    }\n}\n\nexport function getNodesInShortestPathOrderDFS(finishNode, startNode) {\n    // console.log(\"shortest Path\");\n    const nodesInShortestPathOrder = [];\n    let currentNode = finishNode;\n    while (currentNode !== null) {\n        nodesInShortestPathOrder.unshift(currentNode);\n        //   console.log(currentNode);\n        currentNode = currentNode.previousNode;\n        if (currentNode === startNode) {\n            //   console.log(currentNode.row);\n            //   console.log(currentNode.col);\n            break;\n        }\n    }\n    return nodesInShortestPathOrder;\n}\n","/home/sourabh/Downloads/react/tmp/Visualization/src/algorithms/Astar.js",["177","178"],"export default function AStar(grid, startnode, endnode) {\n  startnode.distance = 0;\n  const visited = new Map();\n  const visitedinorder = [];\n  const visitList = [];\n  visitList.push(startnode);\n  const graph = creategraph(grid);\n  while (visitList.length !== 0) {\n    const node = visitList.shift();\n    if (node && !visited.has(node)) {\n      if (node.isWall) continue;\n      visitedinorder.push(node);\n      visited.set(node);\n      // console.log(node.row);\n      // console.log(node.col);\n      if (node == endnode) {\n        return visitedinorder;\n      }\n      graph.getAdjacents(node).forEach(adj => visitList.push(adj));\n      updateUnvisitedNeighbors(visitList, node, graph);\n      sortnodebydistance(visitList, endnode);\n    }\n  }\n  return visitedinorder;\n}\n\nfunction creategraph(grid) {\n  const graph = new Graph(1000);\n  for (let row = 0; row < 20; row++) {\n    for (let col = 0; col < 50; col++) {\n      graph.addVertex(grid[row][col]);\n    }\n  }\n  for (let row = 0; row < 20; row++) {\n    for (let col = 0; col < 50; col++) {\n      if ((col + 1 < 50)) {\n        graph.addEdge(grid[row][col], grid[row][col + 1]);\n      }\n      if ((row + 1) < 20) {\n        graph.addEdge(grid[row][col], grid[row + 1][col]);\n      }\n      if ((col - 1) >= 0) {\n        graph.addEdge(grid[row][col], grid[row][col - 1]);\n      }\n      if ((row - 1) >= 0) {\n        graph.addEdge(grid[row][col], grid[row - 1][col]);\n      }\n\n    }\n  }\n  return graph;\n}\n\nclass Graph {\n  constructor(noOfVertices) {\n    this.noOfVertices = noOfVertices;\n    this.AdjList = new Map();\n  }\n  addVertex(v) {\n    this.AdjList.set(v, []);\n  }\n  addEdge(v, w) {\n    this.AdjList.get(v).push(w);\n  }\n  getAdjacents(node) {\n    return this.AdjList.get(node);\n  }\n\n  isAdjacent(node, neighbor) {\n    var temp = 0;\n    this.AdjList.get(node).forEach(adj => {\n      if (adj === neighbor) {\n        temp++;\n      }\n    })\n    if (temp == 0) {\n      return false;\n    } else {\n      return true;\n    }\n  }\n}\n\nfunction sortnodebydistance(unvisitednodes, finishNode) {\n  unvisitednodes.sort((nodeA, nodeB) => (nodeA.distance + manhattendistance(nodeA, finishNode)) - (nodeB.distance + manhattendistance(nodeB, finishNode)));\n}\n\nfunction updateUnvisitedNeighbors(visitList, node, graph) {\n  for (const neighbor of visitList) {\n    if ((neighbor.previousNode !== null && neighbor.distance <= node.distance) || !graph.isAdjacent(node, neighbor)) {\n      continue;\n    } else if (graph.isAdjacent(node, neighbor)) {\n      neighbor.distance = node.distance + neighbor.weight + 1;\n      neighbor.previousNode = node;\n    }\n  }\n}\n\nexport function getNodesInShortestPathOrderAStar(finishNode, startNode) {\n  const nodesInShortestPathOrder = [];\n  let currentNode = finishNode;\n  while (currentNode !== null) {\n    nodesInShortestPathOrder.unshift(currentNode);\n    //   console.log(currentNode.row);\n    //   console.log(currentNode.col);\n    currentNode = currentNode.previousNode;\n    if (currentNode === startNode) {\n      //   console.log(currentNode.row);\n      //   console.log(currentNode.col);\n      break;\n    }\n  }\n  return nodesInShortestPathOrder;\n}\n\nfunction manhattendistance(node, finishnode) {\n  var hn = (Math.abs(node.row - finishnode.row) + Math.abs(node.col - finishnode.col));\n  return hn;\n}\n","/home/sourabh/Downloads/react/tmp/Visualization/src/mazeAlgorithms/chanceMazeV.js",["179","180","181","182","183","184","185","186","187","188","189","190","191","192","193","194","195"],"function recure(grid,rowStart, rowEnd, colStart, colEnd,grid1,startNode, finishNode){\n  if (rowEnd >= (grid.length)-1 || colEnd >= grid.length[0]-1 || rowStart < 0 || colStart < 0) {\n            return;\n  }\n  var x=colStart;\n  var y=colEnd;\n  for(var m=colStart;m<colEnd;m+=3)\n  {\n    let possibleRows = [];\n  for (let number = rowStart; number <= rowEnd; number += 1) {\n    possibleRows.push(number);\n  }\n  let possibleCols = []\n  for (let number = colStart; number <= colEnd; number += 1) {\n    possibleCols.push(number);\n  }\n  while(possibleCols.length!=1 && possibleRows.length!=1)\n  {\n    var randomRowIndex1 = Math.ceil(Math.random() * possibleRows.length);\n    var randomRowIndex2 = Math.ceil(Math.random() * possibleRows.length);\n    var randomColIndex = Math.ceil(Math.random() * possibleCols.length);\n    let currentRow1 = possibleRows[randomRowIndex1];\n    let currentRow2 = possibleRows[randomRowIndex2];\n    let colRandom = possibleCols[randomColIndex];\n    if(currentRow1==undefined || colRandom==undefined  || currentRow2==undefined)\n    {\n      possibleRows.splice(randomRowIndex1,1);\n      possibleCols.splice(randomColIndex,1);\n      continue\n    }\n    else{\n      for(let k=currentRow1;k<currentRow2;k+=2)\n      {\n        var ans=0;\n        for(let j=0;j<grid1.length;j++)\n        {\n          if(grid[k][colRandom]==grid1[j])\n          {\n            ans=1;\n          }\n        }\n        if(ans==0)\n        {\n          if(grid[k][colRandom]!=startNode && grid[k][colRandom]!=finishNode)\n        {\n          grid1.push(grid[k][colRandom]);\n        }\n        }\n      }\n    }\n    possibleRows.splice(randomRowIndex1,1);\n    possibleCols.splice(randomColIndex,1);\n  }\n  }\n  return grid1;\n}\n\nfunction chanceMazeV(grid, rowStart, rowEnd, colStart, colEnd, startNode, finishNode){\n  let grid1=[];\n  for(let i=0;i<20;i++)\n  {\n    for(let j=0;j<50;j++)\n    {\n      if(i==0 || i==grid.length-1 || j==0 || j==grid[0].length-1)\n      {\n        if(grid[i][j]==startNode || grid[i][j]==finishNode)\n        {\n          continue;\n        }\n        else{\n          grid1.push(grid[i][j]);\n        }\n      }\n    }\n  }\n  rowStart=1;\n  rowEnd =grid.length-2;\n  colStart=1;\n  colEnd=grid[0].length-2;\n  var x =recure(grid,rowStart, rowEnd, colStart, colEnd,grid1,startNode, finishNode);\n  return x;\n}\n\nexport default chanceMazeV;","/home/sourabh/Downloads/react/tmp/Visualization/src/mazeAlgorithms/chanceMazeH.js",["196","197","198","199","200","201","202","203","204","205","206","207","208","209","210","211","212"],"function recure(grid,rowStart, rowEnd, colStart, colEnd,grid1,startNode, finishNode){\n    if (rowEnd >= (grid.length)-1 || colEnd >= grid.length[0]-1 || rowStart < 0 || colStart < 0) {\n              return;\n    }\n    var x=colStart;\n    var y=colEnd;\n    for(var m=colStart;m<colEnd;m+=6)\n    {\n      let possibleRows = [];\n    for (let number = rowStart; number <= rowEnd; number += 1) {\n      possibleRows.push(number);\n    }\n    let possibleCols = []\n    for (let number = colStart; number <= colEnd; number += 1) {\n      possibleCols.push(number);\n    }\n    while(possibleCols.length!=1 && possibleRows.length!=1)\n    {\n      var randomRowIndex = Math.ceil(Math.random() * possibleRows.length);\n      var randomColIndex1 = Math.ceil(Math.random() * possibleCols.length);\n      var randomColIndex2 = Math.ceil(Math.random() * possibleCols.length);\n      let currentRow = possibleRows[randomRowIndex];\n      let colRandom1 = possibleCols[randomColIndex1];\n      let colRandom2 = possibleCols[randomColIndex2];\n      if(currentRow==undefined || colRandom1==undefined  || colRandom2==undefined )\n      {\n        possibleRows.splice(randomRowIndex,1);\n        possibleCols.splice(randomColIndex1,1);\n        continue\n      }\n      else{\n        for(let k=colRandom1;k<colRandom2;k+=2)\n        {\n          var ans=0;\n          for(let j=0;j<grid1.length;j+=1)\n          {\n            if(grid[currentRow][k]==grid1[j])\n            {\n              ans=1;\n            }\n          }\n          if(ans==0)\n          {\n            if(grid[currentRow][k]!=startNode && grid[currentRow][k]!=finishNode)\n          {\n            grid1.push(grid[currentRow][k]);\n          }\n          }\n        }\n      }\n      possibleRows.splice(randomRowIndex,1);\n    possibleCols.splice(randomColIndex1,1);\n    }\n    }\n    return grid1;\n  }\n  \n  function chanceMazeH(grid, rowStart, rowEnd, colStart, colEnd, startNode, finishNode){\n    let grid1=[];\n    for(let i=0;i<20;i++)\n    {\n      for(let j=0;j<50;j++)\n      {\n        if(i==0 || i==grid.length-1 || j==0 || j==grid[0].length-1)\n        {\n          if(grid[i][j]==startNode || grid[i][j]==finishNode)\n          {\n            continue;\n          }\n          else{\n            grid1.push(grid[i][j]);\n          }\n        }\n      }\n    }\n    rowStart=1;\n    rowEnd =grid.length-2;\n    colStart=1;\n    colEnd=grid[0].length-2;\n    var x =recure(grid,rowStart, rowEnd, colStart, colEnd,grid1,startNode, finishNode);\n    return x;\n  }\n\nexport default chanceMazeH;","/home/sourabh/Downloads/react/tmp/Visualization/src/models/Node/Node.jsx",["213"],"import React, {Component} from 'react';\n\nimport './Node.css';\n\nexport default class Node extends Component {\n  render() {\n    const {\n      col,\n      isFinish,\n      isStart,\n      isWall,\n      onMouseDown,\n      onMouseEnter,\n      onMouseUp,\n      row,\n      weight = 0,\n    } = this.props;\n    const extraClassName = isFinish\n      ? 'node-finish'\n      : isStart\n      ? 'node-start'\n      : isWall\n      ? 'node-wall'\n      : weight != 0\n      ? 'node-weight'\n      : '';\n\n    return (\n      <div\n        id={`node-${row}-${col}`}\n        className={`node ${extraClassName}`}\n        onMouseDown={() => onMouseDown(row, col)}\n        onMouseEnter={() => onMouseEnter(row, col)}\n        onMouseUp={() => onMouseUp()}></div>\n    );\n  }\n}\n",{"ruleId":"214","replacedBy":"215"},{"ruleId":"216","replacedBy":"217"},{"ruleId":"218","severity":1,"message":"219","line":2,"column":10,"nodeType":"220","messageId":"221","endLine":2,"endColumn":18},{"ruleId":"218","severity":1,"message":"222","line":34,"column":10,"nodeType":"220","messageId":"221","endLine":34,"endColumn":18},{"ruleId":"218","severity":1,"message":"223","line":35,"column":10,"nodeType":"220","messageId":"221","endLine":35,"endColumn":18},{"ruleId":"224","severity":1,"message":"225","line":117,"column":13,"nodeType":"226","messageId":"227","endLine":117,"endColumn":15},{"ruleId":"224","severity":1,"message":"225","line":117,"column":38,"nodeType":"226","messageId":"227","endLine":117,"endColumn":40},{"ruleId":"224","severity":1,"message":"225","line":121,"column":20,"nodeType":"226","messageId":"227","endLine":121,"endColumn":22},{"ruleId":"224","severity":1,"message":"225","line":121,"column":46,"nodeType":"226","messageId":"227","endLine":121,"endColumn":48},{"ruleId":"224","severity":1,"message":"225","line":137,"column":23,"nodeType":"226","messageId":"227","endLine":137,"endColumn":25},{"ruleId":"224","severity":1,"message":"225","line":137,"column":48,"nodeType":"226","messageId":"227","endLine":137,"endColumn":50},{"ruleId":"224","severity":1,"message":"225","line":137,"column":75,"nodeType":"226","messageId":"227","endLine":137,"endColumn":77},{"ruleId":"224","severity":1,"message":"225","line":137,"column":101,"nodeType":"226","messageId":"227","endLine":137,"endColumn":103},{"ruleId":"228","severity":1,"message":"229","line":157,"column":18,"nodeType":"230","messageId":"231","endLine":163,"endColumn":8},{"ruleId":"228","severity":1,"message":"229","line":169,"column":18,"nodeType":"230","messageId":"231","endLine":179,"endColumn":8},{"ruleId":"224","severity":1,"message":"225","line":244,"column":19,"nodeType":"226","messageId":"227","endLine":244,"endColumn":21},{"ruleId":"224","severity":1,"message":"225","line":251,"column":24,"nodeType":"226","messageId":"227","endLine":251,"endColumn":26},{"ruleId":"232","severity":1,"message":"233","line":254,"column":11,"nodeType":"220","messageId":"234","endLine":254,"endColumn":17},{"ruleId":"224","severity":1,"message":"225","line":258,"column":24,"nodeType":"226","messageId":"227","endLine":258,"endColumn":26},{"ruleId":"232","severity":1,"message":"233","line":261,"column":11,"nodeType":"220","messageId":"234","endLine":261,"endColumn":17},{"ruleId":"224","severity":1,"message":"225","line":264,"column":26,"nodeType":"226","messageId":"227","endLine":264,"endColumn":28},{"ruleId":"232","severity":1,"message":"233","line":271,"column":11,"nodeType":"220","messageId":"234","endLine":271,"endColumn":17},{"ruleId":"224","severity":1,"message":"225","line":297,"column":23,"nodeType":"226","messageId":"227","endLine":297,"endColumn":25},{"ruleId":"224","severity":1,"message":"225","line":306,"column":28,"nodeType":"226","messageId":"227","endLine":306,"endColumn":30},{"ruleId":"232","severity":1,"message":"235","line":307,"column":11,"nodeType":"220","messageId":"234","endLine":307,"endColumn":18},{"ruleId":"232","severity":1,"message":"236","line":308,"column":16,"nodeType":"220","messageId":"234","endLine":308,"endColumn":17},{"ruleId":"224","severity":1,"message":"225","line":315,"column":28,"nodeType":"226","messageId":"227","endLine":315,"endColumn":30},{"ruleId":"232","severity":1,"message":"235","line":318,"column":11,"nodeType":"220","messageId":"234","endLine":318,"endColumn":18},{"ruleId":"232","severity":1,"message":"236","line":319,"column":16,"nodeType":"220","messageId":"234","endLine":319,"endColumn":17},{"ruleId":"224","severity":1,"message":"225","line":326,"column":28,"nodeType":"226","messageId":"227","endLine":326,"endColumn":30},{"ruleId":"232","severity":1,"message":"235","line":327,"column":11,"nodeType":"220","messageId":"234","endLine":327,"endColumn":18},{"ruleId":"232","severity":1,"message":"236","line":328,"column":16,"nodeType":"220","messageId":"234","endLine":328,"endColumn":17},{"ruleId":"224","severity":1,"message":"225","line":335,"column":28,"nodeType":"226","messageId":"227","endLine":335,"endColumn":30},{"ruleId":"232","severity":1,"message":"235","line":336,"column":11,"nodeType":"220","messageId":"234","endLine":336,"endColumn":18},{"ruleId":"224","severity":1,"message":"225","line":339,"column":15,"nodeType":"226","messageId":"227","endLine":339,"endColumn":17},{"ruleId":"224","severity":1,"message":"225","line":339,"column":24,"nodeType":"226","messageId":"227","endLine":339,"endColumn":26},{"ruleId":"224","severity":1,"message":"225","line":339,"column":34,"nodeType":"226","messageId":"227","endLine":339,"endColumn":36},{"ruleId":"224","severity":1,"message":"225","line":339,"column":42,"nodeType":"226","messageId":"227","endLine":339,"endColumn":44},{"ruleId":"224","severity":1,"message":"237","line":347,"column":92,"nodeType":"226","messageId":"227","endLine":347,"endColumn":94},{"ruleId":"224","severity":1,"message":"225","line":353,"column":31,"nodeType":"226","messageId":"227","endLine":353,"endColumn":33},{"ruleId":"232","severity":1,"message":"235","line":354,"column":13,"nodeType":"220","messageId":"234","endLine":354,"endColumn":20},{"ruleId":"232","severity":1,"message":"236","line":355,"column":17,"nodeType":"220","messageId":"234","endLine":355,"endColumn":18},{"ruleId":"224","severity":1,"message":"225","line":362,"column":28,"nodeType":"226","messageId":"227","endLine":362,"endColumn":30},{"ruleId":"232","severity":1,"message":"235","line":363,"column":11,"nodeType":"220","messageId":"234","endLine":363,"endColumn":18},{"ruleId":"232","severity":1,"message":"236","line":364,"column":15,"nodeType":"220","messageId":"234","endLine":364,"endColumn":16},{"ruleId":"224","severity":1,"message":"225","line":372,"column":28,"nodeType":"226","messageId":"227","endLine":372,"endColumn":30},{"ruleId":"232","severity":1,"message":"235","line":373,"column":11,"nodeType":"220","messageId":"234","endLine":373,"endColumn":18},{"ruleId":"232","severity":1,"message":"236","line":374,"column":16,"nodeType":"220","messageId":"234","endLine":374,"endColumn":17},{"ruleId":"224","severity":1,"message":"225","line":381,"column":28,"nodeType":"226","messageId":"227","endLine":381,"endColumn":30},{"ruleId":"232","severity":1,"message":"235","line":382,"column":11,"nodeType":"220","messageId":"234","endLine":382,"endColumn":18},{"ruleId":"232","severity":1,"message":"236","line":383,"column":16,"nodeType":"220","messageId":"234","endLine":383,"endColumn":17},{"ruleId":"224","severity":1,"message":"225","line":396,"column":23,"nodeType":"226","messageId":"227","endLine":396,"endColumn":25},{"ruleId":"238","severity":1,"message":"239","line":493,"column":6,"nodeType":"240","endLine":493,"endColumn":21,"suggestions":"241"},{"ruleId":"224","severity":1,"message":"225","line":548,"column":73,"nodeType":"226","messageId":"227","endLine":548,"endColumn":75},{"ruleId":"224","severity":1,"message":"237","line":617,"column":28,"nodeType":"226","messageId":"227","endLine":617,"endColumn":30},{"ruleId":"224","severity":1,"message":"225","line":695,"column":25,"nodeType":"226","messageId":"227","endLine":695,"endColumn":27},{"ruleId":"224","severity":1,"message":"225","line":8,"column":24,"nodeType":"226","messageId":"227","endLine":8,"endColumn":26},{"ruleId":"224","severity":1,"message":"225","line":8,"column":48,"nodeType":"226","messageId":"227","endLine":8,"endColumn":50},{"ruleId":"224","severity":1,"message":"225","line":11,"column":29,"nodeType":"226","messageId":"227","endLine":11,"endColumn":31},{"ruleId":"224","severity":1,"message":"225","line":11,"column":54,"nodeType":"226","messageId":"227","endLine":11,"endColumn":56},{"ruleId":"224","severity":1,"message":"225","line":6,"column":20,"nodeType":"226","messageId":"227","endLine":6,"endColumn":22},{"ruleId":"224","severity":1,"message":"225","line":6,"column":47,"nodeType":"226","messageId":"227","endLine":6,"endColumn":49},{"ruleId":"224","severity":1,"message":"225","line":18,"column":20,"nodeType":"226","messageId":"227","endLine":18,"endColumn":22},{"ruleId":"224","severity":1,"message":"225","line":18,"column":47,"nodeType":"226","messageId":"227","endLine":18,"endColumn":49},{"ruleId":"224","severity":1,"message":"225","line":28,"column":24,"nodeType":"226","messageId":"227","endLine":28,"endColumn":26},{"ruleId":"224","severity":1,"message":"225","line":28,"column":48,"nodeType":"226","messageId":"227","endLine":28,"endColumn":50},{"ruleId":"224","severity":1,"message":"225","line":31,"column":29,"nodeType":"226","messageId":"227","endLine":31,"endColumn":31},{"ruleId":"224","severity":1,"message":"225","line":31,"column":54,"nodeType":"226","messageId":"227","endLine":31,"endColumn":56},{"ruleId":"224","severity":1,"message":"225","line":38,"column":32,"nodeType":"226","messageId":"227","endLine":38,"endColumn":34},{"ruleId":"224","severity":1,"message":"225","line":43,"column":24,"nodeType":"226","messageId":"227","endLine":43,"endColumn":26},{"ruleId":"224","severity":1,"message":"225","line":12,"column":28,"nodeType":"226","messageId":"227","endLine":12,"endColumn":30},{"ruleId":"224","severity":1,"message":"225","line":12,"column":55,"nodeType":"226","messageId":"227","endLine":12,"endColumn":57},{"ruleId":"224","severity":1,"message":"225","line":16,"column":32,"nodeType":"226","messageId":"227","endLine":16,"endColumn":34},{"ruleId":"224","severity":1,"message":"225","line":16,"column":59,"nodeType":"226","messageId":"227","endLine":16,"endColumn":61},{"ruleId":"224","severity":1,"message":"225","line":22,"column":40,"nodeType":"226","messageId":"227","endLine":22,"endColumn":42},{"ruleId":"224","severity":1,"message":"225","line":26,"column":31,"nodeType":"226","messageId":"227","endLine":26,"endColumn":33},{"ruleId":"232","severity":1,"message":"236","line":33,"column":14,"nodeType":"220","messageId":"234","endLine":33,"endColumn":15},{"ruleId":"232","severity":1,"message":"242","line":34,"column":18,"nodeType":"220","messageId":"234","endLine":34,"endColumn":19},{"ruleId":"224","severity":1,"message":"225","line":35,"column":28,"nodeType":"226","messageId":"227","endLine":35,"endColumn":30},{"ruleId":"224","severity":1,"message":"225","line":35,"column":55,"nodeType":"226","messageId":"227","endLine":35,"endColumn":57},{"ruleId":"232","severity":1,"message":"236","line":43,"column":14,"nodeType":"220","messageId":"234","endLine":43,"endColumn":15},{"ruleId":"232","severity":1,"message":"242","line":44,"column":18,"nodeType":"220","messageId":"234","endLine":44,"endColumn":19},{"ruleId":"224","severity":1,"message":"225","line":45,"column":28,"nodeType":"226","messageId":"227","endLine":45,"endColumn":30},{"ruleId":"224","severity":1,"message":"225","line":45,"column":55,"nodeType":"226","messageId":"227","endLine":45,"endColumn":57},{"ruleId":"224","severity":1,"message":"225","line":2,"column":19,"nodeType":"226","messageId":"227","endLine":2,"endColumn":21},{"ruleId":"218","severity":1,"message":"243","line":18,"column":13,"nodeType":"220","messageId":"221","endLine":18,"endColumn":18},{"ruleId":"224","severity":1,"message":"225","line":85,"column":19,"nodeType":"226","messageId":"227","endLine":85,"endColumn":21},{"ruleId":"224","severity":1,"message":"225","line":16,"column":22,"nodeType":"226","messageId":"227","endLine":16,"endColumn":24},{"ruleId":"224","severity":1,"message":"225","line":76,"column":18,"nodeType":"226","messageId":"227","endLine":76,"endColumn":20},{"ruleId":"224","severity":1,"message":"225","line":2,"column":19,"nodeType":"226","messageId":"227","endLine":2,"endColumn":21},{"ruleId":"224","severity":1,"message":"225","line":85,"column":19,"nodeType":"226","messageId":"227","endLine":85,"endColumn":21},{"ruleId":"224","severity":1,"message":"225","line":16,"column":16,"nodeType":"226","messageId":"227","endLine":16,"endColumn":18},{"ruleId":"224","severity":1,"message":"225","line":76,"column":14,"nodeType":"226","messageId":"227","endLine":76,"endColumn":16},{"ruleId":"218","severity":1,"message":"244","line":5,"column":7,"nodeType":"220","messageId":"221","endLine":5,"endColumn":8},{"ruleId":"218","severity":1,"message":"245","line":6,"column":7,"nodeType":"220","messageId":"221","endLine":6,"endColumn":8},{"ruleId":"224","severity":1,"message":"237","line":17,"column":28,"nodeType":"226","messageId":"227","endLine":17,"endColumn":30},{"ruleId":"224","severity":1,"message":"237","line":17,"column":54,"nodeType":"226","messageId":"227","endLine":17,"endColumn":56},{"ruleId":"224","severity":1,"message":"225","line":25,"column":19,"nodeType":"226","messageId":"227","endLine":25,"endColumn":21},{"ruleId":"224","severity":1,"message":"225","line":25,"column":43,"nodeType":"226","messageId":"227","endLine":25,"endColumn":45},{"ruleId":"224","severity":1,"message":"225","line":25,"column":70,"nodeType":"226","messageId":"227","endLine":25,"endColumn":72},{"ruleId":"224","severity":1,"message":"225","line":37,"column":32,"nodeType":"226","messageId":"227","endLine":37,"endColumn":34},{"ruleId":"224","severity":1,"message":"225","line":42,"column":15,"nodeType":"226","messageId":"227","endLine":42,"endColumn":17},{"ruleId":"224","severity":1,"message":"237","line":44,"column":32,"nodeType":"226","messageId":"227","endLine":44,"endColumn":34},{"ruleId":"224","severity":1,"message":"237","line":44,"column":65,"nodeType":"226","messageId":"227","endLine":44,"endColumn":67},{"ruleId":"224","severity":1,"message":"225","line":64,"column":11,"nodeType":"226","messageId":"227","endLine":64,"endColumn":13},{"ruleId":"224","severity":1,"message":"225","line":64,"column":19,"nodeType":"226","messageId":"227","endLine":64,"endColumn":21},{"ruleId":"224","severity":1,"message":"225","line":64,"column":39,"nodeType":"226","messageId":"227","endLine":64,"endColumn":41},{"ruleId":"224","severity":1,"message":"225","line":64,"column":47,"nodeType":"226","messageId":"227","endLine":64,"endColumn":49},{"ruleId":"224","severity":1,"message":"225","line":66,"column":22,"nodeType":"226","messageId":"227","endLine":66,"endColumn":24},{"ruleId":"224","severity":1,"message":"225","line":66,"column":47,"nodeType":"226","messageId":"227","endLine":66,"endColumn":49},{"ruleId":"218","severity":1,"message":"244","line":5,"column":9,"nodeType":"220","messageId":"221","endLine":5,"endColumn":10},{"ruleId":"218","severity":1,"message":"245","line":6,"column":9,"nodeType":"220","messageId":"221","endLine":6,"endColumn":10},{"ruleId":"224","severity":1,"message":"237","line":17,"column":30,"nodeType":"226","messageId":"227","endLine":17,"endColumn":32},{"ruleId":"224","severity":1,"message":"237","line":17,"column":56,"nodeType":"226","messageId":"227","endLine":17,"endColumn":58},{"ruleId":"224","severity":1,"message":"225","line":25,"column":20,"nodeType":"226","messageId":"227","endLine":25,"endColumn":22},{"ruleId":"224","severity":1,"message":"225","line":25,"column":45,"nodeType":"226","messageId":"227","endLine":25,"endColumn":47},{"ruleId":"224","severity":1,"message":"225","line":25,"column":71,"nodeType":"226","messageId":"227","endLine":25,"endColumn":73},{"ruleId":"224","severity":1,"message":"225","line":37,"column":35,"nodeType":"226","messageId":"227","endLine":37,"endColumn":37},{"ruleId":"224","severity":1,"message":"225","line":42,"column":17,"nodeType":"226","messageId":"227","endLine":42,"endColumn":19},{"ruleId":"224","severity":1,"message":"237","line":44,"column":35,"nodeType":"226","messageId":"227","endLine":44,"endColumn":37},{"ruleId":"224","severity":1,"message":"237","line":44,"column":69,"nodeType":"226","messageId":"227","endLine":44,"endColumn":71},{"ruleId":"224","severity":1,"message":"225","line":64,"column":13,"nodeType":"226","messageId":"227","endLine":64,"endColumn":15},{"ruleId":"224","severity":1,"message":"225","line":64,"column":21,"nodeType":"226","messageId":"227","endLine":64,"endColumn":23},{"ruleId":"224","severity":1,"message":"225","line":64,"column":41,"nodeType":"226","messageId":"227","endLine":64,"endColumn":43},{"ruleId":"224","severity":1,"message":"225","line":64,"column":49,"nodeType":"226","messageId":"227","endLine":64,"endColumn":51},{"ruleId":"224","severity":1,"message":"225","line":66,"column":24,"nodeType":"226","messageId":"227","endLine":66,"endColumn":26},{"ruleId":"224","severity":1,"message":"225","line":66,"column":49,"nodeType":"226","messageId":"227","endLine":66,"endColumn":51},{"ruleId":"224","severity":1,"message":"237","line":24,"column":16,"nodeType":"226","messageId":"227","endLine":24,"endColumn":18},"no-native-reassign",["246"],"no-negated-in-lhs",["247"],"no-unused-vars","'Carousel' is defined but never used.","Identifier","unusedVar","'isActive' is assigned a value but never used.","'isPaused' is assigned a value but never used.","eqeqeq","Expected '===' and instead saw '=='.","BinaryExpression","unexpected","no-loop-func","Function declared in a loop contains unsafe references to variable(s) 'START_NODE_ROW', 'START_NODE_COL', 'FINISH_NODE_ROW', 'FINISH_NODE_COL'.","ArrowFunctionExpression","unsafeRefs","no-redeclare","'start2' is already defined.","redeclared","'griddef' is already defined.","'i' is already defined.","Expected '!==' and instead saw '!='.","react-hooks/exhaustive-deps","React Hook useEffect has a missing dependency: 'demoMazeAlgorithm'. Either include it or remove the dependency array.","ArrayExpression",["248"],"'j' is already defined.","'count' is assigned a value but never used.","'x' is assigned a value but never used.","'y' is assigned a value but never used.","no-global-assign","no-unsafe-negation",{"desc":"249","fix":"250"},"Update the dependencies array to be: [demoMazeAlgorithm, mazeAlgorithm]",{"range":"251","text":"252"},[19107,19122],"[demoMazeAlgorithm, mazeAlgorithm]"]