[{"C:\\Users\\kadam\\react\\Visualization\\src\\index.js":"1","C:\\Users\\kadam\\react\\Visualization\\src\\App.js":"2","C:\\Users\\kadam\\react\\Visualization\\src\\visualizers\\PathfindingVisualizer.jsx":"3","C:\\Users\\kadam\\react\\Visualization\\src\\mazeAlgorithms\\basicRandom.js":"4","C:\\Users\\kadam\\react\\Visualization\\src\\mazeAlgorithms\\verticaldiv.js":"5","C:\\Users\\kadam\\react\\Visualization\\src\\mazeAlgorithms\\horizontaldiv.js":"6","C:\\Users\\kadam\\react\\Visualization\\src\\mazeAlgorithms\\basicWeighted.js":"7","C:\\Users\\kadam\\react\\Visualization\\src\\mazeAlgorithms\\Simplestair.js":"8","C:\\Users\\kadam\\react\\Visualization\\src\\mazeAlgorithms\\recursive.js":"9","C:\\Users\\kadam\\react\\Visualization\\src\\mazeAlgorithms\\Snakemaze.js":"10","C:\\Users\\kadam\\react\\Visualization\\src\\algorithms\\BFS.js":"11","C:\\Users\\kadam\\react\\Visualization\\src\\algorithms\\Astar.js":"12","C:\\Users\\kadam\\react\\Visualization\\src\\algorithms\\DFS.js":"13","C:\\Users\\kadam\\react\\Visualization\\src\\algorithms\\dijkstra.js":"14","C:\\Users\\kadam\\react\\Visualization\\src\\components\\Card.js":"15","C:\\Users\\kadam\\react\\Visualization\\src\\models\\Node\\Node.jsx":"16","C:\\Users\\kadam\\react\\Visualization\\src\\mazeAlgorithms\\chanceMazeH.js":"17","C:\\Users\\kadam\\react\\Visualization\\src\\mazeAlgorithms\\chanceMazeV.js":"18"},{"size":174,"mtime":1616938834922,"results":"19","hashOfConfig":"20"},{"size":347,"mtime":1618138421458,"results":"21","hashOfConfig":"20"},{"size":26609,"mtime":1618646432590,"results":"22","hashOfConfig":"20"},{"size":1863,"mtime":1618214484539,"results":"23","hashOfConfig":"20"},{"size":1460,"mtime":1618645556638,"results":"24","hashOfConfig":"20"},{"size":1471,"mtime":1618645649074,"results":"25","hashOfConfig":"20"},{"size":671,"mtime":1618209773643,"results":"26","hashOfConfig":"20"},{"size":624,"mtime":1618217110428,"results":"27","hashOfConfig":"20"},{"size":3329,"mtime":1618641131579,"results":"28","hashOfConfig":"20"},{"size":1705,"mtime":1618215783708,"results":"29","hashOfConfig":"20"},{"size":3649,"mtime":1618209773626,"results":"30","hashOfConfig":"20"},{"size":3388,"mtime":1618209773623,"results":"31","hashOfConfig":"20"},{"size":3524,"mtime":1618209773628,"results":"32","hashOfConfig":"20"},{"size":3527,"mtime":1618209773630,"results":"33","hashOfConfig":"20"},{"size":673,"mtime":1618573308492,"results":"34","hashOfConfig":"20"},{"size":780,"mtime":1617007082949,"results":"35","hashOfConfig":"20"},{"size":2571,"mtime":1618645758120,"results":"36","hashOfConfig":"20"},{"size":2409,"mtime":1618645618304,"results":"37","hashOfConfig":"20"},{"filePath":"38","messages":"39","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"40"},"triyp6",{"filePath":"41","messages":"42","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"40"},{"filePath":"43","messages":"44","errorCount":0,"warningCount":54,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"45","messages":"46","errorCount":0,"warningCount":6,"fixableErrorCount":0,"fixableWarningCount":0,"source":"47","usedDeprecatedRules":"40"},{"filePath":"48","messages":"49","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"50","messages":"51","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"52","messages":"53","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"54","usedDeprecatedRules":"40"},{"filePath":"55","messages":"56","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"57","usedDeprecatedRules":"40"},{"filePath":"58","messages":"59","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"40"},{"filePath":"60","messages":"61","errorCount":0,"warningCount":14,"fixableErrorCount":0,"fixableWarningCount":0,"source":"62","usedDeprecatedRules":"40"},{"filePath":"63","messages":"64","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"65","usedDeprecatedRules":"40"},{"filePath":"66","messages":"67","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"68","usedDeprecatedRules":"40"},{"filePath":"69","messages":"70","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"71","usedDeprecatedRules":"40"},{"filePath":"72","messages":"73","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"74","usedDeprecatedRules":"40"},{"filePath":"75","messages":"76","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"40"},{"filePath":"77","messages":"78","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"79","usedDeprecatedRules":"40"},{"filePath":"80","messages":"81","errorCount":0,"warningCount":17,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"82","messages":"83","errorCount":0,"warningCount":17,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},"C:\\Users\\kadam\\react\\Visualization\\src\\index.js",[],["84","85"],"C:\\Users\\kadam\\react\\Visualization\\src\\App.js",[],"C:\\Users\\kadam\\react\\Visualization\\src\\visualizers\\PathfindingVisualizer.jsx",["86","87","88","89","90","91","92","93","94","95","96","97","98","99","100","101","102","103","104","105","106","107","108","109","110","111","112","113","114","115","116","117","118","119","120","121","122","123","124","125","126","127","128","129","130","131","132","133","134","135","136","137","138","139"],"C:\\Users\\kadam\\react\\Visualization\\src\\mazeAlgorithms\\basicRandom.js",["140","141","142","143","144","145"],"function basicRandom(grid, startNode, finishNode) {\r\n     var grid1 = []\r\n     // let cIdY=grid.length[0]-10;\r\n     // for(let c=0 ;c<10;c++)\r\n     // {\r\n     //      let cIdXone= Math.floor(grid.length/2)-c;\r\n     //      let cIdXtwo = Math.floor(grid.length/2)+c;\r\n     //      // let cIdone = cIdY-cIdXone;\r\n     //      // let cIdtwo = cIdY-cIdXtwo;\r\n     //      console.log(cIdXone);\r\n     //      console.log(cIdXtwo);\r\n     //      // console.log((cIdY,cIdtwo));\r\n     //      if(cIdy>=20 || CIdXone>=50 || cIdXtwo>=50){\r\n     //           continue;\r\n     //      }\r\n     //      else{\r\n     //           grid1.push(grid[cIdY][cIdXone]);\r\n     //           grid1.push(grid[cIdY][cIdXtwo]);\r\n     //      }\r\n     //      // console.log(cIdone);\r\n     //      // console.log(cIdtwo);\r\n     // }\r\n     for (var i = 0; i < 20; i += 3) {\r\n          for (var j = 0; j < 50; j += 3) {\r\n               var x = Math.floor((Math.random() * 10) + 1);\r\n               var col = Math.abs(i - x);\r\n               var row = Math.abs(j - x);\r\n               if (col == startNode.col && row == startNode.row) {\r\n                    continue;\r\n               }\r\n               else if (col == finishNode.col && row == finishNode.row) {\r\n                    continue;\r\n               }\r\n               if(grid1.length>1){\r\n               var count=0;\r\n               for(var k=0;k<grid1.length;k++)\r\n               {\r\n                    if(grid[k]==grid[col][row])\r\n                    {\r\n                         count=1;\r\n                    }\r\n               }\r\n               if(count==0)\r\n               {\r\n                    grid1.push(grid[col][row]);\r\n               }\r\n               }\r\n               else\r\n               {\r\n               grid1.push(grid[col][row]);\r\n               }\r\n          }\r\n     }\r\n     return grid1;\r\n}\r\n\r\n\r\nexport default basicRandom;","C:\\Users\\kadam\\react\\Visualization\\src\\mazeAlgorithms\\verticaldiv.js",[],"C:\\Users\\kadam\\react\\Visualization\\src\\mazeAlgorithms\\horizontaldiv.js",[],"C:\\Users\\kadam\\react\\Visualization\\src\\mazeAlgorithms\\basicWeighted.js",["146","147","148","149"],"function basicWeighted(grid, startNode, finishNode) {\r\n     var grid1 = []\r\n     for (var i = 0; i < 20; i += 3) {\r\n          for (var j = 0; j < 50; j += 3) {\r\n               var x = Math.floor((Math.random() * 10) + 1);\r\n               var col = Math.abs(i - x);\r\n               var row = Math.abs(j - x);\r\n               if (col == startNode.col && row == startNode.row) {\r\n                    continue;\r\n               }\r\n               else if (col == finishNode.col && row == finishNode.row) {\r\n                    continue;\r\n               }\r\n               grid1.push(grid[col][row]);\r\n          }\r\n     }\r\n     return grid1;\r\n}\r\n\r\n\r\nexport default basicWeighted;","C:\\Users\\kadam\\react\\Visualization\\src\\mazeAlgorithms\\Simplestair.js",["150","151","152","153"],"function Simplestair(grid, startNode, finishNode) {\r\n  var grid1 = [];\r\n  let x = grid.length;\r\n  let y = 0;\r\n  while (x < 2 * (grid.length) - 1 && y < grid.length - 4) {\r\n    if (grid[y][x] == startNode || grid[y][x] == finishNode) {\r\n      continue;\r\n    }\r\n    else {\r\n      grid1.push(grid[y][x]);\r\n    }\r\n    x++;\r\n    y++;\r\n  };\r\n  x = grid.length - 1;\r\n  y = 0;\r\n  while (x >= 0 && y < grid.length-1) {\r\n    if (grid[y][x] == startNode || grid[y][x] == finishNode) {\r\n      continue;\r\n    }\r\n    else {\r\n      grid1.push(grid[y][x]);\r\n    }\r\n    x--;\r\n    y++;\r\n  };\r\n  return grid1;\r\n}\r\n\r\nexport default Simplestair;","C:\\Users\\kadam\\react\\Visualization\\src\\mazeAlgorithms\\recursive.js",[],"C:\\Users\\kadam\\react\\Visualization\\src\\mazeAlgorithms\\Snakemaze.js",["154","155","156","157","158","159","160","161","162","163","164","165","166","167"],"function Snake(grid, startNode, finishNode) {\r\n    let grid1 = []\r\n    let nrequired = []\r\n    for (let k = 1; k < 10; k++) {\r\n        for (let j = 1; j < 15; j++) {\r\n            let x = Math.floor((Math.random() * 50) + 1);\r\n            nrequired.push(grid[j][x]);\r\n        }\r\n    }\r\n    for (var i = 1; i < 20; i += 2) {\r\n        for (var j = 0; j < 50; j++) {\r\n            if (grid[i][j] == startNode && grid[i][j] == finishNode) {\r\n                continue;\r\n            }\r\n            else {\r\n                if (grid[i][j] == startNode || grid[i][j] == finishNode) {\r\n                    continue;\r\n                }\r\n                else {\r\n                    let count = 1;\r\n                    for (let z = 0; z < nrequired.length; z++) {\r\n                        if (grid[i][j] == nrequired[z]) {\r\n                            count = 0;\r\n                        }\r\n                    }\r\n                    if (count == 1) {\r\n                        grid1.push(grid[i][j]);\r\n                    }\r\n                }\r\n            }\r\n        }\r\n    }\r\n    for (var i = 2; i < 20; i += 2) {\r\n        for (var j = 10; j < 30; j += 2) {\r\n            if (grid[i][j] == startNode || grid[i][j] == finishNode) {\r\n                continue;\r\n            }\r\n            else {\r\n                grid1.push(grid[i][j - i + 10]);\r\n            }\r\n        }\r\n    }\r\n    for (var i = 1; i < 20; i += 2) {\r\n        for (var j = 50; j < 50; j += 2) {\r\n            if (grid[i][j] == startNode || grid[i][j] == finishNode) {\r\n                continue;\r\n            }\r\n            else {\r\n                grid1.push(grid[i][j - i -1]);\r\n            }\r\n        }\r\n    }\r\n    return grid1;\r\n}\r\n\r\nexport default Snake;","C:\\Users\\kadam\\react\\Visualization\\src\\algorithms\\BFS.js",["168","169","170"],"export default function BFS(grid, startNode, finishNode) {\r\n    if (startNode == finishNode || !startNode || !finishNode) {\r\n        return false;\r\n    }\r\n    // console.log(\"in BFS\");\r\n    var count = 0;\r\n    startNode.distance = 0;\r\n    const visited = new Map();\r\n    const visitedinorder = [];\r\n    const visitList = [];\r\n    visitList.push(startNode)\r\n    const graph = creategraph(grid);\r\n    while (visitList.length !== 0) {\r\n        const node = visitList.shift();\r\n        if (node && !visited.has(node)) {\r\n            if (node.isWall) continue;\r\n            visitedinorder.push(node);\r\n            count++;\r\n            visited.set(node);\r\n            // console.log(\"visited\");\r\n            // console.log(node.row);\r\n            // console.log(node.col);\r\n            if (node === finishNode) {\r\n                // console.log(\"count\",count);\r\n                return visitedinorder;\r\n            }\r\n            graph.getAdjacents(node).forEach(adj => visitList.push(adj));\r\n            updateUnvisitedNeighbors(visitList, node, graph);\r\n        }\r\n    }\r\n    return visitedinorder;\r\n\r\n}\r\n\r\n\r\n\r\nfunction creategraph(grid) {\r\n    const graph = new Graph(1000);\r\n    for (let row = 0; row < 20; row++) {\r\n        for (let col = 0; col < 50; col++) {\r\n            graph.addVertex(grid[row][col]);\r\n        }\r\n    }\r\n    for (let row = 0; row < 20; row++) {\r\n        for (let col = 0; col < 50; col++) {\r\n            if ((col + 1 < 50)) {\r\n                graph.addEdge(grid[row][col], grid[row][col + 1]);\r\n            }\r\n            if ((col - 1 >= 0)) {\r\n                graph.addEdge(grid[row][col], grid[row][col - 1]);\r\n            }\r\n            if ((row - 1) >= 0) {\r\n                graph.addEdge(grid[row][col], grid[row - 1][col]);\r\n            }\r\n            if ((row + 1) < 20) {\r\n                graph.addEdge(grid[row][col], grid[row + 1][col]);\r\n            }\r\n        }\r\n    }\r\n    return graph;\r\n}\r\n\r\n\r\nclass Graph {\r\n    constructor(noOfVertices) {\r\n        this.noOfVertices = noOfVertices;\r\n        this.Adjlist = new Map();\r\n    }\r\n\r\n    addVertex(v) {\r\n        this.Adjlist.set(v, []);\r\n    }\r\n\r\n    addEdge(v, w) {\r\n        this.Adjlist.get(v).push(w);\r\n    }\r\n\r\n    getAdjacents(node) {\r\n        return this.Adjlist.get(node);\r\n    }\r\n\r\n    isAdjacent(node, neighbor) {\r\n        var temp = 0;\r\n        this.Adjlist.get(neighbor).forEach(x => {\r\n            if (x == node) {\r\n                temp++;\r\n            }\r\n        })\r\n        if (temp === 0) {\r\n            return false;\r\n        } else {\r\n            return true;\r\n        }\r\n    }\r\n}\r\n\r\nfunction updateUnvisitedNeighbors(visitList, node, graph) {\r\n    // console.log(\"neigbour\");\r\n    for (const neighbor of visitList) {\r\n        if (!graph.isAdjacent(node, neighbor) || neighbor.previousNode !== null) {\r\n            continue;\r\n        } else if (graph.isAdjacent(node, neighbor)) {\r\n            neighbor.distance = node.distance + neighbor.weight + 1;\r\n            neighbor.previousNode = node;\r\n        }\r\n    }\r\n}\r\n\r\nexport function getNodesInShortestPathOrderBFS(finishNode, startNode) {\r\n    // console.log(\"shortest Path\");\r\n    const nodesInShortestPathOrder = [];\r\n    let currentNode = finishNode;\r\n    while (currentNode !== null) {\r\n        nodesInShortestPathOrder.unshift(currentNode);\r\n        //   console.log(currentNode.row);\r\n        //   console.log(currentNode.col);\r\n        currentNode = currentNode.previousNode;\r\n        if (currentNode === startNode) {\r\n            //   console.log(currentNode.row);\r\n            //   console.log(currentNode.col);\r\n            break;\r\n        }\r\n    }\r\n    return nodesInShortestPathOrder;\r\n}\r\n","C:\\Users\\kadam\\react\\Visualization\\src\\algorithms\\Astar.js",["171","172"],"export default function AStar(grid, startnode, endnode) {\r\n  startnode.distance = 0;\r\n  const visited = new Map();\r\n  const visitedinorder = [];\r\n  const visitList = [];\r\n  visitList.push(startnode);\r\n  const graph = creategraph(grid);\r\n  while (visitList.length !== 0) {\r\n    const node = visitList.shift();\r\n    if (node && !visited.has(node)) {\r\n      if (node.isWall) continue;\r\n      visitedinorder.push(node);\r\n      visited.set(node);\r\n      // console.log(node.row);\r\n      // console.log(node.col);\r\n      if (node == endnode) {\r\n        return visitedinorder;\r\n      }\r\n      graph.getAdjacents(node).forEach(adj => visitList.push(adj));\r\n      updateUnvisitedNeighbors(visitList, node, graph);\r\n      sortnodebydistance(visitList, endnode);\r\n    }\r\n  }\r\n  return visitedinorder;\r\n}\r\n\r\nfunction creategraph(grid) {\r\n  const graph = new Graph(1000);\r\n  for (let row = 0; row < 20; row++) {\r\n    for (let col = 0; col < 50; col++) {\r\n      graph.addVertex(grid[row][col]);\r\n    }\r\n  }\r\n  for (let row = 0; row < 20; row++) {\r\n    for (let col = 0; col < 50; col++) {\r\n      if ((col + 1 < 50)) {\r\n        graph.addEdge(grid[row][col], grid[row][col + 1]);\r\n      }\r\n      if ((row + 1) < 20) {\r\n        graph.addEdge(grid[row][col], grid[row + 1][col]);\r\n      }\r\n      if ((col - 1) >= 0) {\r\n        graph.addEdge(grid[row][col], grid[row][col - 1]);\r\n      }\r\n      if ((row - 1) >= 0) {\r\n        graph.addEdge(grid[row][col], grid[row - 1][col]);\r\n      }\r\n\r\n    }\r\n  }\r\n  return graph;\r\n}\r\n\r\nclass Graph {\r\n  constructor(noOfVertices) {\r\n    this.noOfVertices = noOfVertices;\r\n    this.AdjList = new Map();\r\n  }\r\n  addVertex(v) {\r\n    this.AdjList.set(v, []);\r\n  }\r\n  addEdge(v, w) {\r\n    this.AdjList.get(v).push(w);\r\n  }\r\n  getAdjacents(node) {\r\n    return this.AdjList.get(node);\r\n  }\r\n\r\n  isAdjacent(node, neighbor) {\r\n    var temp = 0;\r\n    this.AdjList.get(node).forEach(adj => {\r\n      if (adj === neighbor) {\r\n        temp++;\r\n      }\r\n    })\r\n    if (temp == 0) {\r\n      return false;\r\n    } else {\r\n      return true;\r\n    }\r\n  }\r\n}\r\n\r\nfunction sortnodebydistance(unvisitednodes, finishNode) {\r\n  unvisitednodes.sort((nodeA, nodeB) => (nodeA.distance + manhattendistance(nodeA, finishNode)) - (nodeB.distance + manhattendistance(nodeB, finishNode)));\r\n}\r\n\r\nfunction updateUnvisitedNeighbors(visitList, node, graph) {\r\n  for (const neighbor of visitList) {\r\n    if ((neighbor.previousNode !== null && neighbor.distance <= node.distance) || !graph.isAdjacent(node, neighbor)) {\r\n      continue;\r\n    } else if (graph.isAdjacent(node, neighbor)) {\r\n      neighbor.distance = node.distance + neighbor.weight + 1;\r\n      neighbor.previousNode = node;\r\n    }\r\n  }\r\n}\r\n\r\nexport function getNodesInShortestPathOrderAStar(finishNode, startNode) {\r\n  const nodesInShortestPathOrder = [];\r\n  let currentNode = finishNode;\r\n  while (currentNode !== null) {\r\n    nodesInShortestPathOrder.unshift(currentNode);\r\n    //   console.log(currentNode.row);\r\n    //   console.log(currentNode.col);\r\n    currentNode = currentNode.previousNode;\r\n    if (currentNode === startNode) {\r\n      //   console.log(currentNode.row);\r\n      //   console.log(currentNode.col);\r\n      break;\r\n    }\r\n  }\r\n  return nodesInShortestPathOrder;\r\n}\r\n\r\nfunction manhattendistance(node, finishnode) {\r\n  var hn = (Math.abs(node.row - finishnode.row) + Math.abs(node.col - finishnode.col));\r\n  return hn;\r\n}\r\n","C:\\Users\\kadam\\react\\Visualization\\src\\algorithms\\DFS.js",["173","174"],"export default function DFS(grid, startNode, finishNode) {\r\n    if (startNode == finishNode || !startNode || !finishNode) {\r\n        return false;\r\n    }\r\n    console.log(\"in DFS\");\r\n    var count = 0;\r\n    startNode.distance = 0;\r\n    const visited = new Map();\r\n    const visitedinorder = [];\r\n    const visitList = [];\r\n    visitList.push(startNode)\r\n    const graph = creategraph(grid);\r\n    while (visitList.length !== 0) {\r\n        const node = visitList.pop();\r\n        if (node && !visited.has(node)) {\r\n            if (node.isWall) continue;\r\n            visitedinorder.push(node);\r\n            count++;\r\n            visited.set(node);\r\n            // console.log(\"visited\");\r\n            // console.log(node.row);\r\n            // console.log(node.col);\r\n            if (node === finishNode) {\r\n                console.log(\"count\", count);\r\n                return visitedinorder;\r\n            }\r\n            graph.getAdjacents(node).forEach(adj => visitList.push(adj));\r\n            updateUnvisitedNeighbors(visitList, node, graph, visited);\r\n        }\r\n    }\r\n    return visitedinorder;\r\n\r\n}\r\n\r\n\r\n\r\nfunction creategraph(grid) {\r\n    const graph = new Graph(1000);\r\n    for (let row = 0; row < 20; row++) {\r\n        for (let col = 0; col < 50; col++) {\r\n            graph.addVertex(grid[row][col]);\r\n        }\r\n    }\r\n    for (let row = 0; row < 20; row++) {\r\n        for (let col = 0; col < 50; col++) {\r\n            if ((row + 1) < 20) {\r\n                graph.addEdge(grid[row][col], grid[row + 1][col]);\r\n            }\r\n            if ((col - 1 >= 0)) {\r\n                graph.addEdge(grid[row][col], grid[row][col - 1]);\r\n            }\r\n            if ((col + 1 < 50)) {\r\n                graph.addEdge(grid[row][col], grid[row][col + 1]);\r\n            }\r\n            if ((row - 1) >= 0) {\r\n                graph.addEdge(grid[row][col], grid[row - 1][col]);\r\n            }\r\n        }\r\n    }\r\n    return graph;\r\n}\r\n\r\n\r\nclass Graph {\r\n    constructor(noOfVertices) {\r\n        this.noOfVertices = noOfVertices;\r\n        this.Adjlist = new Map();\r\n    }\r\n\r\n    addVertex(v) {\r\n        this.Adjlist.set(v, []);\r\n    }\r\n\r\n    addEdge(v, w) {\r\n        this.Adjlist.get(v).push(w);\r\n    }\r\n\r\n    getAdjacents(node) {\r\n        return this.Adjlist.get(node);\r\n    }\r\n\r\n    isAdjacent(node, neighbor) {\r\n        var temp = 0;\r\n        this.Adjlist.get(neighbor).forEach(x => {\r\n            if (x == node) {\r\n                temp++;\r\n            }\r\n        })\r\n        if (temp === 0) {\r\n            return false;\r\n        } else {\r\n            return true;\r\n        }\r\n    }\r\n}\r\n\r\nfunction updateUnvisitedNeighbors(visitList, node, graph, visited) {\r\n    // console.log(\"neigbour\");\r\n    for (const neighbor of visitList) {\r\n        if (graph.isAdjacent(node, neighbor) && !visited.has(neighbor)) {\r\n            neighbor.distance = node.distance + neighbor.weight + 1;\r\n            neighbor.previousNode = node;\r\n        }\r\n    }\r\n}\r\n\r\nexport function getNodesInShortestPathOrderDFS(finishNode, startNode) {\r\n    // console.log(\"shortest Path\");\r\n    const nodesInShortestPathOrder = [];\r\n    let currentNode = finishNode;\r\n    while (currentNode !== null) {\r\n        nodesInShortestPathOrder.unshift(currentNode);\r\n        //   console.log(currentNode);\r\n        currentNode = currentNode.previousNode;\r\n        if (currentNode === startNode) {\r\n            //   console.log(currentNode.row);\r\n            //   console.log(currentNode.col);\r\n            break;\r\n        }\r\n    }\r\n    return nodesInShortestPathOrder;\r\n}\r\n","C:\\Users\\kadam\\react\\Visualization\\src\\algorithms\\dijkstra.js",["175","176"],"export default function dijkstra(grid, startnode, endnode) {\r\n    startnode.distance = 0;\r\n    const visited = new Map();\r\n    const visitedinorder = [];\r\n    const visitList = [];\r\n    visitList.push(startnode);\r\n    const graph = creategraph(grid);\r\n    while (visitList.length !== 0) {\r\n        const node = visitList.shift();\r\n        if (node && !visited.has(node)) {\r\n            if (node.isWall) continue;\r\n            visitedinorder.push(node);\r\n            visited.set(node);\r\n            //   console.log(node.row);\r\n            //   console.log(node.col);\r\n            if (node == endnode) {\r\n                return visitedinorder;\r\n            }\r\n            graph.getAdjacents(node).forEach(adj => visitList.push(adj));\r\n            updateUnvisitedNeighbors(visitList, node, graph);\r\n            sortnodebydistance(visitList);\r\n        }\r\n    }\r\n    return visitedinorder;\r\n}\r\n\r\nfunction creategraph(grid) {\r\n    const graph = new Graph(1000);\r\n    for (let row = 0; row < 20; row++) {\r\n        for (let col = 0; col < 50; col++) {\r\n            graph.addVertex(grid[row][col]);\r\n        }\r\n    }\r\n    for (let row = 0; row < 20; row++) {\r\n        for (let col = 0; col < 50; col++) {\r\n            if ((col + 1 < 50)) {\r\n                graph.addEdge(grid[row][col], grid[row][col + 1]);\r\n            }\r\n            if ((row + 1) < 20) {\r\n                graph.addEdge(grid[row][col], grid[row + 1][col]);\r\n            }\r\n            if ((col - 1) >= 0) {\r\n                graph.addEdge(grid[row][col], grid[row][col - 1]);\r\n            }\r\n            if ((row - 1) >= 0) {\r\n                graph.addEdge(grid[row][col], grid[row - 1][col]);\r\n            }\r\n\r\n        }\r\n    }\r\n    return graph;\r\n}\r\n\r\nclass Graph {\r\n    constructor(noOfVertices) {\r\n        this.noOfVertices = noOfVertices;\r\n        this.AdjList = new Map();\r\n    }\r\n    addVertex(v) {\r\n        this.AdjList.set(v, []);\r\n    }\r\n    addEdge(v, w) {\r\n        this.AdjList.get(v).push(w);\r\n    }\r\n    getAdjacents(node) {\r\n        return this.AdjList.get(node);\r\n    }\r\n\r\n    isAdjacent(node, neighbor) {\r\n        var temp = 0;\r\n        this.AdjList.get(node).forEach(adj => {\r\n            if (adj === neighbor) {\r\n                temp++;\r\n            }\r\n        })\r\n        if (temp == 0) {\r\n            return false;\r\n        } else {\r\n            return true;\r\n        }\r\n    }\r\n}\r\n\r\nfunction sortnodebydistance(unvisitednodes) {\r\n    unvisitednodes.sort((nodeA, nodeB) => nodeA.distance - nodeB.distance);\r\n}\r\n\r\nfunction updateUnvisitedNeighbors(visitList, node, graph) {\r\n    for (const neighbor of visitList) {\r\n        if ((neighbor.previousNode !== null && neighbor.distance <= node.distance) || !graph.isAdjacent(node, neighbor)) {\r\n            continue;\r\n        } else if (graph.isAdjacent(node, neighbor)) {\r\n            neighbor.distance = node.distance + neighbor.weight + 1;\r\n            neighbor.previousNode = node;\r\n        }\r\n    }\r\n}\r\n\r\nexport function getNodesInShortestPathOrderDijkstra(finishNode, startNode) {\r\n    const nodesInShortestPathOrder = [];\r\n    let currentNode = finishNode;\r\n    while (currentNode !== null) {\r\n        nodesInShortestPathOrder.unshift(currentNode);\r\n        // console.log(currentNode.row);\r\n        // console.log(currentNode.col);\r\n        currentNode = currentNode.previousNode;\r\n        if (currentNode === startNode) {\r\n            // console.log(currentNode.row);\r\n            // console.log(currentNode.col);\r\n            break;\r\n        }\r\n    }\r\n    return nodesInShortestPathOrder;\r\n}\r\n","C:\\Users\\kadam\\react\\Visualization\\src\\components\\Card.js",[],"C:\\Users\\kadam\\react\\Visualization\\src\\models\\Node\\Node.jsx",["177"],"import React, {Component} from 'react';\r\n\r\nimport './Node.css';\r\n\r\nexport default class Node extends Component {\r\n  render() {\r\n    const {\r\n      col,\r\n      isFinish,\r\n      isStart,\r\n      isWall,\r\n      onMouseDown,\r\n      onMouseEnter,\r\n      onMouseUp,\r\n      row,\r\n      weight = 0,\r\n    } = this.props;\r\n    const extraClassName = isFinish\r\n      ? 'node-finish'\r\n      : isStart\r\n      ? 'node-start'\r\n      : isWall\r\n      ? 'node-wall'\r\n      : weight != 0\r\n      ? 'node-weight'\r\n      : '';\r\n\r\n    return (\r\n      <div\r\n        id={`node-${row}-${col}`}\r\n        className={`node ${extraClassName}`}\r\n        onMouseDown={() => onMouseDown(row, col)}\r\n        onMouseEnter={() => onMouseEnter(row, col)}\r\n        onMouseUp={() => onMouseUp()}></div>\r\n    );\r\n  }\r\n}\r\n","C:\\Users\\kadam\\react\\Visualization\\src\\mazeAlgorithms\\chanceMazeH.js",["178","179","180","181","182","183","184","185","186","187","188","189","190","191","192","193","194"],"C:\\Users\\kadam\\react\\Visualization\\src\\mazeAlgorithms\\chanceMazeV.js",["195","196","197","198","199","200","201","202","203","204","205","206","207","208","209","210","211"],{"ruleId":"212","replacedBy":"213"},{"ruleId":"214","replacedBy":"215"},{"ruleId":"216","severity":1,"message":"217","line":2,"column":10,"nodeType":"218","messageId":"219","endLine":2,"endColumn":18},{"ruleId":"216","severity":1,"message":"220","line":33,"column":10,"nodeType":"218","messageId":"219","endLine":33,"endColumn":18},{"ruleId":"216","severity":1,"message":"221","line":34,"column":10,"nodeType":"218","messageId":"219","endLine":34,"endColumn":18},{"ruleId":"222","severity":1,"message":"223","line":116,"column":13,"nodeType":"224","messageId":"225","endLine":116,"endColumn":15},{"ruleId":"222","severity":1,"message":"223","line":116,"column":38,"nodeType":"224","messageId":"225","endLine":116,"endColumn":40},{"ruleId":"222","severity":1,"message":"223","line":120,"column":20,"nodeType":"224","messageId":"225","endLine":120,"endColumn":22},{"ruleId":"222","severity":1,"message":"223","line":120,"column":46,"nodeType":"224","messageId":"225","endLine":120,"endColumn":48},{"ruleId":"222","severity":1,"message":"223","line":136,"column":23,"nodeType":"224","messageId":"225","endLine":136,"endColumn":25},{"ruleId":"222","severity":1,"message":"223","line":136,"column":48,"nodeType":"224","messageId":"225","endLine":136,"endColumn":50},{"ruleId":"222","severity":1,"message":"223","line":136,"column":75,"nodeType":"224","messageId":"225","endLine":136,"endColumn":77},{"ruleId":"222","severity":1,"message":"223","line":136,"column":101,"nodeType":"224","messageId":"225","endLine":136,"endColumn":103},{"ruleId":"226","severity":1,"message":"227","line":156,"column":18,"nodeType":"228","messageId":"229","endLine":162,"endColumn":8},{"ruleId":"226","severity":1,"message":"227","line":168,"column":18,"nodeType":"228","messageId":"229","endLine":178,"endColumn":8},{"ruleId":"222","severity":1,"message":"223","line":243,"column":19,"nodeType":"224","messageId":"225","endLine":243,"endColumn":21},{"ruleId":"222","severity":1,"message":"223","line":250,"column":24,"nodeType":"224","messageId":"225","endLine":250,"endColumn":26},{"ruleId":"230","severity":1,"message":"231","line":253,"column":11,"nodeType":"218","messageId":"232","endLine":253,"endColumn":17},{"ruleId":"222","severity":1,"message":"223","line":257,"column":24,"nodeType":"224","messageId":"225","endLine":257,"endColumn":26},{"ruleId":"230","severity":1,"message":"231","line":260,"column":11,"nodeType":"218","messageId":"232","endLine":260,"endColumn":17},{"ruleId":"222","severity":1,"message":"223","line":263,"column":26,"nodeType":"224","messageId":"225","endLine":263,"endColumn":28},{"ruleId":"230","severity":1,"message":"231","line":270,"column":11,"nodeType":"218","messageId":"232","endLine":270,"endColumn":17},{"ruleId":"222","severity":1,"message":"223","line":296,"column":23,"nodeType":"224","messageId":"225","endLine":296,"endColumn":25},{"ruleId":"222","severity":1,"message":"223","line":305,"column":28,"nodeType":"224","messageId":"225","endLine":305,"endColumn":30},{"ruleId":"230","severity":1,"message":"233","line":306,"column":11,"nodeType":"218","messageId":"232","endLine":306,"endColumn":18},{"ruleId":"230","severity":1,"message":"234","line":307,"column":16,"nodeType":"218","messageId":"232","endLine":307,"endColumn":17},{"ruleId":"222","severity":1,"message":"223","line":314,"column":28,"nodeType":"224","messageId":"225","endLine":314,"endColumn":30},{"ruleId":"230","severity":1,"message":"233","line":317,"column":11,"nodeType":"218","messageId":"232","endLine":317,"endColumn":18},{"ruleId":"230","severity":1,"message":"234","line":318,"column":16,"nodeType":"218","messageId":"232","endLine":318,"endColumn":17},{"ruleId":"222","severity":1,"message":"223","line":325,"column":28,"nodeType":"224","messageId":"225","endLine":325,"endColumn":30},{"ruleId":"230","severity":1,"message":"233","line":326,"column":11,"nodeType":"218","messageId":"232","endLine":326,"endColumn":18},{"ruleId":"230","severity":1,"message":"234","line":327,"column":16,"nodeType":"218","messageId":"232","endLine":327,"endColumn":17},{"ruleId":"222","severity":1,"message":"223","line":334,"column":28,"nodeType":"224","messageId":"225","endLine":334,"endColumn":30},{"ruleId":"230","severity":1,"message":"233","line":335,"column":11,"nodeType":"218","messageId":"232","endLine":335,"endColumn":18},{"ruleId":"222","severity":1,"message":"223","line":338,"column":15,"nodeType":"224","messageId":"225","endLine":338,"endColumn":17},{"ruleId":"222","severity":1,"message":"223","line":338,"column":24,"nodeType":"224","messageId":"225","endLine":338,"endColumn":26},{"ruleId":"222","severity":1,"message":"223","line":338,"column":34,"nodeType":"224","messageId":"225","endLine":338,"endColumn":36},{"ruleId":"222","severity":1,"message":"223","line":338,"column":42,"nodeType":"224","messageId":"225","endLine":338,"endColumn":44},{"ruleId":"222","severity":1,"message":"235","line":346,"column":92,"nodeType":"224","messageId":"225","endLine":346,"endColumn":94},{"ruleId":"222","severity":1,"message":"223","line":352,"column":31,"nodeType":"224","messageId":"225","endLine":352,"endColumn":33},{"ruleId":"230","severity":1,"message":"233","line":353,"column":13,"nodeType":"218","messageId":"232","endLine":353,"endColumn":20},{"ruleId":"230","severity":1,"message":"234","line":354,"column":17,"nodeType":"218","messageId":"232","endLine":354,"endColumn":18},{"ruleId":"222","severity":1,"message":"223","line":361,"column":28,"nodeType":"224","messageId":"225","endLine":361,"endColumn":30},{"ruleId":"230","severity":1,"message":"233","line":362,"column":11,"nodeType":"218","messageId":"232","endLine":362,"endColumn":18},{"ruleId":"230","severity":1,"message":"234","line":363,"column":15,"nodeType":"218","messageId":"232","endLine":363,"endColumn":16},{"ruleId":"222","severity":1,"message":"223","line":371,"column":28,"nodeType":"224","messageId":"225","endLine":371,"endColumn":30},{"ruleId":"230","severity":1,"message":"233","line":372,"column":11,"nodeType":"218","messageId":"232","endLine":372,"endColumn":18},{"ruleId":"230","severity":1,"message":"234","line":373,"column":16,"nodeType":"218","messageId":"232","endLine":373,"endColumn":17},{"ruleId":"222","severity":1,"message":"223","line":380,"column":28,"nodeType":"224","messageId":"225","endLine":380,"endColumn":30},{"ruleId":"230","severity":1,"message":"233","line":381,"column":11,"nodeType":"218","messageId":"232","endLine":381,"endColumn":18},{"ruleId":"230","severity":1,"message":"234","line":382,"column":16,"nodeType":"218","messageId":"232","endLine":382,"endColumn":17},{"ruleId":"222","severity":1,"message":"223","line":406,"column":23,"nodeType":"224","messageId":"225","endLine":406,"endColumn":25},{"ruleId":"236","severity":1,"message":"237","line":465,"column":6,"nodeType":"238","endLine":465,"endColumn":21,"suggestions":"239"},{"ruleId":"222","severity":1,"message":"223","line":521,"column":73,"nodeType":"224","messageId":"225","endLine":521,"endColumn":75},{"ruleId":"222","severity":1,"message":"235","line":584,"column":28,"nodeType":"224","messageId":"225","endLine":584,"endColumn":30},{"ruleId":"222","severity":1,"message":"223","line":659,"column":25,"nodeType":"224","messageId":"225","endLine":659,"endColumn":27},{"ruleId":"222","severity":1,"message":"223","line":28,"column":24,"nodeType":"224","messageId":"225","endLine":28,"endColumn":26},{"ruleId":"222","severity":1,"message":"223","line":28,"column":48,"nodeType":"224","messageId":"225","endLine":28,"endColumn":50},{"ruleId":"222","severity":1,"message":"223","line":31,"column":29,"nodeType":"224","messageId":"225","endLine":31,"endColumn":31},{"ruleId":"222","severity":1,"message":"223","line":31,"column":54,"nodeType":"224","messageId":"225","endLine":31,"endColumn":56},{"ruleId":"222","severity":1,"message":"223","line":38,"column":31,"nodeType":"224","messageId":"225","endLine":38,"endColumn":33},{"ruleId":"222","severity":1,"message":"223","line":43,"column":24,"nodeType":"224","messageId":"225","endLine":43,"endColumn":26},{"ruleId":"222","severity":1,"message":"223","line":8,"column":24,"nodeType":"224","messageId":"225","endLine":8,"endColumn":26},{"ruleId":"222","severity":1,"message":"223","line":8,"column":48,"nodeType":"224","messageId":"225","endLine":8,"endColumn":50},{"ruleId":"222","severity":1,"message":"223","line":11,"column":29,"nodeType":"224","messageId":"225","endLine":11,"endColumn":31},{"ruleId":"222","severity":1,"message":"223","line":11,"column":54,"nodeType":"224","messageId":"225","endLine":11,"endColumn":56},{"ruleId":"222","severity":1,"message":"223","line":6,"column":20,"nodeType":"224","messageId":"225","endLine":6,"endColumn":22},{"ruleId":"222","severity":1,"message":"223","line":6,"column":47,"nodeType":"224","messageId":"225","endLine":6,"endColumn":49},{"ruleId":"222","severity":1,"message":"223","line":18,"column":20,"nodeType":"224","messageId":"225","endLine":18,"endColumn":22},{"ruleId":"222","severity":1,"message":"223","line":18,"column":47,"nodeType":"224","messageId":"225","endLine":18,"endColumn":49},{"ruleId":"222","severity":1,"message":"223","line":12,"column":28,"nodeType":"224","messageId":"225","endLine":12,"endColumn":30},{"ruleId":"222","severity":1,"message":"223","line":12,"column":55,"nodeType":"224","messageId":"225","endLine":12,"endColumn":57},{"ruleId":"222","severity":1,"message":"223","line":16,"column":32,"nodeType":"224","messageId":"225","endLine":16,"endColumn":34},{"ruleId":"222","severity":1,"message":"223","line":16,"column":59,"nodeType":"224","messageId":"225","endLine":16,"endColumn":61},{"ruleId":"222","severity":1,"message":"223","line":22,"column":40,"nodeType":"224","messageId":"225","endLine":22,"endColumn":42},{"ruleId":"222","severity":1,"message":"223","line":26,"column":31,"nodeType":"224","messageId":"225","endLine":26,"endColumn":33},{"ruleId":"230","severity":1,"message":"234","line":33,"column":14,"nodeType":"218","messageId":"232","endLine":33,"endColumn":15},{"ruleId":"230","severity":1,"message":"240","line":34,"column":18,"nodeType":"218","messageId":"232","endLine":34,"endColumn":19},{"ruleId":"222","severity":1,"message":"223","line":35,"column":28,"nodeType":"224","messageId":"225","endLine":35,"endColumn":30},{"ruleId":"222","severity":1,"message":"223","line":35,"column":55,"nodeType":"224","messageId":"225","endLine":35,"endColumn":57},{"ruleId":"230","severity":1,"message":"234","line":43,"column":14,"nodeType":"218","messageId":"232","endLine":43,"endColumn":15},{"ruleId":"230","severity":1,"message":"240","line":44,"column":18,"nodeType":"218","messageId":"232","endLine":44,"endColumn":19},{"ruleId":"222","severity":1,"message":"223","line":45,"column":28,"nodeType":"224","messageId":"225","endLine":45,"endColumn":30},{"ruleId":"222","severity":1,"message":"223","line":45,"column":55,"nodeType":"224","messageId":"225","endLine":45,"endColumn":57},{"ruleId":"222","severity":1,"message":"223","line":2,"column":19,"nodeType":"224","messageId":"225","endLine":2,"endColumn":21},{"ruleId":"216","severity":1,"message":"241","line":18,"column":13,"nodeType":"218","messageId":"219","endLine":18,"endColumn":18},{"ruleId":"222","severity":1,"message":"223","line":85,"column":19,"nodeType":"224","messageId":"225","endLine":85,"endColumn":21},{"ruleId":"222","severity":1,"message":"223","line":16,"column":16,"nodeType":"224","messageId":"225","endLine":16,"endColumn":18},{"ruleId":"222","severity":1,"message":"223","line":76,"column":14,"nodeType":"224","messageId":"225","endLine":76,"endColumn":16},{"ruleId":"222","severity":1,"message":"223","line":2,"column":19,"nodeType":"224","messageId":"225","endLine":2,"endColumn":21},{"ruleId":"222","severity":1,"message":"223","line":85,"column":19,"nodeType":"224","messageId":"225","endLine":85,"endColumn":21},{"ruleId":"222","severity":1,"message":"223","line":16,"column":22,"nodeType":"224","messageId":"225","endLine":16,"endColumn":24},{"ruleId":"222","severity":1,"message":"223","line":76,"column":18,"nodeType":"224","messageId":"225","endLine":76,"endColumn":20},{"ruleId":"222","severity":1,"message":"235","line":24,"column":16,"nodeType":"224","messageId":"225","endLine":24,"endColumn":18},{"ruleId":"216","severity":1,"message":"242","line":5,"column":9,"nodeType":"218","messageId":"219","endLine":5,"endColumn":10},{"ruleId":"216","severity":1,"message":"243","line":6,"column":9,"nodeType":"218","messageId":"219","endLine":6,"endColumn":10},{"ruleId":"222","severity":1,"message":"235","line":17,"column":30,"nodeType":"224","messageId":"225","endLine":17,"endColumn":32},{"ruleId":"222","severity":1,"message":"235","line":17,"column":56,"nodeType":"224","messageId":"225","endLine":17,"endColumn":58},{"ruleId":"222","severity":1,"message":"223","line":25,"column":20,"nodeType":"224","messageId":"225","endLine":25,"endColumn":22},{"ruleId":"222","severity":1,"message":"223","line":25,"column":45,"nodeType":"224","messageId":"225","endLine":25,"endColumn":47},{"ruleId":"222","severity":1,"message":"223","line":25,"column":71,"nodeType":"224","messageId":"225","endLine":25,"endColumn":73},{"ruleId":"222","severity":1,"message":"223","line":37,"column":35,"nodeType":"224","messageId":"225","endLine":37,"endColumn":37},{"ruleId":"222","severity":1,"message":"223","line":42,"column":17,"nodeType":"224","messageId":"225","endLine":42,"endColumn":19},{"ruleId":"222","severity":1,"message":"235","line":44,"column":35,"nodeType":"224","messageId":"225","endLine":44,"endColumn":37},{"ruleId":"222","severity":1,"message":"235","line":44,"column":69,"nodeType":"224","messageId":"225","endLine":44,"endColumn":71},{"ruleId":"222","severity":1,"message":"223","line":64,"column":13,"nodeType":"224","messageId":"225","endLine":64,"endColumn":15},{"ruleId":"222","severity":1,"message":"223","line":64,"column":21,"nodeType":"224","messageId":"225","endLine":64,"endColumn":23},{"ruleId":"222","severity":1,"message":"223","line":64,"column":41,"nodeType":"224","messageId":"225","endLine":64,"endColumn":43},{"ruleId":"222","severity":1,"message":"223","line":64,"column":49,"nodeType":"224","messageId":"225","endLine":64,"endColumn":51},{"ruleId":"222","severity":1,"message":"223","line":66,"column":24,"nodeType":"224","messageId":"225","endLine":66,"endColumn":26},{"ruleId":"222","severity":1,"message":"223","line":66,"column":49,"nodeType":"224","messageId":"225","endLine":66,"endColumn":51},{"ruleId":"216","severity":1,"message":"242","line":5,"column":7,"nodeType":"218","messageId":"219","endLine":5,"endColumn":8},{"ruleId":"216","severity":1,"message":"243","line":6,"column":7,"nodeType":"218","messageId":"219","endLine":6,"endColumn":8},{"ruleId":"222","severity":1,"message":"235","line":17,"column":28,"nodeType":"224","messageId":"225","endLine":17,"endColumn":30},{"ruleId":"222","severity":1,"message":"235","line":17,"column":54,"nodeType":"224","messageId":"225","endLine":17,"endColumn":56},{"ruleId":"222","severity":1,"message":"223","line":25,"column":19,"nodeType":"224","messageId":"225","endLine":25,"endColumn":21},{"ruleId":"222","severity":1,"message":"223","line":25,"column":43,"nodeType":"224","messageId":"225","endLine":25,"endColumn":45},{"ruleId":"222","severity":1,"message":"223","line":25,"column":70,"nodeType":"224","messageId":"225","endLine":25,"endColumn":72},{"ruleId":"222","severity":1,"message":"223","line":37,"column":32,"nodeType":"224","messageId":"225","endLine":37,"endColumn":34},{"ruleId":"222","severity":1,"message":"223","line":42,"column":15,"nodeType":"224","messageId":"225","endLine":42,"endColumn":17},{"ruleId":"222","severity":1,"message":"235","line":44,"column":32,"nodeType":"224","messageId":"225","endLine":44,"endColumn":34},{"ruleId":"222","severity":1,"message":"235","line":44,"column":65,"nodeType":"224","messageId":"225","endLine":44,"endColumn":67},{"ruleId":"222","severity":1,"message":"223","line":64,"column":11,"nodeType":"224","messageId":"225","endLine":64,"endColumn":13},{"ruleId":"222","severity":1,"message":"223","line":64,"column":19,"nodeType":"224","messageId":"225","endLine":64,"endColumn":21},{"ruleId":"222","severity":1,"message":"223","line":64,"column":39,"nodeType":"224","messageId":"225","endLine":64,"endColumn":41},{"ruleId":"222","severity":1,"message":"223","line":64,"column":47,"nodeType":"224","messageId":"225","endLine":64,"endColumn":49},{"ruleId":"222","severity":1,"message":"223","line":66,"column":22,"nodeType":"224","messageId":"225","endLine":66,"endColumn":24},{"ruleId":"222","severity":1,"message":"223","line":66,"column":47,"nodeType":"224","messageId":"225","endLine":66,"endColumn":49},"no-native-reassign",["244"],"no-negated-in-lhs",["245"],"no-unused-vars","'Carousel' is defined but never used.","Identifier","unusedVar","'isActive' is assigned a value but never used.","'isPaused' is assigned a value but never used.","eqeqeq","Expected '===' and instead saw '=='.","BinaryExpression","unexpected","no-loop-func","Function declared in a loop contains unsafe references to variable(s) 'START_NODE_ROW', 'START_NODE_COL', 'FINISH_NODE_ROW', 'FINISH_NODE_COL'.","ArrowFunctionExpression","unsafeRefs","no-redeclare","'start2' is already defined.","redeclared","'griddef' is already defined.","'i' is already defined.","Expected '!==' and instead saw '!='.","react-hooks/exhaustive-deps","React Hook useEffect has a missing dependency: 'demoMazeAlgorithm'. Either include it or remove the dependency array.","ArrayExpression",["246"],"'j' is already defined.","'count' is assigned a value but never used.","'x' is assigned a value but never used.","'y' is assigned a value but never used.","no-global-assign","no-unsafe-negation",{"desc":"247","fix":"248"},"Update the dependencies array to be: [demoMazeAlgorithm, mazeAlgorithm]",{"range":"249","text":"250"},[18507,18522],"[demoMazeAlgorithm, mazeAlgorithm]"]