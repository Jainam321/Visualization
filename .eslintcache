[{"C:\\Users\\kadam\\react\\Visualization\\src\\index.js":"1","C:\\Users\\kadam\\react\\Visualization\\src\\App.js":"2","C:\\Users\\kadam\\react\\Visualization\\src\\visualizers\\PathfindingVisualizer.jsx":"3","C:\\Users\\kadam\\react\\Visualization\\src\\algorithms\\BFS.js":"4","C:\\Users\\kadam\\react\\Visualization\\src\\algorithms\\dijkstra.js":"5","C:\\Users\\kadam\\react\\Visualization\\src\\algorithms\\DFS.js":"6","C:\\Users\\kadam\\react\\Visualization\\src\\models\\Node\\Node.jsx":"7","C:\\Users\\kadam\\react\\Visualization\\src\\mazeAlgorithms\\basicRandom.js":"8"},{"size":174,"mtime":1616938834922,"results":"9","hashOfConfig":"10"},{"size":281,"mtime":1616930096196,"results":"11","hashOfConfig":"10"},{"size":9963,"mtime":1617004056800,"results":"12","hashOfConfig":"10"},{"size":3483,"mtime":1616998541640,"results":"13","hashOfConfig":"10"},{"size":3225,"mtime":1616998541644,"results":"14","hashOfConfig":"10"},{"size":3539,"mtime":1617001719975,"results":"15","hashOfConfig":"10"},{"size":717,"mtime":1616930096237,"results":"16","hashOfConfig":"10"},{"size":211,"mtime":1617006338863,"results":"17","hashOfConfig":"10"},{"filePath":"18","messages":"19","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"20"},"triyp6",{"filePath":"21","messages":"22","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"20"},{"filePath":"23","messages":"24","errorCount":0,"warningCount":6,"fixableErrorCount":0,"fixableWarningCount":0,"source":"25","usedDeprecatedRules":"20"},{"filePath":"26","messages":"27","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"28","usedDeprecatedRules":"20"},{"filePath":"29","messages":"30","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"31","usedDeprecatedRules":"20"},{"filePath":"32","messages":"33","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"34","usedDeprecatedRules":"20"},{"filePath":"35","messages":"36","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"20"},{"filePath":"37","messages":"38","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"C:\\Users\\kadam\\react\\Visualization\\src\\index.js",[],["39","40"],"C:\\Users\\kadam\\react\\Visualization\\src\\App.js",[],"C:\\Users\\kadam\\react\\Visualization\\src\\visualizers\\PathfindingVisualizer.jsx",["41","42","43","44","45","46"],"import React, {useEffect ,useState, useRef} from 'react';\r\nimport dijkstra,{getNodesInShortestPathOrderDijkstra} from '../algorithms/dijkstra';\r\nimport BFS,{getNodesInShortestPathOrderBFS} from '../algorithms/BFS';\r\nimport DFS,{getNodesInShortestPathOrderDFS} from '../algorithms/DFS';\r\nimport {Nav, Navbar, Button, NavDropdown, Toast} from 'react-bootstrap';\r\nimport Node from '../models/Node/Node';\r\nimport './PathfindingVisualizer.css'; \r\nimport 'bootstrap/dist/css/bootstrap.min.css';\r\nimport  basicRandom from '../mazeAlgorithms/basicRandom.js';\r\n\r\nconst START_NODE_ROW = 10;\r\nconst START_NODE_COL = 10;\r\nconst FINISH_NODE_ROW = 8;\r\nconst FINISH_NODE_COL = 39;\r\n\r\n\r\nconst PathfindingVisualizer = () => {\r\n  const [grid, setGrid] = useState([]);\r\n  const [mouseIsPressed, setMouseIsPressed] = useState(false);\r\n  const [timer, setTimer] = useState(0);\r\n  const [isActive, setIsActive] = useState(false);\r\n  const [isPaused, setIsPaused] = useState(false);\r\n  const [noOfCellVisited, setNoOfCellVisited] = useState(0);\r\n  const [algorithm, setAlgorithm] = useState(\"Choose Algorithm\");\r\n  const [mazeAlgorithm , setmazeAlgorithm ]=useState(\"Choose Maze Algorithm\");\r\n  const [show, setShow] = useState(false);\r\n  const countRef = useRef(null)\r\n\r\n\r\n  const handleStart = () => {\r\n    setIsActive(true);\r\n    setIsPaused(true);\r\n    countRef.current = setInterval(() => {\r\n      setTimer((timer) => timer + 1);\r\n    }, 1000);\r\n  }\r\n\r\n  const handlePause = () => {\r\n    clearInterval(countRef.current);\r\n    setIsPaused(false);\r\n  }\r\n\r\n  const handleReset = () => {\r\n    clearInterval(countRef.current);\r\n    setIsActive(false);\r\n    setIsPaused(false);\r\n    setTimer(0);\r\n  }\r\n\r\n  const formatTime = () => {\r\n    const getSeconds = `0${(timer % 60)}`.slice(-2)\r\n    const minutes = `${Math.floor(timer / 60)}`\r\n    const getMinutes = `0${minutes % 60}`.slice(-2)\r\n    const getHours = `0${Math.floor(timer / 3600)}`.slice(-2)\r\n\r\n    return `${getHours} : ${getMinutes} : ${getSeconds}`\r\n  }\r\n\r\n  useEffect(()=>{\r\n    console.log('component mounted');\r\n    const grid = getInitialGrid();\r\n    setGrid(grid);\r\n  },[])\r\n\r\n  const handleMouseDown = (row, col) => {\r\n    const newGrid = getNewGridWithWallToggled(grid, row, col);\r\n    setGrid(newGrid);\r\n    setMouseIsPressed(true);\r\n  }\r\n\r\n  const handleMouseEnter = (row, col) => {\r\n    if (!mouseIsPressed) return;\r\n    const newGrid = getNewGridWithWallToggled(grid, row, col);\r\n    setGrid(newGrid);\r\n  }\r\n\r\n  const handleMouseUp = () => {\r\n    setMouseIsPressed(false);\r\n  }\r\n\r\n  const animateAlgorithm = (visitedNodesInOrder, nodesInShortestPathOrder) => {\r\n    for (let i = 0; i <= visitedNodesInOrder.length; i++) {\r\n      if (i === visitedNodesInOrder.length) {\r\n        setTimeout(() => {\r\n          animateShortestPath(nodesInShortestPathOrder);\r\n        }, 10 * i);\r\n        return;\r\n      }\r\n      setTimeout(() => {\r\n        const node = visitedNodesInOrder[i];\r\n        document.getElementById(`node-${node.row}-${node.col}`).className =\r\n          'node node-visited';\r\n      }, 10 * i);\r\n    }\r\n  }\r\n\r\n  const animateShortestPath = (nodesInShortestPathOrder) =>  {\r\n    for (let i = 0; i < nodesInShortestPathOrder.length; i++) {\r\n      setTimeout(() => {\r\n        const node = nodesInShortestPathOrder[i];\r\n        document.getElementById(`node-${node.row}-${node.col}`).className =\r\n          'node node-shortest-path';\r\n      }, 50 * i);\r\n    }\r\n    handlePause();\r\n  }\r\n\r\n  const visualizeAlgorithm = () => {\r\n    handleStart();\r\n    const startNode = grid[START_NODE_ROW][START_NODE_COL];\r\n    const finishNode = grid[FINISH_NODE_ROW][FINISH_NODE_COL];\r\n    let visitedNodesInOrder, nodesInShortestPathOrder;\r\n    if(algorithm == \"Dijkstra\"){\r\n      visitedNodesInOrder = dijkstra(grid, startNode, finishNode);\r\n      nodesInShortestPathOrder = getNodesInShortestPathOrderDijkstra(finishNode,startNode);\r\n    }\r\n    else if(algorithm == \"BFS\"){\r\n      visitedNodesInOrder = BFS(grid, startNode, finishNode);\r\n      nodesInShortestPathOrder = getNodesInShortestPathOrderBFS(finishNode,startNode);\r\n    }\r\n    else if(algorithm == \"DFS\"){\r\n      visitedNodesInOrder = DFS(grid, startNode, finishNode);\r\n      nodesInShortestPathOrder = getNodesInShortestPathOrderDFS(finishNode,startNode);\r\n    }\r\n    else{\r\n      setShow(true);\r\n      handlePause();\r\n      return;\r\n    }\r\n    animateAlgorithm(visitedNodesInOrder, nodesInShortestPathOrder);\r\n    setNoOfCellVisited(nodesInShortestPathOrder.length);\r\n  }\r\n\r\n\r\n\r\n  const demoMazeAlgorithm=()=>{\r\n    if(mazeAlgorithm==\"Basic Random Maze\")\r\n    {\r\n      basicRandom(grid);\r\n    };\r\n  }\r\n\r\n  const clearBoard = () => {\r\n    handleReset();\r\n    setGrid(getInitialGrid());\r\n    setNoOfCellVisited(0);\r\n    clearGrid();\r\n    // setAlgorithm(\"Choose Algorithm\");\r\n    document.getElementById(`node-${START_NODE_ROW}-${START_NODE_COL}`).className = 'node node-start';\r\n    document.getElementById(`node-${FINISH_NODE_ROW}-${FINISH_NODE_COL}`).className = 'node node-finish';\r\n  }\r\n\r\n  const clearGrid = () => {\r\n      const newGrid = grid;\r\n      for (const row of newGrid) {\r\n        for (const node of row) {\r\n          let nodeClassName = document.getElementById(`node-${node.row}-${node.col}`,).className;\r\n          if( nodeClassName !== 'node node-start' && \r\n              nodeClassName !== 'node node-finish' && \r\n              nodeClassName !== 'node node-wall') {\r\n            document.getElementById(`node-${node.row}-${node.col}`).className =\r\n              'node';\r\n          }\r\n        }\r\n      }\r\n  }\r\n\r\n\r\n  return (\r\n    <>\r\n      <Navbar bg=\"light\" variant=\"light\">\r\n        <div className=\"container\">\r\n        <Navbar.Brand href=\"#home\">Path Visualization</Navbar.Brand>\r\n        <Nav className=\"mr-auto\">\r\n          <Navbar.Text>\r\n            <span className=\"pText\">Timer</span>\r\n            <span className=\"timeBox\">{formatTime()}</span>\r\n            <span className=\"pText\">No. of Cells Visited</span>\r\n            <span className=\"timeBox\">{noOfCellVisited}</span>\r\n          </Navbar.Text>\r\n          <NavDropdown title={algorithm} id=\"basic-nav-dropdown\">\r\n            <NavDropdown.Item href=\"\" onClick={() => setAlgorithm(\"Dijkstra\")}>Dijkstra</NavDropdown.Item>\r\n            <NavDropdown.Item href=\"\" onClick={() => setAlgorithm(\"BFS\")}>BFS</NavDropdown.Item>\r\n            <NavDropdown.Item href=\"\" onClick={() => setAlgorithm(\"DFS\")}>DFS</NavDropdown.Item>\r\n          </NavDropdown>\r\n          <NavDropdown title={mazeAlgorithm} id=\"basic-nav-dropdown\">\r\n            <NavDropdown.Item href=\"\" onClick={() => {\r\n              setmazeAlgorithm(\"Basic Random Maze\");\r\n              demoMazeAlgorithm();\r\n            }}>Basic Random Maze</NavDropdown.Item>\r\n            <NavDropdown.Item href=\"\" onClick={() => {\r\n              setmazeAlgorithm(\"Basic Weight Maze\");\r\n              demoMazeAlgorithm();\r\n            }}>Basic Weight Maze</NavDropdown.Item>\r\n            <NavDropdown.Item href=\"\" onClick={() => {\r\n              setmazeAlgorithm(\"Simple Stair Pattern\");\r\n              demoMazeAlgorithm();\r\n            }}>Simple Stair Pattern</NavDropdown.Item>\r\n            <NavDropdown.Item href=\"\" onClick={() => {\r\n              setmazeAlgorithm(\"Recursive Division\");\r\n              demoMazeAlgorithm();\r\n            }}>Recursive Division</NavDropdown.Item>\r\n          </NavDropdown>\r\n        </Nav>\r\n        <div>\r\n\r\n        <Toast onClose={() => setShow(false)} show={show} delay={3000} autohide \r\n          style={{\r\n            position: 'absolute',\r\n            top: 0,\r\n            right: \"50%\",\r\n          }}>\r\n          <Toast.Header>\r\n            <strong className=\"mr-auto\">First Choose Algorithm</strong>\r\n          </Toast.Header>\r\n        </Toast>\r\n        </div>\r\n        <div className=\"m\">\r\n          <span className=\"pBtn\">\r\n            <Button variant=\"primary\" onClick={() => visualizeAlgorithm()}>Start</Button>\r\n          </span>\r\n          <span>\r\n            <Button variant=\"secondary\" onClick={() => clearBoard()}>Clear Board</Button>\r\n          </span>\r\n        </div>\r\n        </div>        \r\n      </Navbar>\r\n      \r\n      <div className=\"grid\">\r\n        {grid.map((row, rowIdx) => {\r\n          return (\r\n            <div key={rowIdx}>\r\n              {row.map((node, nodeIdx) => {\r\n                const {row, col, isFinish, isStart, isWall} = node;\r\n                return (\r\n                  <Node\r\n                    key={nodeIdx}\r\n                    col={col}\r\n                    isFinish={isFinish}\r\n                    isStart={isStart}\r\n                    isWall={isWall}\r\n                    mouseIsPressed={mouseIsPressed}\r\n                    onMouseDown={(row, col) => handleMouseDown(row, col)}\r\n                    onMouseEnter={(row, col) =>\r\n                      handleMouseEnter(row, col)\r\n                    }\r\n                    onMouseUp={() => handleMouseUp()}\r\n                    row={row}></Node>\r\n                );\r\n              })}\r\n            </div>\r\n          );\r\n        })}\r\n      </div>\r\n    </>\r\n  );\r\n}\r\n\r\n\r\n\r\nconst getInitialGrid = () => {\r\n    const grid = [];\r\n    for (let row = 0; row < 20; row++) {\r\n      const currentRow = [];\r\n      for (let col = 0; col < 50; col++) {\r\n        currentRow.push(createNode(col, row));\r\n      }\r\n      grid.push(currentRow);\r\n    }\r\n    return grid;\r\n};\r\n\r\nconst createNode = (col, row) => {\r\n    return {\r\n        col,\r\n        row,\r\n        isStart: row === START_NODE_ROW && col === START_NODE_COL,\r\n        isFinish: row === FINISH_NODE_ROW && col === FINISH_NODE_COL,\r\n        distance: Infinity,\r\n        isVisited: false,\r\n        isWall: false,\r\n        previousNode: null,\r\n    };\r\n};\r\n\r\nconst getNewGridWithWallToggled = (grid, row, col) => {\r\n    const newGrid = grid.slice();\r\n    const node = newGrid[row][col];\r\n    const newNode = {\r\n        ...node,\r\n        isWall: !node.isWall,\r\n    };\r\n    newGrid[row][col] = newNode;\r\n    return newGrid;\r\n};\r\n  \r\n\r\nexport default PathfindingVisualizer;\r\n","C:\\Users\\kadam\\react\\Visualization\\src\\algorithms\\BFS.js",["47","48"],"\r\nexport default function BFS(grid,startNode, finishNode){\r\n    if(startNode==finishNode || !startNode || !finishNode){\r\n        return false;\r\n    }\r\n    console.log(\"in BFS\");\r\n    var count=0;\r\n    startNode.distance=0;\r\n    const visited=new Map();\r\n    const visitedinorder=[];\r\n    const visitList=[];\r\n    visitList.push(startNode)\r\n    const graph=creategraph(grid);\r\n    while(visitList.length!==0)\r\n    {\r\n        const node =visitList.shift();\r\n        if(node && !visited.has(node))\r\n        {\r\n            if (node.isWall) continue;\r\n            visitedinorder.push(node);\r\n            count++;\r\n            visited.set(node);\r\n            console.log(\"visited\");\r\n            console.log(node.row);\r\n            console.log(node.col);\r\n            if(node===finishNode){\r\n                console.log(\"count\",count);\r\n                return visitedinorder;\r\n            }\r\n            graph.getAdjacents(node).forEach(adj => visitList.push(adj));\r\n            updateUnvisitedNeighbors(visitList,node,graph);\r\n        }\r\n    }\r\n    return visitedinorder;\r\n\r\n}\r\n\r\n\r\n\r\nfunction creategraph(grid){\r\n    const graph=new Graph(1000);\r\n    for(let row=0;row<20;row++)\r\n    {\r\n        for(let col=0;col<50;col++)\r\n        {\r\n            graph.addVertex(grid[row][col]);\r\n        }\r\n    }\r\n    for(let row=0;row<20;row++)\r\n    {\r\n        for(let col=0;col<50;col++)\r\n        {\r\n            if((col+1<50)){\r\n                graph.addEdge(grid[row][col],grid[row][col+1]);\r\n            }\r\n            if((col-1>=0)){\r\n                graph.addEdge(grid[row][col],grid[row][col-1]);\r\n            }\r\n            if((row-1)>=0){\r\n                graph.addEdge(grid[row][col],grid[row-1][col]);\r\n            }\r\n            if((row+1)<20){\r\n                graph.addEdge(grid[row][col],grid[row+1][col]);\r\n            }\r\n        }\r\n    }\r\n    return graph;\r\n}\r\n\r\n\r\nclass Graph{\r\n  constructor(noOfVertices){\r\n      this.noOfVertices=noOfVertices;\r\n      this.Adjlist=new Map();\r\n  }  \r\n\r\n  addVertex(v){\r\n    this.Adjlist.set(v,[]);\r\n  }\r\n\r\n  addEdge(v,w){\r\n     this.Adjlist.get(v).push(w);\r\n  }\r\n\r\n  getAdjacents(node){\r\n      return this.Adjlist.get(node);\r\n  }\r\n\r\n  isAdjacent(node,neighbor) {\r\n    var temp=0;\r\n    // this.AdjList.get(node).forEach(adj => {\r\n    //     if(adj === node){\r\n    //         temp++;\r\n    //     }\r\n    // })\r\n    this.Adjlist.get(neighbor).forEach( x => {\r\n        if(x==node){\r\n            temp++;\r\n        }\r\n    })\r\n    if(temp===0){\r\n        return false;\r\n    }else{\r\n        return true;\r\n    }\r\n}\r\n}\r\n\r\nfunction updateUnvisitedNeighbors(visitList,node,graph) {\r\n    console.log(\"neigbour\");\r\n    for (const neighbor of visitList) {\r\n        if(!graph.isAdjacent(node,neighbor) || neighbor.previousNode !== null){\r\n            continue;\r\n        }else if(graph.isAdjacent(node,neighbor)){\r\n            neighbor.previousNode = node;\r\n        }\r\n    }\r\n  }\r\n\r\nexport function getNodesInShortestPathOrderBFS(finishNode,startNode) {\r\n    console.log(\"shortest Path\");\r\n    const nodesInShortestPathOrder = [];\r\n    let currentNode = finishNode;\r\n    while (currentNode !== null) {\r\n      nodesInShortestPathOrder.unshift(currentNode);\r\n      console.log(currentNode.row);\r\n      console.log(currentNode.col);\r\n      currentNode = currentNode.previousNode;\r\n      if(currentNode===startNode){\r\n          console.log(currentNode.row);\r\n          console.log(currentNode.col);\r\n          break;\r\n      }\r\n    }\r\n    return nodesInShortestPathOrder;\r\n  }","C:\\Users\\kadam\\react\\Visualization\\src\\algorithms\\dijkstra.js",["49","50"],"export default function dijkstra(grid,startnode,endnode){\r\n  startnode.distance=0;\r\n  const visited = new Map();\r\n  const visitedinorder =[];\r\n  const visitList = [];\r\n  visitList.push(startnode);\r\n  const graph=creategraph(grid);\r\n  while(visitList.length !== 0) {\r\n      const node = visitList.shift();\r\n      if(node && !visited.has(node)) {\r\n          if (node.isWall) continue;\r\n          visitedinorder.push(node);\r\n          visited.set(node);\r\n          console.log(node.row);\r\n          console.log(node.col);\r\n          if(node==endnode){\r\n              return visitedinorder;\r\n          }\r\n          graph.getAdjacents(node).forEach(adj => visitList.push(adj));\r\n          updateUnvisitedNeighbors(visitList,node,graph);\r\n          sortnodebydistance(visitList);\r\n      }\r\n  }\r\n  return visitedinorder;\r\n}\r\n\r\nfunction creategraph(grid){\r\n  const graph=new Graph(1000);\r\n  for (let row = 0; row < 20; row++) {\r\n      for (let col = 0; col < 50; col++) {\r\n        graph.addVertex(grid[row][col]);\r\n      }\r\n  }\r\n  for (let row = 0; row < 20; row++) {\r\n      for (let col = 0; col < 50; col++) {\r\n          if((col+1<50)){\r\n              graph.addEdge(grid[row][col],grid[row][col+1]);\r\n          }\r\n          if((row+1)<20){\r\n              graph.addEdge(grid[row][col],grid[row+1][col]);\r\n          }\r\n          if((col-1)>=0){\r\n              graph.addEdge(grid[row][col],grid[row][col-1]);\r\n          }\r\n          if((row-1)>=0){\r\n              graph.addEdge(grid[row][col],grid[row-1][col]);\r\n          }         \r\n             \r\n      }\r\n    }\r\n  return graph;\r\n}\r\n\r\nclass Graph { \r\n  constructor(noOfVertices) { \r\n      this.noOfVertices = noOfVertices; \r\n      this.AdjList = new Map(); \r\n  }\r\n  addVertex(v) { \r\n  this.AdjList.set(v, []); \r\n  } \r\n  addEdge(v, w) { \r\n  this.AdjList.get(v).push(w);\r\n  }\r\n  getAdjacents(node) {\r\n      return this.AdjList.get(node);\r\n  }\r\n  \r\n  isAdjacent(node,neighbor) {\r\n      var temp=0;\r\n      this.AdjList.get(node).forEach(adj => {\r\n          if(adj === neighbor){\r\n              temp++;\r\n          }\r\n      })\r\n      if(temp==0){\r\n          return false;\r\n      }else{\r\n          return true;\r\n      }\r\n  }\r\n} \r\n\r\nfunction sortnodebydistance(unvisitednodes){\r\n  unvisitednodes.sort((nodeA, nodeB) => nodeA.distance - nodeB.distance);\r\n}\r\n\r\nfunction updateUnvisitedNeighbors(visitList,node,graph) {\r\n  for (const neighbor of visitList) {\r\n      if((neighbor.previousNode !== null && neighbor.distance <= node.distance)  || !graph.isAdjacent(node,neighbor) ){\r\n          continue;\r\n      }else if(graph.isAdjacent(node,neighbor)){\r\n          neighbor.distance = node.distance + 1;\r\n          neighbor.previousNode = node;\r\n      }\r\n  }\r\n}\r\n\r\nexport function getNodesInShortestPathOrderDijkstra(finishNode,startNode) {\r\n  const nodesInShortestPathOrder = [];\r\n  let currentNode = finishNode;\r\n  while (currentNode !== null) {\r\n    nodesInShortestPathOrder.unshift(currentNode);\r\n    console.log(currentNode.row);\r\n    console.log(currentNode.col);\r\n    currentNode = currentNode.previousNode;\r\n    if(currentNode===startNode){\r\n        console.log(currentNode.row);\r\n        console.log(currentNode.col);\r\n        break;\r\n    }\r\n  }\r\n  return nodesInShortestPathOrder;\r\n}\r\n","C:\\Users\\kadam\\react\\Visualization\\src\\algorithms\\DFS.js",["51","52"],"\r\nexport default function DFS(grid,startNode, finishNode){\r\n    if(startNode==finishNode || !startNode || !finishNode){\r\n        return false;\r\n    }\r\n    console.log(\"in DFS\");\r\n    var count=0;\r\n    startNode.distance=0;\r\n    const visited=new Map();\r\n    const visitedinorder=[];\r\n    const visitList=[];\r\n    visitList.push(startNode)\r\n    const graph=creategraph(grid);\r\n    while(visitList.length!==0)\r\n    {\r\n        const node =visitList.pop();\r\n        if(node && !visited.has(node))\r\n        {\r\n            if (node.isWall) continue;\r\n            visitedinorder.push(node);\r\n            count++;\r\n            visited.set(node);\r\n            console.log(\"visited\");\r\n            console.log(node.row);\r\n            console.log(node.col);\r\n            if(node===finishNode){\r\n                console.log(\"count\",count);\r\n                return visitedinorder;\r\n            }\r\n            graph.getAdjacents(node).forEach(adj => visitList.push(adj));\r\n            updateUnvisitedNeighbors(visitList,node,graph);\r\n        }\r\n    }\r\n    return visitedinorder;\r\n\r\n}\r\n\r\n\r\n\r\nfunction creategraph(grid){\r\n    const graph=new Graph(1000);\r\n    for(let row=0;row<15;row++)\r\n    {\r\n        for(let col=0;col<40;col++)\r\n        {\r\n            graph.addVertex(grid[row][col]);\r\n        }\r\n    }\r\n    for(let row=0;row<15;row++)\r\n    {\r\n        for(let col=0;col<40;col++)\r\n        {\r\n            if((col+1<40)){\r\n                graph.addEdge(grid[row][col],grid[row][col+1]);\r\n            }\r\n            if((col-1>=0)){\r\n                graph.addEdge(grid[row][col],grid[row][col-1]);\r\n            }\r\n            if((row-1)>=0){\r\n                graph.addEdge(grid[row][col],grid[row-1][col]);\r\n            }\r\n            if((row+1)<15){\r\n                graph.addEdge(grid[row][col],grid[row+1][col]);\r\n            }\r\n        }\r\n    }\r\n    return graph;\r\n}\r\n\r\n\r\nclass Graph{\r\n  constructor(noOfVertices){\r\n      this.noOfVertices=noOfVertices;\r\n      this.Adjlist=new Map();\r\n  }  \r\n\r\n  addVertex(v){\r\n    this.Adjlist.set(v,[]);\r\n  }\r\n\r\n  addEdge(v,w){\r\n     this.Adjlist.get(v).push(w);\r\n  }\r\n\r\n  getAdjacents(node){\r\n      return this.Adjlist.get(node);\r\n  }\r\n\r\n  isAdjacent(node,neighbor) {\r\n    var temp=0;\r\n    // this.AdjList.get(node).forEach(adj => {\r\n    //     if(adj === neighbor){\r\n    //         temp++;\r\n    //     }\r\n    // })\r\n    this.Adjlist.get(neighbor).forEach( x => {\r\n        if(x==node){\r\n            temp++;\r\n        }\r\n    })\r\n    if(temp===0){\r\n        return false;\r\n    }else{\r\n        return true;\r\n    }\r\n}\r\n}\r\n\r\nfunction updateUnvisitedNeighbors(visitList,node,graph) {\r\n    for (const neighbor of visitList) {\r\n        console.log(neighbor);\r\n        neighbor.previousNode = node;\r\n        // if(neighbor.previousNode!==null && !graph.isAdjacent(node,neighbor)){\r\n        //     continue;\r\n        // }else if(graph.isAdjacent(node,neighbor)){\r\n        //     neighbor.previousNode = node;\r\n        // }\r\n    }\r\n  }\r\n\r\nexport function getNodesInShortestPathOrderDFS(finishNode,startNode) {\r\n    console.log(\"shortest Path\");\r\n    const nodesInShortestPathOrder = [];\r\n    let currentNode = finishNode;\r\n    while (currentNode !== null) {\r\n      nodesInShortestPathOrder.unshift(currentNode);\r\n      console.log(currentNode.row);\r\n      console.log(currentNode.col);\r\n      currentNode = currentNode.previousNode;\r\n      if(currentNode===startNode){\r\n          console.log(currentNode.row);\r\n          console.log(currentNode.col);\r\n          break;\r\n      }\r\n    }\r\n    return nodesInShortestPathOrder;\r\n  }","C:\\Users\\kadam\\react\\Visualization\\src\\models\\Node\\Node.jsx",[],"C:\\Users\\kadam\\react\\Visualization\\src\\mazeAlgorithms\\basicRandom.js",[],{"ruleId":"53","replacedBy":"54"},{"ruleId":"55","replacedBy":"56"},{"ruleId":"57","severity":1,"message":"58","line":21,"column":10,"nodeType":"59","messageId":"60","endLine":21,"endColumn":18},{"ruleId":"57","severity":1,"message":"61","line":22,"column":10,"nodeType":"59","messageId":"60","endLine":22,"endColumn":18},{"ruleId":"62","severity":1,"message":"63","line":113,"column":18,"nodeType":"64","messageId":"65","endLine":113,"endColumn":20},{"ruleId":"62","severity":1,"message":"63","line":117,"column":23,"nodeType":"64","messageId":"65","endLine":117,"endColumn":25},{"ruleId":"62","severity":1,"message":"63","line":121,"column":23,"nodeType":"64","messageId":"65","endLine":121,"endColumn":25},{"ruleId":"62","severity":1,"message":"63","line":137,"column":21,"nodeType":"64","messageId":"65","endLine":137,"endColumn":23},{"ruleId":"62","severity":1,"message":"63","line":3,"column":17,"nodeType":"64","messageId":"65","endLine":3,"endColumn":19},{"ruleId":"62","severity":1,"message":"63","line":97,"column":13,"nodeType":"64","messageId":"65","endLine":97,"endColumn":15},{"ruleId":"62","severity":1,"message":"63","line":16,"column":18,"nodeType":"64","messageId":"65","endLine":16,"endColumn":20},{"ruleId":"62","severity":1,"message":"63","line":76,"column":14,"nodeType":"64","messageId":"65","endLine":76,"endColumn":16},{"ruleId":"62","severity":1,"message":"63","line":3,"column":17,"nodeType":"64","messageId":"65","endLine":3,"endColumn":19},{"ruleId":"62","severity":1,"message":"63","line":97,"column":13,"nodeType":"64","messageId":"65","endLine":97,"endColumn":15},"no-native-reassign",["66"],"no-negated-in-lhs",["67"],"no-unused-vars","'isActive' is assigned a value but never used.","Identifier","unusedVar","'isPaused' is assigned a value but never used.","eqeqeq","Expected '===' and instead saw '=='.","BinaryExpression","unexpected","no-global-assign","no-unsafe-negation"]