[{"/home/sourabh/Downloads/react/tmp/Visualization/src/index.js":"1","/home/sourabh/Downloads/react/tmp/Visualization/src/App.js":"2","/home/sourabh/Downloads/react/tmp/Visualization/src/visualizers/PathfindingVisualizer.jsx":"3","/home/sourabh/Downloads/react/tmp/Visualization/src/mazeAlgorithms/basicRandom.js":"4","/home/sourabh/Downloads/react/tmp/Visualization/src/mazeAlgorithms/Simplestair.js":"5","/home/sourabh/Downloads/react/tmp/Visualization/src/mazeAlgorithms/basicWeighted.js":"6","/home/sourabh/Downloads/react/tmp/Visualization/src/mazeAlgorithms/recursive.js":"7","/home/sourabh/Downloads/react/tmp/Visualization/src/mazeAlgorithms/Snakemaze.js":"8","/home/sourabh/Downloads/react/tmp/Visualization/src/algorithms/dijkstra.js":"9","/home/sourabh/Downloads/react/tmp/Visualization/src/algorithms/DFS.js":"10","/home/sourabh/Downloads/react/tmp/Visualization/src/algorithms/BFS.js":"11","/home/sourabh/Downloads/react/tmp/Visualization/src/algorithms/Astar.js":"12","/home/sourabh/Downloads/react/tmp/Visualization/src/components/Card.js":"13","/home/sourabh/Downloads/react/tmp/Visualization/src/models/Node/Node.jsx":"14"},{"size":168,"mtime":1618029189295,"results":"15","hashOfConfig":"16"},{"size":332,"mtime":1618140430698,"results":"17","hashOfConfig":"16"},{"size":21125,"mtime":1618471315711,"results":"18","hashOfConfig":"16"},{"size":1806,"mtime":1618412414227,"results":"19","hashOfConfig":"16"},{"size":593,"mtime":1618412414227,"results":"20","hashOfConfig":"16"},{"size":651,"mtime":1618412414227,"results":"21","hashOfConfig":"16"},{"size":1568,"mtime":1618412414227,"results":"22","hashOfConfig":"16"},{"size":1650,"mtime":1618412414227,"results":"23","hashOfConfig":"16"},{"size":3527,"mtime":1618412414227,"results":"24","hashOfConfig":"16"},{"size":3402,"mtime":1618412414227,"results":"25","hashOfConfig":"16"},{"size":3524,"mtime":1618412414227,"results":"26","hashOfConfig":"16"},{"size":3269,"mtime":1618412414223,"results":"27","hashOfConfig":"16"},{"size":655,"mtime":1618469338421,"results":"28","hashOfConfig":"16"},{"size":743,"mtime":1618029189295,"results":"29","hashOfConfig":"16"},{"filePath":"30","messages":"31","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"32"},"dytndw",{"filePath":"33","messages":"34","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"32"},{"filePath":"35","messages":"36","errorCount":0,"warningCount":38,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"37","messages":"38","errorCount":0,"warningCount":6,"fixableErrorCount":0,"fixableWarningCount":0,"source":"39","usedDeprecatedRules":"32"},{"filePath":"40","messages":"41","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"42","usedDeprecatedRules":"32"},{"filePath":"43","messages":"44","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"45","usedDeprecatedRules":"32"},{"filePath":"46","messages":"47","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"48","usedDeprecatedRules":"32"},{"filePath":"49","messages":"50","errorCount":0,"warningCount":14,"fixableErrorCount":0,"fixableWarningCount":0,"source":"51","usedDeprecatedRules":"32"},{"filePath":"52","messages":"53","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"54","usedDeprecatedRules":"32"},{"filePath":"55","messages":"56","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"57","usedDeprecatedRules":"32"},{"filePath":"58","messages":"59","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"60","usedDeprecatedRules":"32"},{"filePath":"61","messages":"62","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"63","usedDeprecatedRules":"32"},{"filePath":"64","messages":"65","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"66","messages":"67","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"68","usedDeprecatedRules":"32"},"/home/sourabh/Downloads/react/tmp/Visualization/src/index.js",[],["69","70"],"/home/sourabh/Downloads/react/tmp/Visualization/src/App.js",[],"/home/sourabh/Downloads/react/tmp/Visualization/src/visualizers/PathfindingVisualizer.jsx",["71","72","73","74","75","76","77","78","79","80","81","82","83","84","85","86","87","88","89","90","91","92","93","94","95","96","97","98","99","100","101","102","103","104","105","106","107","108"],"/home/sourabh/Downloads/react/tmp/Visualization/src/mazeAlgorithms/basicRandom.js",["109","110","111","112","113","114"],"function basicRandom(grid, startNode, finishNode) {\n     var grid1 = []\n     // let cIdY=grid.length[0]-10;\n     // for(let c=0 ;c<10;c++)\n     // {\n     //      let cIdXone= Math.floor(grid.length/2)-c;\n     //      let cIdXtwo = Math.floor(grid.length/2)+c;\n     //      // let cIdone = cIdY-cIdXone;\n     //      // let cIdtwo = cIdY-cIdXtwo;\n     //      console.log(cIdXone);\n     //      console.log(cIdXtwo);\n     //      // console.log((cIdY,cIdtwo));\n     //      if(cIdy>=20 || CIdXone>=50 || cIdXtwo>=50){\n     //           continue;\n     //      }\n     //      else{\n     //           grid1.push(grid[cIdY][cIdXone]);\n     //           grid1.push(grid[cIdY][cIdXtwo]);\n     //      }\n     //      // console.log(cIdone);\n     //      // console.log(cIdtwo);\n     // }\n     for (var i = 0; i < 20; i += 3) {\n          for (var j = 0; j < 50; j += 3) {\n               var x = Math.floor((Math.random() * 10) + 1);\n               var col = Math.abs(i - x);\n               var row = Math.abs(j - x);\n               if (col == startNode.col && row == startNode.row) {\n                    continue;\n               }\n               else if (col == finishNode.col && row == finishNode.row) {\n                    continue;\n               }\n               if(grid1.length>1){\n               var count=0;\n               for(var k=0;k<grid1.length;k++)\n               {\n                    if(grid[k]==grid[col][row])\n                    {\n                         count=1;\n                    }\n               }\n               if(count==0)\n               {\n                    grid1.push(grid[col][row]);\n               }\n               }\n               else\n               {\n               grid1.push(grid[col][row]);\n               }\n          }\n     }\n     return grid1;\n}\n\n\nexport default basicRandom;","/home/sourabh/Downloads/react/tmp/Visualization/src/mazeAlgorithms/Simplestair.js",["115","116","117","118"],"function Simplestair(grid, startNode, finishNode) {\n  var grid1 = [];\n  let x = grid.length;\n  let y = 0;\n  while (x < 2 * (grid.length) - 1 && y < grid.length - 4) {\n    if (grid[y][x] == startNode || grid[y][x] == finishNode) {\n      continue;\n    }\n    else {\n      grid1.push(grid[y][x]);\n    }\n    x++;\n    y++;\n  };\n  x = grid.length - 1;\n  y = 0;\n  while (x >= 0 && y < grid.length) {\n    if (grid[y][x] == startNode || grid[y][x] == finishNode) {\n      continue;\n    }\n    else {\n      grid1.push(grid[y][x]);\n    }\n    x--;\n    y++;\n  };\n  return grid1;\n}\n\nexport default Simplestair;","/home/sourabh/Downloads/react/tmp/Visualization/src/mazeAlgorithms/basicWeighted.js",["119","120","121","122"],"function basicWeighted(grid, startNode, finishNode) {\n     var grid1 = []\n     for (var i = 0; i < 20; i += 3) {\n          for (var j = 0; j < 50; j += 3) {\n               var x = Math.floor((Math.random() * 10) + 1);\n               var col = Math.abs(i - x);\n               var row = Math.abs(j - x);\n               if (col == startNode.col && row == startNode.row) {\n                    continue;\n               }\n               else if (col == finishNode.col && row == finishNode.row) {\n                    continue;\n               }\n               grid1.push(grid[col][row]);\n          }\n     }\n     return grid1;\n}\n\n\nexport default basicWeighted;","/home/sourabh/Downloads/react/tmp/Visualization/src/mazeAlgorithms/recursive.js",["123"],"function recursive(grid, rowStart, rowEnd, colStart, colEnd, startNode, finishNode) {\n    if (rowEnd >= (grid.length) || colEnd >= grid.length || rowStart < 0 || colStart < 0) {\n        // console.log(\"Return with first attempt\");\n        return;\n    }\n    let grid1 = []\n    let possibleRows = [];\n    for (let number = rowStart; number <= rowEnd; number += 2) {\n        possibleRows.push(number);\n    }\n    let possibleCols = []\n    for (let number = colStart; number <= colEnd; number += 2) {\n        possibleCols.push(number);\n    }\n    var randomRowIndex = Math.ceil(Math.random() * possibleRows.length);\n    var randomColIndex = Math.ceil(Math.random() * possibleCols.length);\n    // console.log(\"randomRowIndex\", randomRowIndex);\n    // console.log(\"randomColIndex\", randomColIndex);\n    let currentRow = possibleRows[randomRowIndex];\n    let colRandom = possibleCols[randomColIndex];\n    if (currentRow != null || colRandom != null) {\n        // console.log(\"currentRow\", currentRow);\n        // console.log(\"colRandom\", colRandom);\n        // console.log(\"rowStart\", rowStart);\n        // console.log(\"rowEnd\", rowEnd);\n        // console.log(\"colStart\", colStart);\n        // console.log(\"colEnd\", colEnd);\n    }\n    // if((currentRow!=startNode.col && colRandom!=startNode.row) || (currentRow != finishNode.col && colRandom != finishNode.row))\n    // {\n    //     grid1.push(grid[colRandom][currentRow]);\n    // }\n    // console.log(grid1);\n    recursive(grid, rowStart, currentRow - 2, colStart, colEnd, startNode, finishNode);\n}\n\nexport default recursive;","/home/sourabh/Downloads/react/tmp/Visualization/src/mazeAlgorithms/Snakemaze.js",["124","125","126","127","128","129","130","131","132","133","134","135","136","137"],"function Snake(grid, startNode, finishNode) {\n    let grid1 = []\n    let nrequired = []\n    for (let k = 1; k < 10; k++) {\n        for (let j = 1; j < 15; j++) {\n            let x = Math.floor((Math.random() * 50) + 1);\n            nrequired.push(grid[j][x]);\n        }\n    }\n    for (var i = 1; i < 20; i += 2) {\n        for (var j = 0; j < 50; j++) {\n            if (grid[i][j] == startNode && grid[i][j] == finishNode) {\n                continue;\n            }\n            else {\n                if (grid[i][j] == startNode || grid[i][j] == finishNode) {\n                    continue;\n                }\n                else {\n                    let count = 1;\n                    for (let z = 0; z < nrequired.length; z++) {\n                        if (grid[i][j] == nrequired[z]) {\n                            count = 0;\n                        }\n                    }\n                    if (count == 1) {\n                        grid1.push(grid[i][j]);\n                    }\n                }\n            }\n        }\n    }\n    for (var i = 2; i < 20; i += 2) {\n        for (var j = 10; j < 30; j += 2) {\n            if (grid[i][j] == startNode || grid[i][j] == finishNode) {\n                continue;\n            }\n            else {\n                grid1.push(grid[i][j - i + 10]);\n            }\n        }\n    }\n    for (var i = 1; i < 20; i += 2) {\n        for (var j = 50; j < 50; j += 2) {\n            if (grid[i][j] == startNode || grid[i][j] == finishNode) {\n                continue;\n            }\n            else {\n                grid1.push(grid[i][j - i -1]);\n            }\n        }\n    }\n    return grid1;\n}\n\nexport default Snake;","/home/sourabh/Downloads/react/tmp/Visualization/src/algorithms/dijkstra.js",["138","139"],"export default function dijkstra(grid, startnode, endnode) {\r\n    startnode.distance = 0;\r\n    const visited = new Map();\r\n    const visitedinorder = [];\r\n    const visitList = [];\r\n    visitList.push(startnode);\r\n    const graph = creategraph(grid);\r\n    while (visitList.length !== 0) {\r\n        const node = visitList.shift();\r\n        if (node && !visited.has(node)) {\r\n            if (node.isWall) continue;\r\n            visitedinorder.push(node);\r\n            visited.set(node);\r\n            //   console.log(node.row);\r\n            //   console.log(node.col);\r\n            if (node == endnode) {\r\n                return visitedinorder;\r\n            }\r\n            graph.getAdjacents(node).forEach(adj => visitList.push(adj));\r\n            updateUnvisitedNeighbors(visitList, node, graph);\r\n            sortnodebydistance(visitList);\r\n        }\r\n    }\r\n    return visitedinorder;\r\n}\r\n\r\nfunction creategraph(grid) {\r\n    const graph = new Graph(1000);\r\n    for (let row = 0; row < 20; row++) {\r\n        for (let col = 0; col < 50; col++) {\r\n            graph.addVertex(grid[row][col]);\r\n        }\r\n    }\r\n    for (let row = 0; row < 20; row++) {\r\n        for (let col = 0; col < 50; col++) {\r\n            if ((col + 1 < 50)) {\r\n                graph.addEdge(grid[row][col], grid[row][col + 1]);\r\n            }\r\n            if ((row + 1) < 20) {\r\n                graph.addEdge(grid[row][col], grid[row + 1][col]);\r\n            }\r\n            if ((col - 1) >= 0) {\r\n                graph.addEdge(grid[row][col], grid[row][col - 1]);\r\n            }\r\n            if ((row - 1) >= 0) {\r\n                graph.addEdge(grid[row][col], grid[row - 1][col]);\r\n            }\r\n\r\n        }\r\n    }\r\n    return graph;\r\n}\r\n\r\nclass Graph {\r\n    constructor(noOfVertices) {\r\n        this.noOfVertices = noOfVertices;\r\n        this.AdjList = new Map();\r\n    }\r\n    addVertex(v) {\r\n        this.AdjList.set(v, []);\r\n    }\r\n    addEdge(v, w) {\r\n        this.AdjList.get(v).push(w);\r\n    }\r\n    getAdjacents(node) {\r\n        return this.AdjList.get(node);\r\n    }\r\n\r\n    isAdjacent(node, neighbor) {\r\n        var temp = 0;\r\n        this.AdjList.get(node).forEach(adj => {\r\n            if (adj === neighbor) {\r\n                temp++;\r\n            }\r\n        })\r\n        if (temp == 0) {\r\n            return false;\r\n        } else {\r\n            return true;\r\n        }\r\n    }\r\n}\r\n\r\nfunction sortnodebydistance(unvisitednodes) {\r\n    unvisitednodes.sort((nodeA, nodeB) => nodeA.distance - nodeB.distance);\r\n}\r\n\r\nfunction updateUnvisitedNeighbors(visitList, node, graph) {\r\n    for (const neighbor of visitList) {\r\n        if ((neighbor.previousNode !== null && neighbor.distance <= node.distance) || !graph.isAdjacent(node, neighbor)) {\r\n            continue;\r\n        } else if (graph.isAdjacent(node, neighbor)) {\r\n            neighbor.distance = node.distance + neighbor.weight + 1;\r\n            neighbor.previousNode = node;\r\n        }\r\n    }\r\n}\r\n\r\nexport function getNodesInShortestPathOrderDijkstra(finishNode, startNode) {\r\n    const nodesInShortestPathOrder = [];\r\n    let currentNode = finishNode;\r\n    while (currentNode !== null) {\r\n        nodesInShortestPathOrder.unshift(currentNode);\r\n        // console.log(currentNode.row);\r\n        // console.log(currentNode.col);\r\n        currentNode = currentNode.previousNode;\r\n        if (currentNode === startNode) {\r\n            // console.log(currentNode.row);\r\n            // console.log(currentNode.col);\r\n            break;\r\n        }\r\n    }\r\n    return nodesInShortestPathOrder;\r\n}\r\n","/home/sourabh/Downloads/react/tmp/Visualization/src/algorithms/DFS.js",["140","141"],"export default function DFS(grid, startNode, finishNode) {\n    if (startNode == finishNode || !startNode || !finishNode) {\n        return false;\n    }\n    console.log(\"in DFS\");\n    var count = 0;\n    startNode.distance = 0;\n    const visited = new Map();\n    const visitedinorder = [];\n    const visitList = [];\n    visitList.push(startNode)\n    const graph = creategraph(grid);\n    while (visitList.length !== 0) {\n        const node = visitList.pop();\n        if (node && !visited.has(node)) {\n            if (node.isWall) continue;\n            visitedinorder.push(node);\n            count++;\n            visited.set(node);\n            // console.log(\"visited\");\n            // console.log(node.row);\n            // console.log(node.col);\n            if (node === finishNode) {\n                console.log(\"count\", count);\n                return visitedinorder;\n            }\n            graph.getAdjacents(node).forEach(adj => visitList.push(adj));\n            updateUnvisitedNeighbors(visitList, node, graph, visited);\n        }\n    }\n    return visitedinorder;\n\n}\n\n\n\nfunction creategraph(grid) {\n    const graph = new Graph(1000);\n    for (let row = 0; row < 20; row++) {\n        for (let col = 0; col < 50; col++) {\n            graph.addVertex(grid[row][col]);\n        }\n    }\n    for (let row = 0; row < 20; row++) {\n        for (let col = 0; col < 50; col++) {\n            if ((row + 1) < 20) {\n                graph.addEdge(grid[row][col], grid[row + 1][col]);\n            }\n            if ((col - 1 >= 0)) {\n                graph.addEdge(grid[row][col], grid[row][col - 1]);\n            }\n            if ((col + 1 < 50)) {\n                graph.addEdge(grid[row][col], grid[row][col + 1]);\n            }\n            if ((row - 1) >= 0) {\n                graph.addEdge(grid[row][col], grid[row - 1][col]);\n            }\n        }\n    }\n    return graph;\n}\n\n\nclass Graph {\n    constructor(noOfVertices) {\n        this.noOfVertices = noOfVertices;\n        this.Adjlist = new Map();\n    }\n\n    addVertex(v) {\n        this.Adjlist.set(v, []);\n    }\n\n    addEdge(v, w) {\n        this.Adjlist.get(v).push(w);\n    }\n\n    getAdjacents(node) {\n        return this.Adjlist.get(node);\n    }\n\n    isAdjacent(node, neighbor) {\n        var temp = 0;\n        this.Adjlist.get(neighbor).forEach(x => {\n            if (x == node) {\n                temp++;\n            }\n        })\n        if (temp === 0) {\n            return false;\n        } else {\n            return true;\n        }\n    }\n}\n\nfunction updateUnvisitedNeighbors(visitList, node, graph, visited) {\n    // console.log(\"neigbour\");\n    for (const neighbor of visitList) {\n        if (graph.isAdjacent(node, neighbor) && !visited.has(neighbor)) {\n            neighbor.distance = node.distance + neighbor.weight + 1;\n            neighbor.previousNode = node;\n        }\n    }\n}\n\nexport function getNodesInShortestPathOrderDFS(finishNode, startNode) {\n    // console.log(\"shortest Path\");\n    const nodesInShortestPathOrder = [];\n    let currentNode = finishNode;\n    while (currentNode !== null) {\n        nodesInShortestPathOrder.unshift(currentNode);\n        //   console.log(currentNode);\n        currentNode = currentNode.previousNode;\n        if (currentNode === startNode) {\n            //   console.log(currentNode.row);\n            //   console.log(currentNode.col);\n            break;\n        }\n    }\n    return nodesInShortestPathOrder;\n}\n","/home/sourabh/Downloads/react/tmp/Visualization/src/algorithms/BFS.js",["142","143","144"],"export default function BFS(grid, startNode, finishNode) {\n    if (startNode == finishNode || !startNode || !finishNode) {\n        return false;\n    }\n    // console.log(\"in BFS\");\n    var count = 0;\n    startNode.distance = 0;\n    const visited = new Map();\n    const visitedinorder = [];\n    const visitList = [];\n    visitList.push(startNode)\n    const graph = creategraph(grid);\n    while (visitList.length !== 0) {\n        const node = visitList.shift();\n        if (node && !visited.has(node)) {\n            if (node.isWall) continue;\n            visitedinorder.push(node);\n            count++;\n            visited.set(node);\n            // console.log(\"visited\");\n            // console.log(node.row);\n            // console.log(node.col);\n            if (node === finishNode) {\n                // console.log(\"count\",count);\n                return visitedinorder;\n            }\n            graph.getAdjacents(node).forEach(adj => visitList.push(adj));\n            updateUnvisitedNeighbors(visitList, node, graph);\n        }\n    }\n    return visitedinorder;\n\n}\n\n\n\nfunction creategraph(grid) {\n    const graph = new Graph(1000);\n    for (let row = 0; row < 20; row++) {\n        for (let col = 0; col < 50; col++) {\n            graph.addVertex(grid[row][col]);\n        }\n    }\n    for (let row = 0; row < 20; row++) {\n        for (let col = 0; col < 50; col++) {\n            if ((col + 1 < 50)) {\n                graph.addEdge(grid[row][col], grid[row][col + 1]);\n            }\n            if ((col - 1 >= 0)) {\n                graph.addEdge(grid[row][col], grid[row][col - 1]);\n            }\n            if ((row - 1) >= 0) {\n                graph.addEdge(grid[row][col], grid[row - 1][col]);\n            }\n            if ((row + 1) < 20) {\n                graph.addEdge(grid[row][col], grid[row + 1][col]);\n            }\n        }\n    }\n    return graph;\n}\n\n\nclass Graph {\n    constructor(noOfVertices) {\n        this.noOfVertices = noOfVertices;\n        this.Adjlist = new Map();\n    }\n\n    addVertex(v) {\n        this.Adjlist.set(v, []);\n    }\n\n    addEdge(v, w) {\n        this.Adjlist.get(v).push(w);\n    }\n\n    getAdjacents(node) {\n        return this.Adjlist.get(node);\n    }\n\n    isAdjacent(node, neighbor) {\n        var temp = 0;\n        this.Adjlist.get(neighbor).forEach(x => {\n            if (x == node) {\n                temp++;\n            }\n        })\n        if (temp === 0) {\n            return false;\n        } else {\n            return true;\n        }\n    }\n}\n\nfunction updateUnvisitedNeighbors(visitList, node, graph) {\n    // console.log(\"neigbour\");\n    for (const neighbor of visitList) {\n        if (!graph.isAdjacent(node, neighbor) || neighbor.previousNode !== null) {\n            continue;\n        } else if (graph.isAdjacent(node, neighbor)) {\n            neighbor.distance = node.distance + neighbor.weight + 1;\n            neighbor.previousNode = node;\n        }\n    }\n}\n\nexport function getNodesInShortestPathOrderBFS(finishNode, startNode) {\n    // console.log(\"shortest Path\");\n    const nodesInShortestPathOrder = [];\n    let currentNode = finishNode;\n    while (currentNode !== null) {\n        nodesInShortestPathOrder.unshift(currentNode);\n        //   console.log(currentNode.row);\n        //   console.log(currentNode.col);\n        currentNode = currentNode.previousNode;\n        if (currentNode === startNode) {\n            //   console.log(currentNode.row);\n            //   console.log(currentNode.col);\n            break;\n        }\n    }\n    return nodesInShortestPathOrder;\n}\n","/home/sourabh/Downloads/react/tmp/Visualization/src/algorithms/Astar.js",["145","146"],"export default function AStar(grid, startnode, endnode) {\n  startnode.distance = 0;\n  const visited = new Map();\n  const visitedinorder = [];\n  const visitList = [];\n  visitList.push(startnode);\n  const graph = creategraph(grid);\n  while (visitList.length !== 0) {\n    const node = visitList.shift();\n    if (node && !visited.has(node)) {\n      if (node.isWall) continue;\n      visitedinorder.push(node);\n      visited.set(node);\n      // console.log(node.row);\n      // console.log(node.col);\n      if (node == endnode) {\n        return visitedinorder;\n      }\n      graph.getAdjacents(node).forEach(adj => visitList.push(adj));\n      updateUnvisitedNeighbors(visitList, node, graph);\n      sortnodebydistance(visitList, endnode);\n    }\n  }\n  return visitedinorder;\n}\n\nfunction creategraph(grid) {\n  const graph = new Graph(1000);\n  for (let row = 0; row < 20; row++) {\n    for (let col = 0; col < 50; col++) {\n      graph.addVertex(grid[row][col]);\n    }\n  }\n  for (let row = 0; row < 20; row++) {\n    for (let col = 0; col < 50; col++) {\n      if ((col + 1 < 50)) {\n        graph.addEdge(grid[row][col], grid[row][col + 1]);\n      }\n      if ((row + 1) < 20) {\n        graph.addEdge(grid[row][col], grid[row + 1][col]);\n      }\n      if ((col - 1) >= 0) {\n        graph.addEdge(grid[row][col], grid[row][col - 1]);\n      }\n      if ((row - 1) >= 0) {\n        graph.addEdge(grid[row][col], grid[row - 1][col]);\n      }\n\n    }\n  }\n  return graph;\n}\n\nclass Graph {\n  constructor(noOfVertices) {\n    this.noOfVertices = noOfVertices;\n    this.AdjList = new Map();\n  }\n  addVertex(v) {\n    this.AdjList.set(v, []);\n  }\n  addEdge(v, w) {\n    this.AdjList.get(v).push(w);\n  }\n  getAdjacents(node) {\n    return this.AdjList.get(node);\n  }\n\n  isAdjacent(node, neighbor) {\n    var temp = 0;\n    this.AdjList.get(node).forEach(adj => {\n      if (adj === neighbor) {\n        temp++;\n      }\n    })\n    if (temp == 0) {\n      return false;\n    } else {\n      return true;\n    }\n  }\n}\n\nfunction sortnodebydistance(unvisitednodes, finishNode) {\n  unvisitednodes.sort((nodeA, nodeB) => (nodeA.distance + manhattendistance(nodeA, finishNode)) - (nodeB.distance + manhattendistance(nodeB, finishNode)));\n}\n\nfunction updateUnvisitedNeighbors(visitList, node, graph) {\n  for (const neighbor of visitList) {\n    if ((neighbor.previousNode !== null && neighbor.distance <= node.distance) || !graph.isAdjacent(node, neighbor)) {\n      continue;\n    } else if (graph.isAdjacent(node, neighbor)) {\n      neighbor.distance = node.distance + neighbor.weight + 1;\n      neighbor.previousNode = node;\n    }\n  }\n}\n\nexport function getNodesInShortestPathOrderAStar(finishNode, startNode) {\n  const nodesInShortestPathOrder = [];\n  let currentNode = finishNode;\n  while (currentNode !== null) {\n    nodesInShortestPathOrder.unshift(currentNode);\n    //   console.log(currentNode.row);\n    //   console.log(currentNode.col);\n    currentNode = currentNode.previousNode;\n    if (currentNode === startNode) {\n      //   console.log(currentNode.row);\n      //   console.log(currentNode.col);\n      break;\n    }\n  }\n  return nodesInShortestPathOrder;\n}\n\nfunction manhattendistance(node, finishnode) {\n  var hn = (Math.abs(node.row - finishnode.row) + Math.abs(node.col - finishnode.col));\n  return hn;\n}\n","/home/sourabh/Downloads/react/tmp/Visualization/src/components/Card.js",[],"/home/sourabh/Downloads/react/tmp/Visualization/src/models/Node/Node.jsx",["147"],"import React, {Component} from 'react';\n\nimport './Node.css';\n\nexport default class Node extends Component {\n  render() {\n    const {\n      col,\n      isFinish,\n      isStart,\n      isWall,\n      onMouseDown,\n      onMouseEnter,\n      onMouseUp,\n      row,\n      weight = 0,\n    } = this.props;\n    const extraClassName = isFinish\n      ? 'node-finish'\n      : isStart\n      ? 'node-start'\n      : isWall\n      ? 'node-wall'\n      : weight != 0\n      ? 'node-weight'\n      : '';\n\n    return (\n      <div\n        id={`node-${row}-${col}`}\n        className={`node ${extraClassName}`}\n        onMouseDown={() => onMouseDown(row, col)}\n        onMouseEnter={() => onMouseEnter(row, col)}\n        onMouseUp={() => onMouseUp()}></div>\n    );\n  }\n}\n",{"ruleId":"148","replacedBy":"149"},{"ruleId":"150","replacedBy":"151"},{"ruleId":"152","severity":1,"message":"153","line":2,"column":10,"nodeType":"154","messageId":"155","endLine":2,"endColumn":18},{"ruleId":"152","severity":1,"message":"156","line":29,"column":10,"nodeType":"154","messageId":"155","endLine":29,"endColumn":18},{"ruleId":"152","severity":1,"message":"157","line":30,"column":10,"nodeType":"154","messageId":"155","endLine":30,"endColumn":18},{"ruleId":"158","severity":1,"message":"159","line":112,"column":13,"nodeType":"160","messageId":"161","endLine":112,"endColumn":15},{"ruleId":"158","severity":1,"message":"159","line":112,"column":38,"nodeType":"160","messageId":"161","endLine":112,"endColumn":40},{"ruleId":"158","severity":1,"message":"159","line":116,"column":20,"nodeType":"160","messageId":"161","endLine":116,"endColumn":22},{"ruleId":"158","severity":1,"message":"159","line":116,"column":46,"nodeType":"160","messageId":"161","endLine":116,"endColumn":48},{"ruleId":"158","severity":1,"message":"159","line":132,"column":23,"nodeType":"160","messageId":"161","endLine":132,"endColumn":25},{"ruleId":"158","severity":1,"message":"159","line":132,"column":48,"nodeType":"160","messageId":"161","endLine":132,"endColumn":50},{"ruleId":"158","severity":1,"message":"159","line":132,"column":75,"nodeType":"160","messageId":"161","endLine":132,"endColumn":77},{"ruleId":"158","severity":1,"message":"159","line":132,"column":101,"nodeType":"160","messageId":"161","endLine":132,"endColumn":103},{"ruleId":"162","severity":1,"message":"163","line":152,"column":18,"nodeType":"164","messageId":"165","endLine":158,"endColumn":8},{"ruleId":"162","severity":1,"message":"163","line":164,"column":18,"nodeType":"164","messageId":"165","endLine":174,"endColumn":8},{"ruleId":"158","severity":1,"message":"159","line":235,"column":19,"nodeType":"160","messageId":"161","endLine":235,"endColumn":21},{"ruleId":"158","severity":1,"message":"159","line":242,"column":24,"nodeType":"160","messageId":"161","endLine":242,"endColumn":26},{"ruleId":"166","severity":1,"message":"167","line":245,"column":11,"nodeType":"154","messageId":"168","endLine":245,"endColumn":17},{"ruleId":"158","severity":1,"message":"159","line":249,"column":24,"nodeType":"160","messageId":"161","endLine":249,"endColumn":26},{"ruleId":"166","severity":1,"message":"167","line":252,"column":11,"nodeType":"154","messageId":"168","endLine":252,"endColumn":17},{"ruleId":"158","severity":1,"message":"159","line":255,"column":26,"nodeType":"160","messageId":"161","endLine":255,"endColumn":28},{"ruleId":"166","severity":1,"message":"167","line":262,"column":11,"nodeType":"154","messageId":"168","endLine":262,"endColumn":17},{"ruleId":"158","severity":1,"message":"159","line":288,"column":23,"nodeType":"160","messageId":"161","endLine":288,"endColumn":25},{"ruleId":"158","severity":1,"message":"159","line":297,"column":28,"nodeType":"160","messageId":"161","endLine":297,"endColumn":30},{"ruleId":"166","severity":1,"message":"169","line":298,"column":11,"nodeType":"154","messageId":"168","endLine":298,"endColumn":18},{"ruleId":"166","severity":1,"message":"170","line":299,"column":16,"nodeType":"154","messageId":"168","endLine":299,"endColumn":17},{"ruleId":"158","severity":1,"message":"159","line":306,"column":28,"nodeType":"160","messageId":"161","endLine":306,"endColumn":30},{"ruleId":"166","severity":1,"message":"169","line":309,"column":11,"nodeType":"154","messageId":"168","endLine":309,"endColumn":18},{"ruleId":"166","severity":1,"message":"170","line":310,"column":16,"nodeType":"154","messageId":"168","endLine":310,"endColumn":17},{"ruleId":"158","severity":1,"message":"159","line":317,"column":28,"nodeType":"160","messageId":"161","endLine":317,"endColumn":30},{"ruleId":"166","severity":1,"message":"169","line":318,"column":11,"nodeType":"154","messageId":"168","endLine":318,"endColumn":18},{"ruleId":"166","severity":1,"message":"170","line":319,"column":16,"nodeType":"154","messageId":"168","endLine":319,"endColumn":17},{"ruleId":"158","severity":1,"message":"159","line":326,"column":28,"nodeType":"160","messageId":"161","endLine":326,"endColumn":30},{"ruleId":"166","severity":1,"message":"169","line":327,"column":11,"nodeType":"154","messageId":"168","endLine":327,"endColumn":18},{"ruleId":"166","severity":1,"message":"170","line":328,"column":16,"nodeType":"154","messageId":"168","endLine":328,"endColumn":17},{"ruleId":"158","severity":1,"message":"159","line":339,"column":23,"nodeType":"160","messageId":"161","endLine":339,"endColumn":25},{"ruleId":"171","severity":1,"message":"172","line":388,"column":6,"nodeType":"173","endLine":388,"endColumn":21,"suggestions":"174"},{"ruleId":"158","severity":1,"message":"159","line":432,"column":73,"nodeType":"160","messageId":"161","endLine":432,"endColumn":75},{"ruleId":"158","severity":1,"message":"175","line":485,"column":28,"nodeType":"160","messageId":"161","endLine":485,"endColumn":30},{"ruleId":"158","severity":1,"message":"159","line":560,"column":25,"nodeType":"160","messageId":"161","endLine":560,"endColumn":27},{"ruleId":"158","severity":1,"message":"159","line":28,"column":24,"nodeType":"160","messageId":"161","endLine":28,"endColumn":26},{"ruleId":"158","severity":1,"message":"159","line":28,"column":48,"nodeType":"160","messageId":"161","endLine":28,"endColumn":50},{"ruleId":"158","severity":1,"message":"159","line":31,"column":29,"nodeType":"160","messageId":"161","endLine":31,"endColumn":31},{"ruleId":"158","severity":1,"message":"159","line":31,"column":54,"nodeType":"160","messageId":"161","endLine":31,"endColumn":56},{"ruleId":"158","severity":1,"message":"159","line":38,"column":31,"nodeType":"160","messageId":"161","endLine":38,"endColumn":33},{"ruleId":"158","severity":1,"message":"159","line":43,"column":24,"nodeType":"160","messageId":"161","endLine":43,"endColumn":26},{"ruleId":"158","severity":1,"message":"159","line":6,"column":20,"nodeType":"160","messageId":"161","endLine":6,"endColumn":22},{"ruleId":"158","severity":1,"message":"159","line":6,"column":47,"nodeType":"160","messageId":"161","endLine":6,"endColumn":49},{"ruleId":"158","severity":1,"message":"159","line":18,"column":20,"nodeType":"160","messageId":"161","endLine":18,"endColumn":22},{"ruleId":"158","severity":1,"message":"159","line":18,"column":47,"nodeType":"160","messageId":"161","endLine":18,"endColumn":49},{"ruleId":"158","severity":1,"message":"159","line":8,"column":24,"nodeType":"160","messageId":"161","endLine":8,"endColumn":26},{"ruleId":"158","severity":1,"message":"159","line":8,"column":48,"nodeType":"160","messageId":"161","endLine":8,"endColumn":50},{"ruleId":"158","severity":1,"message":"159","line":11,"column":29,"nodeType":"160","messageId":"161","endLine":11,"endColumn":31},{"ruleId":"158","severity":1,"message":"159","line":11,"column":54,"nodeType":"160","messageId":"161","endLine":11,"endColumn":56},{"ruleId":"152","severity":1,"message":"176","line":6,"column":9,"nodeType":"154","messageId":"155","endLine":6,"endColumn":14},{"ruleId":"158","severity":1,"message":"159","line":12,"column":28,"nodeType":"160","messageId":"161","endLine":12,"endColumn":30},{"ruleId":"158","severity":1,"message":"159","line":12,"column":55,"nodeType":"160","messageId":"161","endLine":12,"endColumn":57},{"ruleId":"158","severity":1,"message":"159","line":16,"column":32,"nodeType":"160","messageId":"161","endLine":16,"endColumn":34},{"ruleId":"158","severity":1,"message":"159","line":16,"column":59,"nodeType":"160","messageId":"161","endLine":16,"endColumn":61},{"ruleId":"158","severity":1,"message":"159","line":22,"column":40,"nodeType":"160","messageId":"161","endLine":22,"endColumn":42},{"ruleId":"158","severity":1,"message":"159","line":26,"column":31,"nodeType":"160","messageId":"161","endLine":26,"endColumn":33},{"ruleId":"166","severity":1,"message":"170","line":33,"column":14,"nodeType":"154","messageId":"168","endLine":33,"endColumn":15},{"ruleId":"166","severity":1,"message":"177","line":34,"column":18,"nodeType":"154","messageId":"168","endLine":34,"endColumn":19},{"ruleId":"158","severity":1,"message":"159","line":35,"column":28,"nodeType":"160","messageId":"161","endLine":35,"endColumn":30},{"ruleId":"158","severity":1,"message":"159","line":35,"column":55,"nodeType":"160","messageId":"161","endLine":35,"endColumn":57},{"ruleId":"166","severity":1,"message":"170","line":43,"column":14,"nodeType":"154","messageId":"168","endLine":43,"endColumn":15},{"ruleId":"166","severity":1,"message":"177","line":44,"column":18,"nodeType":"154","messageId":"168","endLine":44,"endColumn":19},{"ruleId":"158","severity":1,"message":"159","line":45,"column":28,"nodeType":"160","messageId":"161","endLine":45,"endColumn":30},{"ruleId":"158","severity":1,"message":"159","line":45,"column":55,"nodeType":"160","messageId":"161","endLine":45,"endColumn":57},{"ruleId":"158","severity":1,"message":"159","line":16,"column":22,"nodeType":"160","messageId":"161","endLine":16,"endColumn":24},{"ruleId":"158","severity":1,"message":"159","line":76,"column":18,"nodeType":"160","messageId":"161","endLine":76,"endColumn":20},{"ruleId":"158","severity":1,"message":"159","line":2,"column":19,"nodeType":"160","messageId":"161","endLine":2,"endColumn":21},{"ruleId":"158","severity":1,"message":"159","line":85,"column":19,"nodeType":"160","messageId":"161","endLine":85,"endColumn":21},{"ruleId":"158","severity":1,"message":"159","line":2,"column":19,"nodeType":"160","messageId":"161","endLine":2,"endColumn":21},{"ruleId":"152","severity":1,"message":"178","line":18,"column":13,"nodeType":"154","messageId":"155","endLine":18,"endColumn":18},{"ruleId":"158","severity":1,"message":"159","line":85,"column":19,"nodeType":"160","messageId":"161","endLine":85,"endColumn":21},{"ruleId":"158","severity":1,"message":"159","line":16,"column":16,"nodeType":"160","messageId":"161","endLine":16,"endColumn":18},{"ruleId":"158","severity":1,"message":"159","line":76,"column":14,"nodeType":"160","messageId":"161","endLine":76,"endColumn":16},{"ruleId":"158","severity":1,"message":"175","line":24,"column":16,"nodeType":"160","messageId":"161","endLine":24,"endColumn":18},"no-native-reassign",["179"],"no-negated-in-lhs",["180"],"no-unused-vars","'Carousel' is defined but never used.","Identifier","unusedVar","'isActive' is assigned a value but never used.","'isPaused' is assigned a value but never used.","eqeqeq","Expected '===' and instead saw '=='.","BinaryExpression","unexpected","no-loop-func","Function declared in a loop contains unsafe references to variable(s) 'START_NODE_ROW', 'START_NODE_COL', 'FINISH_NODE_ROW', 'FINISH_NODE_COL'.","ArrowFunctionExpression","unsafeRefs","no-redeclare","'start2' is already defined.","redeclared","'griddef' is already defined.","'i' is already defined.","react-hooks/exhaustive-deps","React Hook useEffect has a missing dependency: 'demoMazeAlgorithm'. Either include it or remove the dependency array.","ArrayExpression",["181"],"Expected '!==' and instead saw '!='.","'grid1' is assigned a value but never used.","'j' is already defined.","'count' is assigned a value but never used.","no-global-assign","no-unsafe-negation",{"desc":"182","fix":"183"},"Update the dependencies array to be: [demoMazeAlgorithm, mazeAlgorithm]",{"range":"184","text":"185"},[14425,14440],"[demoMazeAlgorithm, mazeAlgorithm]"]