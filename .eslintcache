[{"C:\\React Projects\\new\\Visualization\\src\\index.js":"1","C:\\React Projects\\new\\Visualization\\src\\App.js":"2","C:\\React Projects\\new\\Visualization\\src\\visualizers\\PathfindingVisualizer.jsx":"3","C:\\React Projects\\new\\Visualization\\src\\mazeAlgorithms\\Simplestair.js":"4","C:\\React Projects\\new\\Visualization\\src\\algorithms\\dijkstra.js":"5","C:\\React Projects\\new\\Visualization\\src\\mazeAlgorithms\\Snakemaze.js":"6","C:\\React Projects\\new\\Visualization\\src\\mazeAlgorithms\\basicRandom.js":"7","C:\\React Projects\\new\\Visualization\\src\\mazeAlgorithms\\basicWeighted.js":"8","C:\\React Projects\\new\\Visualization\\src\\mazeAlgorithms\\recursive.js":"9","C:\\React Projects\\new\\Visualization\\src\\algorithms\\BFS.js":"10","C:\\React Projects\\new\\Visualization\\src\\algorithms\\DFS.js":"11","C:\\React Projects\\new\\Visualization\\src\\algorithms\\Astar.js":"12","C:\\React Projects\\new\\Visualization\\src\\models\\Node\\Node.jsx":"13"},{"size":174,"mtime":1617428000044,"results":"14","hashOfConfig":"15"},{"size":281,"mtime":1617428000036,"results":"16","hashOfConfig":"15"},{"size":17610,"mtime":1618127160567,"results":"17","hashOfConfig":"15"},{"size":592,"mtime":1617428000044,"results":"18","hashOfConfig":"15"},{"size":3243,"mtime":1617428000036,"results":"19","hashOfConfig":"15"},{"size":1745,"mtime":1618030271154,"results":"20","hashOfConfig":"15"},{"size":1406,"mtime":1617428000044,"results":"21","hashOfConfig":"15"},{"size":662,"mtime":1617428000044,"results":"22","hashOfConfig":"15"},{"size":1512,"mtime":1618030271154,"results":"23","hashOfConfig":"15"},{"size":3428,"mtime":1617428000036,"results":"24","hashOfConfig":"15"},{"size":3317,"mtime":1618028022729,"results":"25","hashOfConfig":"15"},{"size":3732,"mtime":1617430366501,"results":"26","hashOfConfig":"15"},{"size":780,"mtime":1617428000052,"results":"27","hashOfConfig":"15"},{"filePath":"28","messages":"29","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"30"},"h3v5v8",{"filePath":"31","messages":"32","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"30"},{"filePath":"33","messages":"34","errorCount":0,"warningCount":31,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"35","messages":"36","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"37","usedDeprecatedRules":"30"},{"filePath":"38","messages":"39","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"40","usedDeprecatedRules":"30"},{"filePath":"41","messages":"42","errorCount":0,"warningCount":14,"fixableErrorCount":0,"fixableWarningCount":0,"source":"43","usedDeprecatedRules":"30"},{"filePath":"44","messages":"45","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"46","usedDeprecatedRules":"30"},{"filePath":"47","messages":"48","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"49","usedDeprecatedRules":"30"},{"filePath":"50","messages":"51","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"52","usedDeprecatedRules":"30"},{"filePath":"53","messages":"54","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"55","usedDeprecatedRules":"30"},{"filePath":"56","messages":"57","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"58","usedDeprecatedRules":"30"},{"filePath":"59","messages":"60","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"61","usedDeprecatedRules":"30"},{"filePath":"62","messages":"63","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"64","usedDeprecatedRules":"30"},"C:\\React Projects\\new\\Visualization\\src\\index.js",[],["65","66"],"C:\\React Projects\\new\\Visualization\\src\\App.js",[],"C:\\React Projects\\new\\Visualization\\src\\visualizers\\PathfindingVisualizer.jsx",["67","68","69","70","71","72","73","74","75","76","77","78","79","80","81","82","83","84","85","86","87","88","89","90","91","92","93","94","95","96","97"],"C:\\React Projects\\new\\Visualization\\src\\mazeAlgorithms\\Simplestair.js",["98","99","100","101"],"function Simplestair(grid,startNode, finishNode)\r\n{\r\nvar grid1=[];\r\n  let  x=grid.length;\r\n  let y=0;\r\n  while(x<2*(grid.length)-1 && y<grid.length-4){\r\n    if(grid[y][x]==startNode || grid[y][x]==finishNode){\r\n        continue;\r\n    }\r\n    else{\r\n        grid1.push(grid[y][x]);\r\n    }\r\n    x++;\r\n    y++;\r\n    };\r\n    x=grid.length-1;\r\n    y=0;\r\n  while(x>=0 && y<grid.length){\r\n    if(grid[y][x]==startNode || grid[y][x]==finishNode){\r\n        continue;\r\n    }\r\n    else{\r\n        grid1.push(grid[y][x]);\r\n    }\r\n    x--;\r\n    y++;\r\n  };\r\n  return grid1;\r\n}\r\n\r\nexport default Simplestair; ","C:\\React Projects\\new\\Visualization\\src\\algorithms\\dijkstra.js",["102","103"],"export default function dijkstra(grid,startnode,endnode){\r\n  startnode.distance=0;\r\n  const visited = new Map();\r\n  const visitedinorder =[];\r\n  const visitList = [];\r\n  visitList.push(startnode);\r\n  const graph=creategraph(grid);\r\n  while(visitList.length !== 0) {\r\n      const node = visitList.shift();\r\n      if(node && !visited.has(node)) {\r\n          if (node.isWall) continue;\r\n          visitedinorder.push(node);\r\n          visited.set(node);\r\n          console.log(node.row);\r\n          console.log(node.col);\r\n          if(node==endnode){\r\n              return visitedinorder;\r\n          }\r\n          graph.getAdjacents(node).forEach(adj => visitList.push(adj));\r\n          updateUnvisitedNeighbors(visitList,node,graph);\r\n          sortnodebydistance(visitList);\r\n      }\r\n  }\r\n  return visitedinorder;\r\n}\r\n\r\nfunction creategraph(grid){\r\n  const graph=new Graph(1000);\r\n  for (let row = 0; row < 20; row++) {\r\n      for (let col = 0; col < 50; col++) {\r\n        graph.addVertex(grid[row][col]);\r\n      }\r\n  }\r\n  for (let row = 0; row < 20; row++) {\r\n      for (let col = 0; col < 50; col++) {\r\n          if((col+1<50)){\r\n              graph.addEdge(grid[row][col],grid[row][col+1]);\r\n          }\r\n          if((row+1)<20){\r\n              graph.addEdge(grid[row][col],grid[row+1][col]);\r\n          }\r\n          if((col-1)>=0){\r\n              graph.addEdge(grid[row][col],grid[row][col-1]);\r\n          }\r\n          if((row-1)>=0){\r\n              graph.addEdge(grid[row][col],grid[row-1][col]);\r\n          }         \r\n             \r\n      }\r\n    }\r\n  return graph;\r\n}\r\n\r\nclass Graph { \r\n  constructor(noOfVertices) { \r\n      this.noOfVertices = noOfVertices; \r\n      this.AdjList = new Map(); \r\n  }\r\n  addVertex(v) { \r\n  this.AdjList.set(v, []); \r\n  } \r\n  addEdge(v, w) { \r\n  this.AdjList.get(v).push(w);\r\n  }\r\n  getAdjacents(node) {\r\n      return this.AdjList.get(node);\r\n  }\r\n  \r\n  isAdjacent(node,neighbor) {\r\n      var temp=0;\r\n      this.AdjList.get(node).forEach(adj => {\r\n          if(adj === neighbor){\r\n              temp++;\r\n          }\r\n      })\r\n      if(temp==0){\r\n          return false;\r\n      }else{\r\n          return true;\r\n      }\r\n  }\r\n} \r\n\r\nfunction sortnodebydistance(unvisitednodes){\r\n  unvisitednodes.sort((nodeA, nodeB) => nodeA.distance - nodeB.distance);\r\n}\r\n\r\nfunction updateUnvisitedNeighbors(visitList,node,graph) {\r\n  for (const neighbor of visitList) {\r\n      if((neighbor.previousNode !== null && neighbor.distance <= node.distance)  || !graph.isAdjacent(node,neighbor) ){\r\n          continue;\r\n      }else if(graph.isAdjacent(node,neighbor)){\r\n          neighbor.distance = node.distance + neighbor.weight + 1;\r\n          neighbor.previousNode = node;\r\n      }\r\n  }\r\n}\r\n\r\nexport function getNodesInShortestPathOrderDijkstra(finishNode,startNode) {\r\n  const nodesInShortestPathOrder = [];\r\n  let currentNode = finishNode;\r\n  while (currentNode !== null) {\r\n    nodesInShortestPathOrder.unshift(currentNode);\r\n    console.log(currentNode.row);\r\n    console.log(currentNode.col);\r\n    currentNode = currentNode.previousNode;\r\n    if(currentNode===startNode){\r\n        console.log(currentNode.row);\r\n        console.log(currentNode.col);\r\n        break;\r\n    }\r\n  }\r\n  return nodesInShortestPathOrder;\r\n}\r\n","C:\\React Projects\\new\\Visualization\\src\\mazeAlgorithms\\Snakemaze.js",["104","105","106","107","108","109","110","111","112","113","114","115","116","117"],"function Snake(grid,startNode,finishNode){\r\n    let grid1=[]\r\n    let nrequired=[]\r\n    for(let k=1;k<10;k++)\r\n    {\r\n        for(let j=1;j<20;j++)\r\n        {\r\n        let x = Math.floor((Math.random() * 50) + 1);\r\n        nrequired.push(grid[j][x]);\r\n        }\r\n    }\r\n    for(var i =1 ;i<20;i+=2)\r\n    {\r\n        for(var j=0;j<50;j++)\r\n        {\r\n            if(grid[i][j]==startNode && grid[i][j]==finishNode)\r\n            {\r\n                continue;\r\n            }\r\n            else{\r\n                if(grid[i][j]==startNode || grid[i][j]==finishNode)\r\n                {\r\n                    continue;\r\n                }\r\n                else{\r\n                    let count=1;\r\n                    for(let z=0;z<nrequired.length;z++)\r\n                    {\r\n                    if(grid[i][j]==nrequired[z])\r\n                    {\r\n                        count=0;\r\n                    }\r\n                    }\r\n                    if(count==1){\r\n                        grid1.push(grid[i][j]);\r\n                    }\r\n                }\r\n            }\r\n        }\r\n    }\r\n    for(var i =2 ;i<20;i+=2)\r\n    {\r\n        for(var j=10;j<30;j+=2)\r\n        {\r\n            if(grid[i][j]==startNode || grid[i][j]==finishNode)\r\n                {\r\n                    continue;\r\n                }\r\n            else{\r\n                grid1.push(grid[i][j-i+10]);\r\n            }\r\n        }\r\n    }\r\n    for(var i =1 ;i<19;i+=2)\r\n    {\r\n        for(var j=35;j<50;j+=2)\r\n        {\r\n            if(grid[i][j]==startNode || grid[i][j]==finishNode)\r\n                {\r\n                    continue;\r\n                }\r\n            else{\r\n                grid1.push(grid[i][j-i]);\r\n            }\r\n        }\r\n    }\r\n    return grid1;\r\n}\r\n\r\nexport default Snake;","C:\\React Projects\\new\\Visualization\\src\\mazeAlgorithms\\basicRandom.js",["118","119","120","121"],"function basicRandom(grid,startNode, finishNode){\r\n     var grid1=[]\r\n     // let cIdY=grid.length[0]-10;\r\n     // for(let c=0 ;c<10;c++)\r\n     // {\r\n     //      let cIdXone= Math.floor(grid.length/2)-c;\r\n     //      let cIdXtwo = Math.floor(grid.length/2)+c;\r\n     //      // let cIdone = cIdY-cIdXone;\r\n     //      // let cIdtwo = cIdY-cIdXtwo;\r\n     //      console.log(cIdXone);\r\n     //      console.log(cIdXtwo);\r\n     //      // console.log((cIdY,cIdtwo));\r\n     //      if(cIdy>=20 || CIdXone>=50 || cIdXtwo>=50){\r\n     //           continue;\r\n     //      }\r\n     //      else{\r\n     //           grid1.push(grid[cIdY][cIdXone]);\r\n     //           grid1.push(grid[cIdY][cIdXtwo]);\r\n     //      }\r\n     //      // console.log(cIdone);\r\n     //      // console.log(cIdtwo);\r\n     // }\r\n     for(var i=0 ; i<20;i+=3)\r\n     {\r\n          for (var j=0 ;j<50;j+=3)\r\n          {\r\n               var x=Math.floor((Math.random() * 10) + 1);\r\n               var col=Math.abs(i-x);\r\n               var row=Math.abs(j-x);\r\n               if(col==startNode.col && row==startNode.row)\r\n               {\r\n                    continue;\r\n               }\r\n               else if(col==finishNode.col && row==finishNode.row)\r\n               {\r\n                    continue;\r\n               }\r\n               grid1.push(grid[col][row]);\r\n          }\r\n     }\r\n     return grid1;\r\n}\r\n\r\n\r\nexport default basicRandom;","C:\\React Projects\\new\\Visualization\\src\\mazeAlgorithms\\basicWeighted.js",["122","123","124","125"],"function basicWeighted(grid,startNode, finishNode){\r\n    var grid1=[]\r\n    for(var i=0 ; i<20;i+=3)\r\n    {\r\n         for (var j=0 ;j<50;j+=3)\r\n         {\r\n              var x=Math.floor((Math.random() * 10) + 1);\r\n              var col=Math.abs(i-x);\r\n              var row=Math.abs(j-x);\r\n              if(col==startNode.col && row==startNode.row)\r\n              {\r\n                   continue;\r\n              }\r\n              else if(col==finishNode.col && row==finishNode.row)\r\n              {\r\n                   continue;\r\n              }\r\n              grid1.push(grid[col][row]);\r\n         }\r\n    }\r\n    return grid1;\r\n}\r\n\r\n\r\nexport default basicWeighted;","C:\\React Projects\\new\\Visualization\\src\\mazeAlgorithms\\recursive.js",["126"],"function recursive(grid,rowStart, rowEnd, colStart, colEnd ,startNode,finishNode){\r\n    if(rowEnd>=(grid.length) || colEnd>=grid.length || rowStart<0 || colStart<0)\r\n    {\r\n        console.log(\"Return with first attempt\");\r\n        return;\r\n    }\r\n    let grid1=[]\r\n    let possibleRows=[];\r\n    for(let number=rowStart;number<=rowEnd;number +=2){\r\n       possibleRows.push(number);\r\n    }\r\n    let possibleCols=[]\r\n    for(let number=colStart;number<=colEnd;number +=2)\r\n    {\r\n       possibleCols.push(number);\r\n    }\r\n    var randomRowIndex = Math.ceil(Math.random()*possibleRows.length);\r\n    var randomColIndex = Math.ceil(Math.random()*possibleCols.length);\r\n    console.log(\"randomRowIndex\",randomRowIndex);\r\n    console.log(\"randomColIndex\",randomColIndex);\r\n    let currentRow = possibleRows[randomRowIndex];\r\n    let colRandom = possibleCols[randomColIndex];\r\n    if(currentRow != null || colRandom != null){\r\n        console.log(\"currentRow\",currentRow);\r\n    console.log(\"colRandom\",colRandom);\r\n    console.log(\"rowStart\",rowStart);\r\n    console.log(\"rowEnd\",rowEnd);\r\n    console.log(\"colStart\",colStart);\r\n    console.log(\"colEnd\",colEnd);\r\n    }\r\n    // if((currentRow!=startNode.col && colRandom!=startNode.row) || (currentRow != finishNode.col && colRandom != finishNode.row))\r\n    // {\r\n    //     grid1.push(grid[colRandom][currentRow]);\r\n    // }\r\n    // console.log(grid1);\r\n    recursive(grid, rowStart, currentRow-2, colStart, colEnd,startNode,finishNode);\r\n}\r\n\r\nexport default recursive;","C:\\React Projects\\new\\Visualization\\src\\algorithms\\BFS.js",["127","128"],"\r\nexport default function BFS(grid,startNode, finishNode){\r\n    if(startNode==finishNode || !startNode || !finishNode){\r\n        return false;\r\n    }\r\n    console.log(\"in BFS\");\r\n    var count=0;\r\n    startNode.distance=0;\r\n    const visited=new Map();\r\n    const visitedinorder=[];\r\n    const visitList=[];\r\n    visitList.push(startNode)\r\n    const graph=creategraph(grid);\r\n    while(visitList.length!==0)\r\n    {\r\n        const node =visitList.shift();\r\n        if(node && !visited.has(node))\r\n        {\r\n            if (node.isWall) continue;\r\n            visitedinorder.push(node);\r\n            count++;\r\n            visited.set(node);\r\n            console.log(\"visited\");\r\n            console.log(node.row);\r\n            console.log(node.col);\r\n            if(node===finishNode){\r\n                console.log(\"count\",count);\r\n                return visitedinorder;\r\n            }\r\n            graph.getAdjacents(node).forEach(adj => visitList.push(adj));\r\n            updateUnvisitedNeighbors(visitList,node,graph);\r\n        }\r\n    }\r\n    return visitedinorder;\r\n\r\n}\r\n\r\n\r\n\r\nfunction creategraph(grid){\r\n    const graph=new Graph(1000);\r\n    for(let row=0;row<20;row++)\r\n    {\r\n        for(let col=0;col<50;col++)\r\n        {\r\n            graph.addVertex(grid[row][col]);\r\n        }\r\n    }\r\n    for(let row=0;row<20;row++)\r\n    {\r\n        for(let col=0;col<50;col++)\r\n        {\r\n            if((col+1<50)){\r\n                graph.addEdge(grid[row][col],grid[row][col+1]);\r\n            }\r\n            if((col-1>=0)){\r\n                graph.addEdge(grid[row][col],grid[row][col-1]);\r\n            }\r\n            if((row-1)>=0){\r\n                graph.addEdge(grid[row][col],grid[row-1][col]);\r\n            }\r\n            if((row+1)<20){\r\n                graph.addEdge(grid[row][col],grid[row+1][col]);\r\n            }\r\n        }\r\n    }\r\n    return graph;\r\n}\r\n\r\n\r\nclass Graph{\r\n  constructor(noOfVertices){\r\n      this.noOfVertices=noOfVertices;\r\n      this.Adjlist=new Map();\r\n  }  \r\n\r\n  addVertex(v){\r\n    this.Adjlist.set(v,[]);\r\n  }\r\n\r\n  addEdge(v,w){\r\n     this.Adjlist.get(v).push(w);\r\n  }\r\n\r\n  getAdjacents(node){\r\n      return this.Adjlist.get(node);\r\n  }\r\n\r\n  isAdjacent(node,neighbor) {\r\n    var temp=0;\r\n    this.Adjlist.get(neighbor).forEach( x => {\r\n        if(x==node){\r\n            temp++;\r\n        }\r\n    })\r\n    if(temp===0){\r\n        return false;\r\n    }else{\r\n        return true;\r\n    }\r\n}\r\n}\r\n\r\nfunction updateUnvisitedNeighbors(visitList,node,graph) {\r\n    console.log(\"neigbour\");\r\n    for (const neighbor of visitList) {\r\n        if(!graph.isAdjacent(node,neighbor) || neighbor.previousNode !== null){\r\n            continue;\r\n        }else if(graph.isAdjacent(node,neighbor)){\r\n            neighbor.distance = node.distance + neighbor.weight + 1;\r\n            neighbor.previousNode = node;\r\n        }\r\n    }\r\n  }\r\n\r\nexport function getNodesInShortestPathOrderBFS(finishNode,startNode) {\r\n    console.log(\"shortest Path\");\r\n    const nodesInShortestPathOrder = [];\r\n    let currentNode = finishNode;\r\n    while (currentNode !== null) {\r\n      nodesInShortestPathOrder.unshift(currentNode);\r\n      console.log(currentNode.row);\r\n      console.log(currentNode.col);\r\n      currentNode = currentNode.previousNode;\r\n      if(currentNode===startNode){\r\n          console.log(currentNode.row);\r\n          console.log(currentNode.col);\r\n          break;\r\n      }\r\n    }\r\n    return nodesInShortestPathOrder;\r\n  }\r\n","C:\\React Projects\\new\\Visualization\\src\\algorithms\\DFS.js",["129","130"],"\r\nexport default function DFS(grid,startNode, finishNode){\r\n    if(startNode==finishNode || !startNode || !finishNode){\r\n        return false;\r\n    }\r\n    console.log(\"in DFS\");\r\n    var count=0;\r\n    startNode.distance=0;\r\n    const visited=new Map();\r\n    const visitedinorder=[];\r\n    const visitList=[];\r\n    visitList.push(startNode)\r\n    const graph=creategraph(grid);\r\n    while(visitList.length!==0)\r\n    {\r\n        const node =visitList.pop();\r\n        if(node && !visited.has(node))\r\n        {\r\n            if (node.isWall) continue;\r\n            visitedinorder.push(node);\r\n            count++;\r\n            visited.set(node);\r\n            console.log(\"visited\");\r\n            console.log(node.row);\r\n            console.log(node.col);\r\n            if(node===finishNode){\r\n                console.log(\"count\",count);\r\n                return visitedinorder;\r\n            }\r\n            graph.getAdjacents(node).forEach(adj => visitList.push(adj));\r\n            updateUnvisitedNeighbors(visitList,node,graph,visited);\r\n        }\r\n    }\r\n    return visitedinorder;\r\n\r\n}\r\n\r\n\r\n\r\nfunction creategraph(grid){\r\n    const graph=new Graph(1000);\r\n    for(let row=0;row<20;row++)\r\n    {\r\n        for(let col=0;col<50;col++)\r\n        {\r\n            graph.addVertex(grid[row][col]);\r\n        }\r\n    }\r\n    for(let row=0;row<20;row++)\r\n    {\r\n        for(let col=0;col<50;col++)\r\n        {\r\n            if((row+1)<20){\r\n                graph.addEdge(grid[row][col],grid[row+1][col]);\r\n            }\r\n            if((col-1>=0)){\r\n                graph.addEdge(grid[row][col],grid[row][col-1]);\r\n            }\r\n            if((col+1<50)){\r\n                graph.addEdge(grid[row][col],grid[row][col+1]);\r\n            }\r\n            if((row-1)>=0){\r\n                graph.addEdge(grid[row][col],grid[row-1][col]);\r\n            }\r\n        }\r\n    }\r\n    return graph;\r\n}\r\n\r\n\r\nclass Graph{\r\n  constructor(noOfVertices){\r\n      this.noOfVertices=noOfVertices;\r\n      this.Adjlist=new Map();\r\n  }  \r\n\r\n  addVertex(v){\r\n    this.Adjlist.set(v,[]);\r\n  }\r\n\r\n  addEdge(v,w){\r\n     this.Adjlist.get(v).push(w);\r\n  }\r\n\r\n  getAdjacents(node){\r\n      return this.Adjlist.get(node);\r\n  }\r\n\r\n  isAdjacent(node,neighbor) {\r\n    var temp=0;\r\n    this.Adjlist.get(neighbor).forEach( x => {\r\n        if(x==node){\r\n            temp++;\r\n        }\r\n    })\r\n    if(temp===0){\r\n        return false;\r\n    }else{\r\n        return true;\r\n    }\r\n}\r\n}\r\n\r\nfunction updateUnvisitedNeighbors(visitList,node,graph,visited) {\r\n    console.log(\"neigbour\");\r\n    for (const neighbor of visitList) {\r\n        if(graph.isAdjacent(node,neighbor) && !visited.has(neighbor)){\r\n            neighbor.distance = node.distance + neighbor.weight + 1;\r\n            neighbor.previousNode = node;\r\n        }\r\n    }\r\n  }\r\n\r\nexport function getNodesInShortestPathOrderDFS(finishNode,startNode) {\r\n    console.log(\"shortest Path\");\r\n    const nodesInShortestPathOrder = [];\r\n    let currentNode = finishNode;\r\n    while (currentNode !== null) {\r\n      nodesInShortestPathOrder.unshift(currentNode);\r\n      console.log(currentNode);\r\n      currentNode = currentNode.previousNode;\r\n      if(currentNode===startNode){\r\n          console.log(currentNode.row);\r\n          console.log(currentNode.col);\r\n          break;\r\n      }\r\n    }\r\n    return nodesInShortestPathOrder;\r\n  }\r\n","C:\\React Projects\\new\\Visualization\\src\\algorithms\\Astar.js",["131","132"],"export default function AStar(grid,startnode,endnode){\r\n    startnode.distance=0;\r\n    const visited = new Map();\r\n    const visitedinorder =[];\r\n    const visitList = [];\r\n    visitList.push(startnode);\r\n    const graph=creategraph(grid);\r\n    while(visitList.length !== 0) {\r\n        const node = visitList.shift();\r\n        if(node && !visited.has(node)) {\r\n            if (node.isWall) continue;\r\n            visitedinorder.push(node);\r\n            visited.set(node);\r\n            console.log(node.row);\r\n            console.log(node.col);\r\n            if(node==endnode){\r\n                return visitedinorder;\r\n            }\r\n            graph.getAdjacents(node).forEach(adj => visitList.push(adj));\r\n            updateUnvisitedNeighbors(visitList,node,graph);\r\n            sortnodebydistance(visitList,endnode);\r\n        }\r\n    }\r\n    return visitedinorder;\r\n  }\r\n  \r\n  function creategraph(grid){\r\n    const graph=new Graph(1000);\r\n    for (let row = 0; row < 20; row++) {\r\n        for (let col = 0; col < 50; col++) {\r\n          graph.addVertex(grid[row][col]);\r\n        }\r\n    }\r\n    for (let row = 0; row < 20; row++) {\r\n        for (let col = 0; col < 50; col++) {\r\n            if((col+1<50)){\r\n                graph.addEdge(grid[row][col],grid[row][col+1]);\r\n            }\r\n            if((row+1)<20){\r\n                graph.addEdge(grid[row][col],grid[row+1][col]);\r\n            }\r\n            if((col-1)>=0){\r\n                graph.addEdge(grid[row][col],grid[row][col-1]);\r\n            }\r\n            if((row-1)>=0){\r\n                graph.addEdge(grid[row][col],grid[row-1][col]);\r\n            }         \r\n               \r\n        }\r\n      }\r\n    return graph;\r\n  }\r\n  \r\n  class Graph { \r\n    constructor(noOfVertices) { \r\n        this.noOfVertices = noOfVertices; \r\n        this.AdjList = new Map(); \r\n    }\r\n    addVertex(v) { \r\n    this.AdjList.set(v, []); \r\n    } \r\n    addEdge(v, w) { \r\n    this.AdjList.get(v).push(w);\r\n    }\r\n    getAdjacents(node) {\r\n        return this.AdjList.get(node);\r\n    }\r\n    \r\n    isAdjacent(node,neighbor) {\r\n        var temp=0;\r\n        this.AdjList.get(node).forEach(adj => {\r\n            if(adj === neighbor){\r\n                temp++;\r\n            }\r\n        })\r\n        if(temp==0){\r\n            return false;\r\n        }else{\r\n            return true;\r\n        }\r\n    }\r\n  } \r\n  \r\n  function sortnodebydistance(unvisitednodes,finishNode){\r\n    unvisitednodes.sort((nodeA, nodeB) => (nodeA.distance + manhattendistance(nodeA,finishNode)) - (nodeB.distance + manhattendistance(nodeB,finishNode)));\r\n  }\r\n  \r\n  function updateUnvisitedNeighbors(visitList,node,graph) {\r\n    for (const neighbor of visitList) {\r\n        if((neighbor.previousNode !== null && neighbor.distance <= node.distance)  || !graph.isAdjacent(node,neighbor) ){\r\n            continue;\r\n        }else if(graph.isAdjacent(node,neighbor)){\r\n            neighbor.distance = node.distance + neighbor.weight + 1;\r\n            neighbor.previousNode = node;\r\n        }\r\n    }\r\n  }\r\n  \r\n  export function getNodesInShortestPathOrderAStar(finishNode,startNode) {\r\n    const nodesInShortestPathOrder = [];\r\n    let currentNode = finishNode;\r\n    while (currentNode !== null) {\r\n      nodesInShortestPathOrder.unshift(currentNode);\r\n      console.log(currentNode.row);\r\n      console.log(currentNode.col);\r\n      currentNode = currentNode.previousNode;\r\n      if(currentNode===startNode){\r\n          console.log(currentNode.row);\r\n          console.log(currentNode.col);\r\n          break;\r\n      }\r\n    }\r\n    return nodesInShortestPathOrder;\r\n  }\r\n\r\n  function manhattendistance(node,finishnode){\r\n        var hn= (Math.abs(node.row - finishnode.row) +Math.abs(node.col - finishnode.col));\r\n        return hn;\r\n  }\r\n  ","C:\\React Projects\\new\\Visualization\\src\\models\\Node\\Node.jsx",["133"],"import React, {Component} from 'react';\r\n\r\nimport './Node.css';\r\n\r\nexport default class Node extends Component {\r\n  render() {\r\n    const {\r\n      col,\r\n      isFinish,\r\n      isStart,\r\n      isWall,\r\n      onMouseDown,\r\n      onMouseEnter,\r\n      onMouseUp,\r\n      row,\r\n      weight = 0,\r\n    } = this.props;\r\n    const extraClassName = isFinish\r\n      ? 'node-finish'\r\n      : isStart\r\n      ? 'node-start'\r\n      : isWall\r\n      ? 'node-wall'\r\n      : weight != 0\r\n      ? 'node-weight'\r\n      : '';\r\n\r\n    return (\r\n      <div\r\n        id={`node-${row}-${col}`}\r\n        className={`node ${extraClassName}`}\r\n        onMouseDown={() => onMouseDown(row, col)}\r\n        onMouseEnter={() => onMouseEnter(row, col)}\r\n        onMouseUp={() => onMouseUp()}></div>\r\n    );\r\n  }\r\n}\r\n",{"ruleId":"134","replacedBy":"135"},{"ruleId":"136","replacedBy":"137"},{"ruleId":"138","severity":1,"message":"139","line":13,"column":8,"nodeType":"140","messageId":"141","endLine":13,"endColumn":17},{"ruleId":"138","severity":1,"message":"142","line":27,"column":10,"nodeType":"140","messageId":"141","endLine":27,"endColumn":18},{"ruleId":"138","severity":1,"message":"143","line":28,"column":10,"nodeType":"140","messageId":"141","endLine":28,"endColumn":18},{"ruleId":"144","severity":1,"message":"145","line":102,"column":13,"nodeType":"146","messageId":"147","endLine":102,"endColumn":15},{"ruleId":"144","severity":1,"message":"145","line":102,"column":38,"nodeType":"146","messageId":"147","endLine":102,"endColumn":40},{"ruleId":"144","severity":1,"message":"145","line":102,"column":65,"nodeType":"146","messageId":"147","endLine":102,"endColumn":67},{"ruleId":"144","severity":1,"message":"145","line":102,"column":91,"nodeType":"146","messageId":"147","endLine":102,"endColumn":93},{"ruleId":"144","severity":1,"message":"145","line":116,"column":21,"nodeType":"146","messageId":"147","endLine":116,"endColumn":23},{"ruleId":"144","severity":1,"message":"145","line":116,"column":46,"nodeType":"146","messageId":"147","endLine":116,"endColumn":48},{"ruleId":"144","severity":1,"message":"145","line":116,"column":73,"nodeType":"146","messageId":"147","endLine":116,"endColumn":75},{"ruleId":"144","severity":1,"message":"145","line":116,"column":99,"nodeType":"146","messageId":"147","endLine":116,"endColumn":101},{"ruleId":"148","severity":1,"message":"149","line":134,"column":18,"nodeType":"150","messageId":"151","endLine":140,"endColumn":8},{"ruleId":"148","severity":1,"message":"149","line":146,"column":18,"nodeType":"150","messageId":"151","endLine":156,"endColumn":8},{"ruleId":"144","severity":1,"message":"145","line":166,"column":18,"nodeType":"146","messageId":"147","endLine":166,"endColumn":20},{"ruleId":"144","severity":1,"message":"145","line":170,"column":23,"nodeType":"146","messageId":"147","endLine":170,"endColumn":25},{"ruleId":"144","severity":1,"message":"145","line":174,"column":23,"nodeType":"146","messageId":"147","endLine":174,"endColumn":25},{"ruleId":"144","severity":1,"message":"145","line":177,"column":24,"nodeType":"146","messageId":"147","endLine":177,"endColumn":26},{"ruleId":"144","severity":1,"message":"145","line":219,"column":21,"nodeType":"146","messageId":"147","endLine":219,"endColumn":23},{"ruleId":"144","severity":1,"message":"145","line":230,"column":26,"nodeType":"146","messageId":"147","endLine":230,"endColumn":28},{"ruleId":"152","severity":1,"message":"153","line":232,"column":13,"nodeType":"140","messageId":"154","endLine":232,"endColumn":20},{"ruleId":"152","severity":1,"message":"155","line":233,"column":17,"nodeType":"140","messageId":"154","endLine":233,"endColumn":18},{"ruleId":"144","severity":1,"message":"145","line":241,"column":26,"nodeType":"146","messageId":"147","endLine":241,"endColumn":28},{"ruleId":"152","severity":1,"message":"153","line":245,"column":13,"nodeType":"140","messageId":"154","endLine":245,"endColumn":20},{"ruleId":"152","severity":1,"message":"155","line":246,"column":17,"nodeType":"140","messageId":"154","endLine":246,"endColumn":18},{"ruleId":"144","severity":1,"message":"145","line":254,"column":26,"nodeType":"146","messageId":"147","endLine":254,"endColumn":28},{"ruleId":"152","severity":1,"message":"153","line":256,"column":13,"nodeType":"140","messageId":"154","endLine":256,"endColumn":20},{"ruleId":"152","severity":1,"message":"155","line":257,"column":17,"nodeType":"140","messageId":"154","endLine":257,"endColumn":18},{"ruleId":"144","severity":1,"message":"145","line":265,"column":26,"nodeType":"146","messageId":"147","endLine":265,"endColumn":28},{"ruleId":"156","severity":1,"message":"157","line":317,"column":5,"nodeType":"158","endLine":317,"endColumn":20,"suggestions":"159"},{"ruleId":"144","severity":1,"message":"145","line":361,"column":69,"nodeType":"146","messageId":"147","endLine":361,"endColumn":71},{"ruleId":"144","severity":1,"message":"145","line":469,"column":28,"nodeType":"146","messageId":"147","endLine":469,"endColumn":30},{"ruleId":"144","severity":1,"message":"145","line":7,"column":18,"nodeType":"146","messageId":"147","endLine":7,"endColumn":20},{"ruleId":"144","severity":1,"message":"145","line":7,"column":43,"nodeType":"146","messageId":"147","endLine":7,"endColumn":45},{"ruleId":"144","severity":1,"message":"145","line":19,"column":18,"nodeType":"146","messageId":"147","endLine":19,"endColumn":20},{"ruleId":"144","severity":1,"message":"145","line":19,"column":43,"nodeType":"146","messageId":"147","endLine":19,"endColumn":45},{"ruleId":"144","severity":1,"message":"145","line":16,"column":18,"nodeType":"146","messageId":"147","endLine":16,"endColumn":20},{"ruleId":"144","severity":1,"message":"145","line":76,"column":14,"nodeType":"146","messageId":"147","endLine":76,"endColumn":16},{"ruleId":"144","severity":1,"message":"145","line":16,"column":26,"nodeType":"146","messageId":"147","endLine":16,"endColumn":28},{"ruleId":"144","severity":1,"message":"145","line":16,"column":51,"nodeType":"146","messageId":"147","endLine":16,"endColumn":53},{"ruleId":"144","severity":1,"message":"145","line":21,"column":30,"nodeType":"146","messageId":"147","endLine":21,"endColumn":32},{"ruleId":"144","severity":1,"message":"145","line":21,"column":55,"nodeType":"146","messageId":"147","endLine":21,"endColumn":57},{"ruleId":"144","severity":1,"message":"145","line":29,"column":34,"nodeType":"146","messageId":"147","endLine":29,"endColumn":36},{"ruleId":"144","severity":1,"message":"145","line":34,"column":29,"nodeType":"146","messageId":"147","endLine":34,"endColumn":31},{"ruleId":"152","severity":1,"message":"155","line":41,"column":13,"nodeType":"140","messageId":"154","endLine":41,"endColumn":14},{"ruleId":"152","severity":1,"message":"160","line":43,"column":17,"nodeType":"140","messageId":"154","endLine":43,"endColumn":18},{"ruleId":"144","severity":1,"message":"145","line":45,"column":26,"nodeType":"146","messageId":"147","endLine":45,"endColumn":28},{"ruleId":"144","severity":1,"message":"145","line":45,"column":51,"nodeType":"146","messageId":"147","endLine":45,"endColumn":53},{"ruleId":"152","severity":1,"message":"155","line":54,"column":13,"nodeType":"140","messageId":"154","endLine":54,"endColumn":14},{"ruleId":"152","severity":1,"message":"160","line":56,"column":17,"nodeType":"140","messageId":"154","endLine":56,"endColumn":18},{"ruleId":"144","severity":1,"message":"145","line":58,"column":26,"nodeType":"146","messageId":"147","endLine":58,"endColumn":28},{"ruleId":"144","severity":1,"message":"145","line":58,"column":51,"nodeType":"146","messageId":"147","endLine":58,"endColumn":53},{"ruleId":"144","severity":1,"message":"145","line":30,"column":22,"nodeType":"146","messageId":"147","endLine":30,"endColumn":24},{"ruleId":"144","severity":1,"message":"145","line":30,"column":44,"nodeType":"146","messageId":"147","endLine":30,"endColumn":46},{"ruleId":"144","severity":1,"message":"145","line":34,"column":27,"nodeType":"146","messageId":"147","endLine":34,"endColumn":29},{"ruleId":"144","severity":1,"message":"145","line":34,"column":50,"nodeType":"146","messageId":"147","endLine":34,"endColumn":52},{"ruleId":"144","severity":1,"message":"145","line":10,"column":21,"nodeType":"146","messageId":"147","endLine":10,"endColumn":23},{"ruleId":"144","severity":1,"message":"145","line":10,"column":43,"nodeType":"146","messageId":"147","endLine":10,"endColumn":45},{"ruleId":"144","severity":1,"message":"145","line":14,"column":26,"nodeType":"146","messageId":"147","endLine":14,"endColumn":28},{"ruleId":"144","severity":1,"message":"145","line":14,"column":49,"nodeType":"146","messageId":"147","endLine":14,"endColumn":51},{"ruleId":"138","severity":1,"message":"161","line":7,"column":9,"nodeType":"140","messageId":"141","endLine":7,"endColumn":14},{"ruleId":"144","severity":1,"message":"145","line":3,"column":17,"nodeType":"146","messageId":"147","endLine":3,"endColumn":19},{"ruleId":"144","severity":1,"message":"145","line":92,"column":13,"nodeType":"146","messageId":"147","endLine":92,"endColumn":15},{"ruleId":"144","severity":1,"message":"145","line":3,"column":17,"nodeType":"146","messageId":"147","endLine":3,"endColumn":19},{"ruleId":"144","severity":1,"message":"145","line":92,"column":13,"nodeType":"146","messageId":"147","endLine":92,"endColumn":15},{"ruleId":"144","severity":1,"message":"145","line":16,"column":20,"nodeType":"146","messageId":"147","endLine":16,"endColumn":22},{"ruleId":"144","severity":1,"message":"145","line":76,"column":16,"nodeType":"146","messageId":"147","endLine":76,"endColumn":18},{"ruleId":"144","severity":1,"message":"162","line":24,"column":16,"nodeType":"146","messageId":"147","endLine":24,"endColumn":18},"no-native-reassign",["163"],"no-negated-in-lhs",["164"],"no-unused-vars","'recursive' is defined but never used.","Identifier","unusedVar","'isActive' is assigned a value but never used.","'isPaused' is assigned a value but never used.","eqeqeq","Expected '===' and instead saw '=='.","BinaryExpression","unexpected","no-loop-func","Function declared in a loop contains unsafe references to variable(s) 'START_NODE_ROW', 'START_NODE_COL', 'FINISH_NODE_ROW', 'FINISH_NODE_COL'.","ArrowFunctionExpression","unsafeRefs","no-redeclare","'griddef' is already defined.","redeclared","'i' is already defined.","react-hooks/exhaustive-deps","React Hook useEffect has a missing dependency: 'demoMazeAlgorithm'. Either include it or remove the dependency array.","ArrayExpression",["165"],"'j' is already defined.","'grid1' is assigned a value but never used.","Expected '!==' and instead saw '!='.","no-global-assign","no-unsafe-negation",{"desc":"166","fix":"167"},"Update the dependencies array to be: [demoMazeAlgorithm, mazeAlgorithm]",{"range":"168","text":"169"},[11518,11533],"[demoMazeAlgorithm, mazeAlgorithm]"]