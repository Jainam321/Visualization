[{"C:\\Users\\kadam\\react\\Visualization\\src\\index.js":"1","C:\\Users\\kadam\\react\\Visualization\\src\\serviceWorker.js":"2","C:\\Users\\kadam\\react\\Visualization\\src\\App.js":"3","C:\\Users\\kadam\\react\\Visualization\\src\\visualizers\\PathfindingVisualizer.jsx":"4","C:\\Users\\kadam\\react\\Visualization\\src\\algorithms\\dijkstra.js":"5","C:\\Users\\kadam\\react\\Visualization\\src\\models\\Node\\Node.jsx":"6"},{"size":464,"mtime":1616930096223,"results":"7","hashOfConfig":"8"},{"size":5086,"mtime":1616930096242,"results":"9","hashOfConfig":"8"},{"size":281,"mtime":1616930096196,"results":"10","hashOfConfig":"8"},{"size":6650,"mtime":1616935995492,"results":"11","hashOfConfig":"8"},{"size":2147,"mtime":1616930156102,"results":"12","hashOfConfig":"8"},{"size":717,"mtime":1616930096237,"results":"13","hashOfConfig":"8"},{"filePath":"14","messages":"15","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"triyp6",{"filePath":"16","messages":"17","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"18","messages":"19","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"20","messages":"21","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"22"},{"filePath":"23","messages":"24","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"25","messages":"26","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"C:\\Users\\kadam\\react\\Visualization\\src\\index.js",[],"C:\\Users\\kadam\\react\\Visualization\\src\\serviceWorker.js",[],"C:\\Users\\kadam\\react\\Visualization\\src\\App.js",[],"C:\\Users\\kadam\\react\\Visualization\\src\\visualizers\\PathfindingVisualizer.jsx",["27","28"],"import React, {useEffect ,useState, useRef} from 'react';\r\nimport Node from '../models/Node/Node';\r\nimport {dijkstra, getNodesInShortestPathOrder} from '../algorithms/dijkstra';\r\nimport './PathfindingVisualizer.css'; \r\nimport {Nav, Navbar, Button, NavDropdown} from 'react-bootstrap';\r\nimport 'bootstrap/dist/css/bootstrap.min.css';\r\n\r\nconst START_NODE_ROW = 10;\r\nconst START_NODE_COL = 10;\r\nconst FINISH_NODE_ROW = 8;\r\nconst FINISH_NODE_COL = 39;\r\n\r\n\r\nconst PathfindingVisualizer = () => {\r\n  const [grid, setGrid] = useState([]);\r\n  const [mouseIsPressed, setMouseIsPressed] = useState(false);\r\n  const [timer, setTimer] = useState(0);\r\n  const [isActive, setIsActive] = useState(false);\r\n  const [isPaused, setIsPaused] = useState(false);\r\n  const [noOfCellVisited, setNoOfCellVisited] = useState(0);\r\n  const countRef = useRef(null)\r\n\r\n\r\n  const handleStart = () => {\r\n    setIsActive(true);\r\n    setIsPaused(true);\r\n    countRef.current = setInterval(() => {\r\n      setTimer((timer) => timer + 1);\r\n    }, 1000);\r\n  }\r\n\r\n  const handlePause = () => {\r\n    clearInterval(countRef.current);\r\n    setIsPaused(false);\r\n  }\r\n\r\n  const handleReset = () => {\r\n    clearInterval(countRef.current);\r\n    setIsActive(false);\r\n    setIsPaused(false);\r\n    setTimer(0);\r\n  }\r\n\r\n  const formatTime = () => {\r\n    const getSeconds = `0${(timer % 60)}`.slice(-2)\r\n    const minutes = `${Math.floor(timer / 60)}`\r\n    const getMinutes = `0${minutes % 60}`.slice(-2)\r\n    const getHours = `0${Math.floor(timer / 3600)}`.slice(-2)\r\n\r\n    return `${getHours} : ${getMinutes} : ${getSeconds}`\r\n  }\r\n\r\n  useEffect(()=>{\r\n    console.log('component mounted');\r\n    const grid = getInitialGrid();\r\n    setGrid(grid);\r\n  },[])\r\n\r\n  const handleMouseDown = (row, col) => {\r\n    const newGrid = getNewGridWithWallToggled(grid, row, col);\r\n    setGrid(newGrid);\r\n    setMouseIsPressed(true);\r\n  }\r\n\r\n  const handleMouseEnter = (row, col) => {\r\n    if (!mouseIsPressed) return;\r\n    const newGrid = getNewGridWithWallToggled(grid, row, col);\r\n    setGrid(newGrid);\r\n  }\r\n\r\n  const handleMouseUp = () => {\r\n    setMouseIsPressed(false);\r\n  }\r\n\r\n  const animateDijkstra = (visitedNodesInOrder, nodesInShortestPathOrder) => {\r\n    for (let i = 0; i <= visitedNodesInOrder.length; i++) {\r\n      if (i === visitedNodesInOrder.length) {\r\n        setTimeout(() => {\r\n          animateShortestPath(nodesInShortestPathOrder);\r\n        }, 10 * i);\r\n        return;\r\n      }\r\n      setTimeout(() => {\r\n        const node = visitedNodesInOrder[i];\r\n        document.getElementById(`node-${node.row}-${node.col}`).className =\r\n          'node node-visited';\r\n      }, 10 * i);\r\n    }\r\n  }\r\n\r\n  const animateShortestPath = (nodesInShortestPathOrder) =>  {\r\n    for (let i = 0; i < nodesInShortestPathOrder.length; i++) {\r\n      setTimeout(() => {\r\n        const node = nodesInShortestPathOrder[i];\r\n        document.getElementById(`node-${node.row}-${node.col}`).className =\r\n          'node node-shortest-path';\r\n      }, 50 * i);\r\n    }\r\n    handlePause();\r\n  }\r\n\r\n  const visualizeDijkstra = () => {\r\n    handleStart();\r\n    const startNode = grid[START_NODE_ROW][START_NODE_COL];\r\n    const finishNode = grid[FINISH_NODE_ROW][FINISH_NODE_COL];\r\n    const visitedNodesInOrder = dijkstra(grid, startNode, finishNode);\r\n    const nodesInShortestPathOrder = getNodesInShortestPathOrder(finishNode);\r\n    animateDijkstra(visitedNodesInOrder, nodesInShortestPathOrder);\r\n    setNoOfCellVisited(nodesInShortestPathOrder.length);\r\n  }\r\n\r\n  const clearBoard = () => {\r\n    handleReset();\r\n    setGrid(getInitialGrid());\r\n    setNoOfCellVisited(0);\r\n  }\r\n\r\n\r\n  return (\r\n    <>\r\n      <Navbar bg=\"light\" variant=\"light\">\r\n        <div className=\"container\">\r\n        <Navbar.Brand href=\"#home\">Path Visualization</Navbar.Brand>\r\n        <Nav className=\"mr-auto\">\r\n          <Navbar.Text>\r\n            <span className=\"pText\">Timer</span>\r\n            <span className=\"timeBox\">{formatTime()}</span>\r\n            <span className=\"pText\">No. of Cells Visited</span>\r\n            <span className=\"timeBox\">{noOfCellVisited}</span>\r\n          </Navbar.Text>\r\n          <NavDropdown title=\"Algorithms\" id=\"basic-nav-dropdown\">\r\n            <NavDropdown.Item href=\"\">Dijkstra</NavDropdown.Item>\r\n            <NavDropdown.Item href=\"\">**</NavDropdown.Item>\r\n            <NavDropdown.Item href=\"\">**</NavDropdown.Item>\r\n          </NavDropdown>\r\n        </Nav>\r\n        <div className=\"m\">\r\n          <span className=\"pBtn\">\r\n            <Button variant=\"primary\" onClick={() => visualizeDijkstra()}>Start</Button>\r\n          </span>\r\n          <span>\r\n            <Button variant=\"primary\" onClick={() => clearBoard()}>Clear Board</Button>\r\n          </span>\r\n        </div>\r\n        </div>        \r\n      </Navbar>\r\n      \r\n      <div className=\"grid\">\r\n        {grid.map((row, rowIdx) => {\r\n          return (\r\n            <div key={rowIdx}>\r\n              {row.map((node, nodeIdx) => {\r\n                const {row, col, isFinish, isStart, isWall} = node;\r\n                return (\r\n                  <Node\r\n                    key={nodeIdx}\r\n                    col={col}\r\n                    isFinish={isFinish}\r\n                    isStart={isStart}\r\n                    isWall={isWall}\r\n                    mouseIsPressed={mouseIsPressed}\r\n                    onMouseDown={(row, col) => handleMouseDown(row, col)}\r\n                    onMouseEnter={(row, col) =>\r\n                      handleMouseEnter(row, col)\r\n                    }\r\n                    onMouseUp={() => handleMouseUp()}\r\n                    row={row}></Node>\r\n                );\r\n              })}\r\n            </div>\r\n          );\r\n        })}\r\n      </div>\r\n    </>\r\n  );\r\n}\r\n\r\n\r\n\r\nconst getInitialGrid = () => {\r\n    const grid = [];\r\n    for (let row = 0; row < 20; row++) {\r\n      const currentRow = [];\r\n      for (let col = 0; col < 50; col++) {\r\n        currentRow.push(createNode(col, row));\r\n      }\r\n      grid.push(currentRow);\r\n    }\r\n    return grid;\r\n};\r\n\r\nconst createNode = (col, row) => {\r\n    return {\r\n        col,\r\n        row,\r\n        isStart: row === START_NODE_ROW && col === START_NODE_COL,\r\n        isFinish: row === FINISH_NODE_ROW && col === FINISH_NODE_COL,\r\n        distance: Infinity,\r\n        isVisited: false,\r\n        isWall: false,\r\n        previousNode: null,\r\n    };\r\n};\r\n\r\nconst getNewGridWithWallToggled = (grid, row, col) => {\r\n    const newGrid = grid.slice();\r\n    const node = newGrid[row][col];\r\n    const newNode = {\r\n        ...node,\r\n        isWall: !node.isWall,\r\n    };\r\n    newGrid[row][col] = newNode;\r\n    return newGrid;\r\n};\r\n  \r\n\r\nexport default PathfindingVisualizer;","C:\\Users\\kadam\\react\\Visualization\\src\\algorithms\\dijkstra.js",[],"C:\\Users\\kadam\\react\\Visualization\\src\\models\\Node\\Node.jsx",[],{"ruleId":"29","severity":1,"message":"30","line":18,"column":10,"nodeType":"31","messageId":"32","endLine":18,"endColumn":18},{"ruleId":"29","severity":1,"message":"33","line":19,"column":10,"nodeType":"31","messageId":"32","endLine":19,"endColumn":18},"no-unused-vars","'isActive' is assigned a value but never used.","Identifier","unusedVar","'isPaused' is assigned a value but never used."]