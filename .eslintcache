[{"/home/sourabh/Downloads/react/visualization/src/index.js":"1","/home/sourabh/Downloads/react/visualization/src/App.js":"2","/home/sourabh/Downloads/react/visualization/src/visualizers/PathfindingVisualizer.jsx":"3","/home/sourabh/Downloads/react/visualization/src/algorithms/dijkstra.js":"4","/home/sourabh/Downloads/react/visualization/src/models/Node/Node.jsx":"5","/home/sourabh/Downloads/react/visualization/src/algorithms/DFS.js":"6"},{"size":168,"mtime":1616949317524,"results":"7","hashOfConfig":"8"},{"size":268,"mtime":1616867199773,"results":"9","hashOfConfig":"8"},{"size":6579,"mtime":1616949317524,"results":"10","hashOfConfig":"8"},{"size":3217,"mtime":1616949317512,"results":"11","hashOfConfig":"8"},{"size":683,"mtime":1616734565024,"results":"12","hashOfConfig":"8"},{"size":3230,"mtime":1616949317512,"results":"13","hashOfConfig":"8"},{"filePath":"14","messages":"15","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"15hazi4",{"filePath":"16","messages":"17","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"18"},{"filePath":"19","messages":"20","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"21","usedDeprecatedRules":"18"},{"filePath":"22","messages":"23","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"24","messages":"25","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"18"},{"filePath":"26","messages":"27","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},"/home/sourabh/Downloads/react/visualization/src/index.js",[],"/home/sourabh/Downloads/react/visualization/src/App.js",[],["28","29"],"/home/sourabh/Downloads/react/visualization/src/visualizers/PathfindingVisualizer.jsx",["30","31"],"import React, {useEffect ,useState, useRef} from 'react';\nimport Node from '../models/Node/Node';\n// import dijkstra,{getNodesInShortestPathOrder} from '../algorithms/dijkstra';\n// import BFS,{getNodesInShortestPathOrder} from '../algorithms/BFS';\nimport DFS,{getNodesInShortestPathOrder} from '../algorithms/DFS';\nimport './PathfindingVisualizer.css'; \nimport {Nav, Navbar, Button, NavDropdown} from 'react-bootstrap';\nimport 'bootstrap/dist/css/bootstrap.min.css';\n\nconst START_NODE_ROW = 10;\nconst START_NODE_COL = 10;\nconst FINISH_NODE_ROW = 8;\nconst FINISH_NODE_COL = 39;\n\n\nconst PathfindingVisualizer = () => {\n  const [grid, setGrid] = useState([]);\n  const [mouseIsPressed, setMouseIsPressed] = useState(false);\n  const [timer, setTimer] = useState(0);\n  const [isActive, setIsActive] = useState(false);\n  const [isPaused, setIsPaused] = useState(false);\n  const [noOfCellVisited, setNoOfCellVisited] = useState(0);\n  const countRef = useRef(null)\n\n\n  const handleStart = () => {\n    setIsActive(true);\n    setIsPaused(true);\n    countRef.current = setInterval(() => {\n      setTimer((timer) => timer + 1);\n    }, 1000);\n  }\n\n  const handlePause = () => {\n    clearInterval(countRef.current);\n    setIsPaused(false);\n  }\n\n  const handleReset = () => {\n    clearInterval(countRef.current);\n    setIsActive(false);\n    setIsPaused(false);\n    setTimer(0);\n  }\n\n  const formatTime = () => {\n    const getSeconds = `0${(timer % 60)}`.slice(-2)\n    const minutes = `${Math.floor(timer / 60)}`\n    const getMinutes = `0${minutes % 60}`.slice(-2)\n    const getHours = `0${Math.floor(timer / 3600)}`.slice(-2)\n\n    return `${getHours} : ${getMinutes} : ${getSeconds}`\n  }\n\n  useEffect(()=>{\n    console.log('component mounted');\n    const grid = getInitialGrid();\n    setGrid(grid);\n  },[])\n\n  const handleMouseDown = (row, col) => {\n    const newGrid = getNewGridWithWallToggled(grid, row, col);\n    setGrid(newGrid);\n    setMouseIsPressed(true);\n  }\n\n  const handleMouseEnter = (row, col) => {\n    if (!mouseIsPressed) return;\n    const newGrid = getNewGridWithWallToggled(grid, row, col);\n    setGrid(newGrid);\n  }\n\n  const handleMouseUp = () => {\n    setMouseIsPressed(false);\n  }\n\n  const animateDijkstra = (visitedNodesInOrder, nodesInShortestPathOrder) => {\n    for (let i = 0; i <= visitedNodesInOrder.length; i++) {\n      if (i === visitedNodesInOrder.length) {\n        setTimeout(() => {\n          animateShortestPath(nodesInShortestPathOrder);\n        }, 10 * i);\n        return;\n      }\n      setTimeout(() => {\n        const node = visitedNodesInOrder[i];\n        document.getElementById(`node-${node.row}-${node.col}`).className =\n          'node node-visited';\n      }, 10 * i);\n    }\n  }\n\n  const animateShortestPath = (nodesInShortestPathOrder) =>  {\n    for (let i = 0; i < nodesInShortestPathOrder.length; i++) {\n      setTimeout(() => {\n        const node = nodesInShortestPathOrder[i];\n        document.getElementById(`node-${node.row}-${node.col}`).className =\n          'node node-shortest-path';\n      }, 50 * i);\n    }\n    handlePause();\n  }\n\n  const visualizeDijkstra = () => {\n    handleStart();\n    const startNode = grid[START_NODE_ROW][START_NODE_COL];\n    const finishNode = grid[FINISH_NODE_ROW][FINISH_NODE_COL];\n    const visitedNodesInOrder = DFS(grid, startNode, finishNode);\n    const nodesInShortestPathOrder = getNodesInShortestPathOrder(finishNode,startNode);\n    animateDijkstra(visitedNodesInOrder, nodesInShortestPathOrder);\n    setNoOfCellVisited(nodesInShortestPathOrder.length);\n  }\n\n  const clearBoard = () => {\n    handleReset();\n    setGrid(getInitialGrid());\n    setNoOfCellVisited(0);\n  }\n\n\n  return (\n    <>\n      <Navbar bg=\"light\" variant=\"light\">\n        <div className=\"container\">\n        <Navbar.Brand href=\"#home\">Path Visualization</Navbar.Brand>\n        <Nav className=\"mr-auto\">\n          <Navbar.Text>\n            <span className=\"pText\">Timer</span>\n            <span className=\"timeBox\">{formatTime()}</span>\n            <span className=\"pText\">No. of Cells Visited</span>\n            <span className=\"timeBox\">{noOfCellVisited}</span>\n          </Navbar.Text>\n          <NavDropdown title=\"Algorithms\" id=\"basic-nav-dropdown\">\n            <NavDropdown.Item href=\"\">Dijkstra</NavDropdown.Item>\n            <NavDropdown.Item href=\"\">**</NavDropdown.Item>\n            <NavDropdown.Item href=\"\">**</NavDropdown.Item>\n          </NavDropdown>\n        </Nav>\n        <div className=\"m\">\n          <span className=\"pBtn\">\n            <Button variant=\"primary\" onClick={() => visualizeDijkstra()}>Start</Button>\n          </span>\n          <span>\n            <Button variant=\"primary\" onClick={() => clearBoard()}>Clear Board</Button>\n          </span>\n        </div>\n        </div>        \n      </Navbar>\n      \n      <div className=\"grid\">\n        {grid.map((row, rowIdx) => {\n          return (\n            <div key={rowIdx}>\n              {row.map((node, nodeIdx) => {\n                const {row, col, isFinish, isStart, isWall} = node;\n                return (\n                  <Node\n                    key={nodeIdx}\n                    col={col}\n                    isFinish={isFinish}\n                    isStart={isStart}\n                    isWall={isWall}\n                    mouseIsPressed={mouseIsPressed}\n                    onMouseDown={(row, col) => handleMouseDown(row, col)}\n                    onMouseEnter={(row, col) =>\n                      handleMouseEnter(row, col)\n                    }\n                    onMouseUp={() => handleMouseUp()}\n                    row={row}></Node>\n                );\n              })}\n            </div>\n          );\n        })}\n      </div>\n    </>\n  );\n}\n\n\n\nconst getInitialGrid = () => {\n    const grid = [];\n    for (let row = 0; row < 20; row++) {\n      const currentRow = [];\n      for (let col = 0; col < 50; col++) {\n        currentRow.push(createNode(col, row));\n      }\n      grid.push(currentRow);\n    }\n    return grid;\n};\n\nconst createNode = (col, row) => {\n    return {\n        col,\n        row,\n        isStart: row === START_NODE_ROW && col === START_NODE_COL,\n        isFinish: row === FINISH_NODE_ROW && col === FINISH_NODE_COL,\n        distance: Infinity,\n        isVisited: false,\n        isWall: false,\n        previousNode: null,\n    };\n};\n\nconst getNewGridWithWallToggled = (grid, row, col) => {\n    const newGrid = grid.slice();\n    const node = newGrid[row][col];\n    const newNode = {\n        ...node,\n        isWall: !node.isWall,\n    };\n    newGrid[row][col] = newNode;\n    return newGrid;\n};\n  \n\nexport default PathfindingVisualizer;\n","/home/sourabh/Downloads/react/visualization/src/algorithms/dijkstra.js",[],"/home/sourabh/Downloads/react/visualization/src/models/Node/Node.jsx",[],"/home/sourabh/Downloads/react/visualization/src/algorithms/DFS.js",["32","33"],{"ruleId":"34","replacedBy":"35"},{"ruleId":"36","replacedBy":"37"},{"ruleId":"38","severity":1,"message":"39","line":18,"column":10,"nodeType":"40","messageId":"41","endLine":18,"endColumn":18},{"ruleId":"38","severity":1,"message":"42","line":19,"column":10,"nodeType":"40","messageId":"41","endLine":19,"endColumn":18},{"ruleId":"43","severity":1,"message":"44","line":3,"column":17,"nodeType":"45","messageId":"46","endLine":3,"endColumn":19},{"ruleId":"38","severity":1,"message":"47","line":104,"column":10,"nodeType":"40","messageId":"41","endLine":104,"endColumn":34},"no-native-reassign",["48"],"no-negated-in-lhs",["49"],"no-unused-vars","'isActive' is assigned a value but never used.","Identifier","unusedVar","'isPaused' is assigned a value but never used.","eqeqeq","Expected '===' and instead saw '=='.","BinaryExpression","unexpected","'updateUnvisitedNeighbors' is defined but never used.","no-global-assign","no-unsafe-negation"]