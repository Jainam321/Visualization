[{"/home/sourabh/Downloads/react/tmp/Visualization/src/index.js":"1","/home/sourabh/Downloads/react/tmp/Visualization/src/App.js":"2","/home/sourabh/Downloads/react/tmp/Visualization/src/visualizers/PathfindingVisualizer.jsx":"3","/home/sourabh/Downloads/react/tmp/Visualization/src/mazeAlgorithms/basicWeighted.js":"4","/home/sourabh/Downloads/react/tmp/Visualization/src/mazeAlgorithms/Simplestair.js":"5","/home/sourabh/Downloads/react/tmp/Visualization/src/mazeAlgorithms/verticaldiv.js":"6","/home/sourabh/Downloads/react/tmp/Visualization/src/mazeAlgorithms/recursive.js":"7","/home/sourabh/Downloads/react/tmp/Visualization/src/mazeAlgorithms/basicRandom.js":"8","/home/sourabh/Downloads/react/tmp/Visualization/src/mazeAlgorithms/horizontaldiv.js":"9","/home/sourabh/Downloads/react/tmp/Visualization/src/mazeAlgorithms/Snakemaze.js":"10","/home/sourabh/Downloads/react/tmp/Visualization/src/components/Card.js":"11","/home/sourabh/Downloads/react/tmp/Visualization/src/algorithms/BFS.js":"12","/home/sourabh/Downloads/react/tmp/Visualization/src/algorithms/dijkstra.js":"13","/home/sourabh/Downloads/react/tmp/Visualization/src/algorithms/DFS.js":"14","/home/sourabh/Downloads/react/tmp/Visualization/src/algorithms/Astar.js":"15","/home/sourabh/Downloads/react/tmp/Visualization/src/mazeAlgorithms/chanceMazeV.js":"16","/home/sourabh/Downloads/react/tmp/Visualization/src/mazeAlgorithms/chanceMazeH.js":"17","/home/sourabh/Downloads/react/tmp/Visualization/src/models/Node/Node.jsx":"18"},{"size":168,"mtime":1618029189295,"results":"19","hashOfConfig":"20"},{"size":268,"mtime":1618759943892,"results":"21","hashOfConfig":"20"},{"size":27484,"mtime":1618892487616,"results":"22","hashOfConfig":"20"},{"size":651,"mtime":1618412414227,"results":"23","hashOfConfig":"20"},{"size":597,"mtime":1618892487612,"results":"24","hashOfConfig":"20"},{"size":1402,"mtime":1618759900035,"results":"25","hashOfConfig":"20"},{"size":3216,"mtime":1618892487612,"results":"26","hashOfConfig":"20"},{"size":1813,"mtime":1618892487612,"results":"27","hashOfConfig":"20"},{"size":1412,"mtime":1618892487612,"results":"28","hashOfConfig":"20"},{"size":1651,"mtime":1618892487612,"results":"29","hashOfConfig":"20"},{"size":603,"mtime":1618892487588,"results":"30","hashOfConfig":"20"},{"size":3524,"mtime":1618412414227,"results":"31","hashOfConfig":"20"},{"size":3527,"mtime":1618412414227,"results":"32","hashOfConfig":"20"},{"size":3402,"mtime":1618412414227,"results":"33","hashOfConfig":"20"},{"size":3269,"mtime":1618412414223,"results":"34","hashOfConfig":"20"},{"size":2447,"mtime":1618892487612,"results":"35","hashOfConfig":"20"},{"size":2450,"mtime":1618892487612,"results":"36","hashOfConfig":"20"},{"size":743,"mtime":1618029189295,"results":"37","hashOfConfig":"20"},{"filePath":"38","messages":"39","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"40"},"dytndw",{"filePath":"41","messages":"42","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"40"},{"filePath":"43","messages":"44","errorCount":0,"warningCount":54,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"45","messages":"46","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"47","usedDeprecatedRules":"40"},{"filePath":"48","messages":"49","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"50","messages":"51","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"40"},{"filePath":"52","messages":"53","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"54","messages":"55","errorCount":0,"warningCount":6,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"56","messages":"57","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"58","messages":"59","errorCount":0,"warningCount":14,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"60","messages":"61","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"62","messages":"63","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"64","usedDeprecatedRules":"40"},{"filePath":"65","messages":"66","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"67","usedDeprecatedRules":"40"},{"filePath":"68","messages":"69","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"70","usedDeprecatedRules":"40"},{"filePath":"71","messages":"72","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"73","usedDeprecatedRules":"40"},{"filePath":"74","messages":"75","errorCount":0,"warningCount":17,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"76","messages":"77","errorCount":0,"warningCount":17,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"78","messages":"79","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"80","usedDeprecatedRules":"81"},"/home/sourabh/Downloads/react/tmp/Visualization/src/index.js",[],["82","83"],"/home/sourabh/Downloads/react/tmp/Visualization/src/App.js",[],"/home/sourabh/Downloads/react/tmp/Visualization/src/visualizers/PathfindingVisualizer.jsx",["84","85","86","87","88","89","90","91","92","93","94","95","96","97","98","99","100","101","102","103","104","105","106","107","108","109","110","111","112","113","114","115","116","117","118","119","120","121","122","123","124","125","126","127","128","129","130","131","132","133","134","135","136","137"],"/home/sourabh/Downloads/react/tmp/Visualization/src/mazeAlgorithms/basicWeighted.js",["138","139","140","141"],"function basicWeighted(grid, startNode, finishNode) {\n     var grid1 = []\n     for (var i = 0; i < 20; i += 3) {\n          for (var j = 0; j < 50; j += 3) {\n               var x = Math.floor((Math.random() * 10) + 1);\n               var col = Math.abs(i - x);\n               var row = Math.abs(j - x);\n               if (col == startNode.col && row == startNode.row) {\n                    continue;\n               }\n               else if (col == finishNode.col && row == finishNode.row) {\n                    continue;\n               }\n               grid1.push(grid[col][row]);\n          }\n     }\n     return grid1;\n}\n\n\nexport default basicWeighted;","/home/sourabh/Downloads/react/tmp/Visualization/src/mazeAlgorithms/Simplestair.js",["142","143","144","145"],"/home/sourabh/Downloads/react/tmp/Visualization/src/mazeAlgorithms/verticaldiv.js",[],"/home/sourabh/Downloads/react/tmp/Visualization/src/mazeAlgorithms/recursive.js",[],"/home/sourabh/Downloads/react/tmp/Visualization/src/mazeAlgorithms/basicRandom.js",["146","147","148","149","150","151"],"/home/sourabh/Downloads/react/tmp/Visualization/src/mazeAlgorithms/horizontaldiv.js",[],"/home/sourabh/Downloads/react/tmp/Visualization/src/mazeAlgorithms/Snakemaze.js",["152","153","154","155","156","157","158","159","160","161","162","163","164","165"],"/home/sourabh/Downloads/react/tmp/Visualization/src/components/Card.js",[],"/home/sourabh/Downloads/react/tmp/Visualization/src/algorithms/BFS.js",["166","167","168"],"export default function BFS(grid, startNode, finishNode) {\n    if (startNode == finishNode || !startNode || !finishNode) {\n        return false;\n    }\n    // console.log(\"in BFS\");\n    var count = 0;\n    startNode.distance = 0;\n    const visited = new Map();\n    const visitedinorder = [];\n    const visitList = [];\n    visitList.push(startNode)\n    const graph = creategraph(grid);\n    while (visitList.length !== 0) {\n        const node = visitList.shift();\n        if (node && !visited.has(node)) {\n            if (node.isWall) continue;\n            visitedinorder.push(node);\n            count++;\n            visited.set(node);\n            // console.log(\"visited\");\n            // console.log(node.row);\n            // console.log(node.col);\n            if (node === finishNode) {\n                // console.log(\"count\",count);\n                return visitedinorder;\n            }\n            graph.getAdjacents(node).forEach(adj => visitList.push(adj));\n            updateUnvisitedNeighbors(visitList, node, graph);\n        }\n    }\n    return visitedinorder;\n\n}\n\n\n\nfunction creategraph(grid) {\n    const graph = new Graph(1000);\n    for (let row = 0; row < 20; row++) {\n        for (let col = 0; col < 50; col++) {\n            graph.addVertex(grid[row][col]);\n        }\n    }\n    for (let row = 0; row < 20; row++) {\n        for (let col = 0; col < 50; col++) {\n            if ((col + 1 < 50)) {\n                graph.addEdge(grid[row][col], grid[row][col + 1]);\n            }\n            if ((col - 1 >= 0)) {\n                graph.addEdge(grid[row][col], grid[row][col - 1]);\n            }\n            if ((row - 1) >= 0) {\n                graph.addEdge(grid[row][col], grid[row - 1][col]);\n            }\n            if ((row + 1) < 20) {\n                graph.addEdge(grid[row][col], grid[row + 1][col]);\n            }\n        }\n    }\n    return graph;\n}\n\n\nclass Graph {\n    constructor(noOfVertices) {\n        this.noOfVertices = noOfVertices;\n        this.Adjlist = new Map();\n    }\n\n    addVertex(v) {\n        this.Adjlist.set(v, []);\n    }\n\n    addEdge(v, w) {\n        this.Adjlist.get(v).push(w);\n    }\n\n    getAdjacents(node) {\n        return this.Adjlist.get(node);\n    }\n\n    isAdjacent(node, neighbor) {\n        var temp = 0;\n        this.Adjlist.get(neighbor).forEach(x => {\n            if (x == node) {\n                temp++;\n            }\n        })\n        if (temp === 0) {\n            return false;\n        } else {\n            return true;\n        }\n    }\n}\n\nfunction updateUnvisitedNeighbors(visitList, node, graph) {\n    // console.log(\"neigbour\");\n    for (const neighbor of visitList) {\n        if (!graph.isAdjacent(node, neighbor) || neighbor.previousNode !== null) {\n            continue;\n        } else if (graph.isAdjacent(node, neighbor)) {\n            neighbor.distance = node.distance + neighbor.weight + 1;\n            neighbor.previousNode = node;\n        }\n    }\n}\n\nexport function getNodesInShortestPathOrderBFS(finishNode, startNode) {\n    // console.log(\"shortest Path\");\n    const nodesInShortestPathOrder = [];\n    let currentNode = finishNode;\n    while (currentNode !== null) {\n        nodesInShortestPathOrder.unshift(currentNode);\n        //   console.log(currentNode.row);\n        //   console.log(currentNode.col);\n        currentNode = currentNode.previousNode;\n        if (currentNode === startNode) {\n            //   console.log(currentNode.row);\n            //   console.log(currentNode.col);\n            break;\n        }\n    }\n    return nodesInShortestPathOrder;\n}\n","/home/sourabh/Downloads/react/tmp/Visualization/src/algorithms/dijkstra.js",["169","170"],"export default function dijkstra(grid, startnode, endnode) {\r\n    startnode.distance = 0;\r\n    const visited = new Map();\r\n    const visitedinorder = [];\r\n    const visitList = [];\r\n    visitList.push(startnode);\r\n    const graph = creategraph(grid);\r\n    while (visitList.length !== 0) {\r\n        const node = visitList.shift();\r\n        if (node && !visited.has(node)) {\r\n            if (node.isWall) continue;\r\n            visitedinorder.push(node);\r\n            visited.set(node);\r\n            //   console.log(node.row);\r\n            //   console.log(node.col);\r\n            if (node == endnode) {\r\n                return visitedinorder;\r\n            }\r\n            graph.getAdjacents(node).forEach(adj => visitList.push(adj));\r\n            updateUnvisitedNeighbors(visitList, node, graph);\r\n            sortnodebydistance(visitList);\r\n        }\r\n    }\r\n    return visitedinorder;\r\n}\r\n\r\nfunction creategraph(grid) {\r\n    const graph = new Graph(1000);\r\n    for (let row = 0; row < 20; row++) {\r\n        for (let col = 0; col < 50; col++) {\r\n            graph.addVertex(grid[row][col]);\r\n        }\r\n    }\r\n    for (let row = 0; row < 20; row++) {\r\n        for (let col = 0; col < 50; col++) {\r\n            if ((col + 1 < 50)) {\r\n                graph.addEdge(grid[row][col], grid[row][col + 1]);\r\n            }\r\n            if ((row + 1) < 20) {\r\n                graph.addEdge(grid[row][col], grid[row + 1][col]);\r\n            }\r\n            if ((col - 1) >= 0) {\r\n                graph.addEdge(grid[row][col], grid[row][col - 1]);\r\n            }\r\n            if ((row - 1) >= 0) {\r\n                graph.addEdge(grid[row][col], grid[row - 1][col]);\r\n            }\r\n\r\n        }\r\n    }\r\n    return graph;\r\n}\r\n\r\nclass Graph {\r\n    constructor(noOfVertices) {\r\n        this.noOfVertices = noOfVertices;\r\n        this.AdjList = new Map();\r\n    }\r\n    addVertex(v) {\r\n        this.AdjList.set(v, []);\r\n    }\r\n    addEdge(v, w) {\r\n        this.AdjList.get(v).push(w);\r\n    }\r\n    getAdjacents(node) {\r\n        return this.AdjList.get(node);\r\n    }\r\n\r\n    isAdjacent(node, neighbor) {\r\n        var temp = 0;\r\n        this.AdjList.get(node).forEach(adj => {\r\n            if (adj === neighbor) {\r\n                temp++;\r\n            }\r\n        })\r\n        if (temp == 0) {\r\n            return false;\r\n        } else {\r\n            return true;\r\n        }\r\n    }\r\n}\r\n\r\nfunction sortnodebydistance(unvisitednodes) {\r\n    unvisitednodes.sort((nodeA, nodeB) => nodeA.distance - nodeB.distance);\r\n}\r\n\r\nfunction updateUnvisitedNeighbors(visitList, node, graph) {\r\n    for (const neighbor of visitList) {\r\n        if ((neighbor.previousNode !== null && neighbor.distance <= node.distance) || !graph.isAdjacent(node, neighbor)) {\r\n            continue;\r\n        } else if (graph.isAdjacent(node, neighbor)) {\r\n            neighbor.distance = node.distance + neighbor.weight + 1;\r\n            neighbor.previousNode = node;\r\n        }\r\n    }\r\n}\r\n\r\nexport function getNodesInShortestPathOrderDijkstra(finishNode, startNode) {\r\n    const nodesInShortestPathOrder = [];\r\n    let currentNode = finishNode;\r\n    while (currentNode !== null) {\r\n        nodesInShortestPathOrder.unshift(currentNode);\r\n        // console.log(currentNode.row);\r\n        // console.log(currentNode.col);\r\n        currentNode = currentNode.previousNode;\r\n        if (currentNode === startNode) {\r\n            // console.log(currentNode.row);\r\n            // console.log(currentNode.col);\r\n            break;\r\n        }\r\n    }\r\n    return nodesInShortestPathOrder;\r\n}\r\n","/home/sourabh/Downloads/react/tmp/Visualization/src/algorithms/DFS.js",["171","172"],"export default function DFS(grid, startNode, finishNode) {\n    if (startNode == finishNode || !startNode || !finishNode) {\n        return false;\n    }\n    console.log(\"in DFS\");\n    var count = 0;\n    startNode.distance = 0;\n    const visited = new Map();\n    const visitedinorder = [];\n    const visitList = [];\n    visitList.push(startNode)\n    const graph = creategraph(grid);\n    while (visitList.length !== 0) {\n        const node = visitList.pop();\n        if (node && !visited.has(node)) {\n            if (node.isWall) continue;\n            visitedinorder.push(node);\n            count++;\n            visited.set(node);\n            // console.log(\"visited\");\n            // console.log(node.row);\n            // console.log(node.col);\n            if (node === finishNode) {\n                console.log(\"count\", count);\n                return visitedinorder;\n            }\n            graph.getAdjacents(node).forEach(adj => visitList.push(adj));\n            updateUnvisitedNeighbors(visitList, node, graph, visited);\n        }\n    }\n    return visitedinorder;\n\n}\n\n\n\nfunction creategraph(grid) {\n    const graph = new Graph(1000);\n    for (let row = 0; row < 20; row++) {\n        for (let col = 0; col < 50; col++) {\n            graph.addVertex(grid[row][col]);\n        }\n    }\n    for (let row = 0; row < 20; row++) {\n        for (let col = 0; col < 50; col++) {\n            if ((row + 1) < 20) {\n                graph.addEdge(grid[row][col], grid[row + 1][col]);\n            }\n            if ((col - 1 >= 0)) {\n                graph.addEdge(grid[row][col], grid[row][col - 1]);\n            }\n            if ((col + 1 < 50)) {\n                graph.addEdge(grid[row][col], grid[row][col + 1]);\n            }\n            if ((row - 1) >= 0) {\n                graph.addEdge(grid[row][col], grid[row - 1][col]);\n            }\n        }\n    }\n    return graph;\n}\n\n\nclass Graph {\n    constructor(noOfVertices) {\n        this.noOfVertices = noOfVertices;\n        this.Adjlist = new Map();\n    }\n\n    addVertex(v) {\n        this.Adjlist.set(v, []);\n    }\n\n    addEdge(v, w) {\n        this.Adjlist.get(v).push(w);\n    }\n\n    getAdjacents(node) {\n        return this.Adjlist.get(node);\n    }\n\n    isAdjacent(node, neighbor) {\n        var temp = 0;\n        this.Adjlist.get(neighbor).forEach(x => {\n            if (x == node) {\n                temp++;\n            }\n        })\n        if (temp === 0) {\n            return false;\n        } else {\n            return true;\n        }\n    }\n}\n\nfunction updateUnvisitedNeighbors(visitList, node, graph, visited) {\n    // console.log(\"neigbour\");\n    for (const neighbor of visitList) {\n        if (graph.isAdjacent(node, neighbor) && !visited.has(neighbor)) {\n            neighbor.distance = node.distance + neighbor.weight + 1;\n            neighbor.previousNode = node;\n        }\n    }\n}\n\nexport function getNodesInShortestPathOrderDFS(finishNode, startNode) {\n    // console.log(\"shortest Path\");\n    const nodesInShortestPathOrder = [];\n    let currentNode = finishNode;\n    while (currentNode !== null) {\n        nodesInShortestPathOrder.unshift(currentNode);\n        //   console.log(currentNode);\n        currentNode = currentNode.previousNode;\n        if (currentNode === startNode) {\n            //   console.log(currentNode.row);\n            //   console.log(currentNode.col);\n            break;\n        }\n    }\n    return nodesInShortestPathOrder;\n}\n","/home/sourabh/Downloads/react/tmp/Visualization/src/algorithms/Astar.js",["173","174"],"export default function AStar(grid, startnode, endnode) {\n  startnode.distance = 0;\n  const visited = new Map();\n  const visitedinorder = [];\n  const visitList = [];\n  visitList.push(startnode);\n  const graph = creategraph(grid);\n  while (visitList.length !== 0) {\n    const node = visitList.shift();\n    if (node && !visited.has(node)) {\n      if (node.isWall) continue;\n      visitedinorder.push(node);\n      visited.set(node);\n      // console.log(node.row);\n      // console.log(node.col);\n      if (node == endnode) {\n        return visitedinorder;\n      }\n      graph.getAdjacents(node).forEach(adj => visitList.push(adj));\n      updateUnvisitedNeighbors(visitList, node, graph);\n      sortnodebydistance(visitList, endnode);\n    }\n  }\n  return visitedinorder;\n}\n\nfunction creategraph(grid) {\n  const graph = new Graph(1000);\n  for (let row = 0; row < 20; row++) {\n    for (let col = 0; col < 50; col++) {\n      graph.addVertex(grid[row][col]);\n    }\n  }\n  for (let row = 0; row < 20; row++) {\n    for (let col = 0; col < 50; col++) {\n      if ((col + 1 < 50)) {\n        graph.addEdge(grid[row][col], grid[row][col + 1]);\n      }\n      if ((row + 1) < 20) {\n        graph.addEdge(grid[row][col], grid[row + 1][col]);\n      }\n      if ((col - 1) >= 0) {\n        graph.addEdge(grid[row][col], grid[row][col - 1]);\n      }\n      if ((row - 1) >= 0) {\n        graph.addEdge(grid[row][col], grid[row - 1][col]);\n      }\n\n    }\n  }\n  return graph;\n}\n\nclass Graph {\n  constructor(noOfVertices) {\n    this.noOfVertices = noOfVertices;\n    this.AdjList = new Map();\n  }\n  addVertex(v) {\n    this.AdjList.set(v, []);\n  }\n  addEdge(v, w) {\n    this.AdjList.get(v).push(w);\n  }\n  getAdjacents(node) {\n    return this.AdjList.get(node);\n  }\n\n  isAdjacent(node, neighbor) {\n    var temp = 0;\n    this.AdjList.get(node).forEach(adj => {\n      if (adj === neighbor) {\n        temp++;\n      }\n    })\n    if (temp == 0) {\n      return false;\n    } else {\n      return true;\n    }\n  }\n}\n\nfunction sortnodebydistance(unvisitednodes, finishNode) {\n  unvisitednodes.sort((nodeA, nodeB) => (nodeA.distance + manhattendistance(nodeA, finishNode)) - (nodeB.distance + manhattendistance(nodeB, finishNode)));\n}\n\nfunction updateUnvisitedNeighbors(visitList, node, graph) {\n  for (const neighbor of visitList) {\n    if ((neighbor.previousNode !== null && neighbor.distance <= node.distance) || !graph.isAdjacent(node, neighbor)) {\n      continue;\n    } else if (graph.isAdjacent(node, neighbor)) {\n      neighbor.distance = node.distance + neighbor.weight + 1;\n      neighbor.previousNode = node;\n    }\n  }\n}\n\nexport function getNodesInShortestPathOrderAStar(finishNode, startNode) {\n  const nodesInShortestPathOrder = [];\n  let currentNode = finishNode;\n  while (currentNode !== null) {\n    nodesInShortestPathOrder.unshift(currentNode);\n    //   console.log(currentNode.row);\n    //   console.log(currentNode.col);\n    currentNode = currentNode.previousNode;\n    if (currentNode === startNode) {\n      //   console.log(currentNode.row);\n      //   console.log(currentNode.col);\n      break;\n    }\n  }\n  return nodesInShortestPathOrder;\n}\n\nfunction manhattendistance(node, finishnode) {\n  var hn = (Math.abs(node.row - finishnode.row) + Math.abs(node.col - finishnode.col));\n  return hn;\n}\n","/home/sourabh/Downloads/react/tmp/Visualization/src/mazeAlgorithms/chanceMazeV.js",["175","176","177","178","179","180","181","182","183","184","185","186","187","188","189","190","191"],"/home/sourabh/Downloads/react/tmp/Visualization/src/mazeAlgorithms/chanceMazeH.js",["192","193","194","195","196","197","198","199","200","201","202","203","204","205","206","207","208"],"/home/sourabh/Downloads/react/tmp/Visualization/src/models/Node/Node.jsx",["209"],"import React, {Component} from 'react';\n\nimport './Node.css';\n\nexport default class Node extends Component {\n  render() {\n    const {\n      col,\n      isFinish,\n      isStart,\n      isWall,\n      onMouseDown,\n      onMouseEnter,\n      onMouseUp,\n      row,\n      weight = 0,\n    } = this.props;\n    const extraClassName = isFinish\n      ? 'node-finish'\n      : isStart\n      ? 'node-start'\n      : isWall\n      ? 'node-wall'\n      : weight != 0\n      ? 'node-weight'\n      : '';\n\n    return (\n      <div\n        id={`node-${row}-${col}`}\n        className={`node ${extraClassName}`}\n        onMouseDown={() => onMouseDown(row, col)}\n        onMouseEnter={() => onMouseEnter(row, col)}\n        onMouseUp={() => onMouseUp()}></div>\n    );\n  }\n}\n",["210","211"],{"ruleId":"212","replacedBy":"213"},{"ruleId":"214","replacedBy":"215"},{"ruleId":"216","severity":1,"message":"217","line":2,"column":10,"nodeType":"218","messageId":"219","endLine":2,"endColumn":18},{"ruleId":"216","severity":1,"message":"220","line":35,"column":10,"nodeType":"218","messageId":"219","endLine":35,"endColumn":18},{"ruleId":"216","severity":1,"message":"221","line":36,"column":10,"nodeType":"218","messageId":"219","endLine":36,"endColumn":18},{"ruleId":"222","severity":1,"message":"223","line":118,"column":13,"nodeType":"224","messageId":"225","endLine":118,"endColumn":15},{"ruleId":"222","severity":1,"message":"223","line":118,"column":38,"nodeType":"224","messageId":"225","endLine":118,"endColumn":40},{"ruleId":"222","severity":1,"message":"223","line":122,"column":20,"nodeType":"224","messageId":"225","endLine":122,"endColumn":22},{"ruleId":"222","severity":1,"message":"223","line":122,"column":46,"nodeType":"224","messageId":"225","endLine":122,"endColumn":48},{"ruleId":"222","severity":1,"message":"223","line":138,"column":23,"nodeType":"224","messageId":"225","endLine":138,"endColumn":25},{"ruleId":"222","severity":1,"message":"223","line":138,"column":48,"nodeType":"224","messageId":"225","endLine":138,"endColumn":50},{"ruleId":"222","severity":1,"message":"223","line":138,"column":75,"nodeType":"224","messageId":"225","endLine":138,"endColumn":77},{"ruleId":"222","severity":1,"message":"223","line":138,"column":101,"nodeType":"224","messageId":"225","endLine":138,"endColumn":103},{"ruleId":"226","severity":1,"message":"227","line":158,"column":18,"nodeType":"228","messageId":"229","endLine":164,"endColumn":8},{"ruleId":"226","severity":1,"message":"227","line":170,"column":18,"nodeType":"228","messageId":"229","endLine":180,"endColumn":8},{"ruleId":"222","severity":1,"message":"223","line":245,"column":19,"nodeType":"224","messageId":"225","endLine":245,"endColumn":21},{"ruleId":"222","severity":1,"message":"223","line":252,"column":24,"nodeType":"224","messageId":"225","endLine":252,"endColumn":26},{"ruleId":"230","severity":1,"message":"231","line":255,"column":11,"nodeType":"218","messageId":"232","endLine":255,"endColumn":17},{"ruleId":"222","severity":1,"message":"223","line":259,"column":24,"nodeType":"224","messageId":"225","endLine":259,"endColumn":26},{"ruleId":"230","severity":1,"message":"231","line":262,"column":11,"nodeType":"218","messageId":"232","endLine":262,"endColumn":17},{"ruleId":"222","severity":1,"message":"223","line":265,"column":26,"nodeType":"224","messageId":"225","endLine":265,"endColumn":28},{"ruleId":"230","severity":1,"message":"231","line":272,"column":11,"nodeType":"218","messageId":"232","endLine":272,"endColumn":17},{"ruleId":"222","severity":1,"message":"223","line":298,"column":23,"nodeType":"224","messageId":"225","endLine":298,"endColumn":25},{"ruleId":"222","severity":1,"message":"223","line":307,"column":28,"nodeType":"224","messageId":"225","endLine":307,"endColumn":30},{"ruleId":"230","severity":1,"message":"233","line":308,"column":11,"nodeType":"218","messageId":"232","endLine":308,"endColumn":18},{"ruleId":"230","severity":1,"message":"234","line":309,"column":16,"nodeType":"218","messageId":"232","endLine":309,"endColumn":17},{"ruleId":"222","severity":1,"message":"223","line":316,"column":28,"nodeType":"224","messageId":"225","endLine":316,"endColumn":30},{"ruleId":"230","severity":1,"message":"233","line":319,"column":11,"nodeType":"218","messageId":"232","endLine":319,"endColumn":18},{"ruleId":"230","severity":1,"message":"234","line":320,"column":16,"nodeType":"218","messageId":"232","endLine":320,"endColumn":17},{"ruleId":"222","severity":1,"message":"223","line":327,"column":28,"nodeType":"224","messageId":"225","endLine":327,"endColumn":30},{"ruleId":"230","severity":1,"message":"233","line":328,"column":11,"nodeType":"218","messageId":"232","endLine":328,"endColumn":18},{"ruleId":"230","severity":1,"message":"234","line":329,"column":16,"nodeType":"218","messageId":"232","endLine":329,"endColumn":17},{"ruleId":"222","severity":1,"message":"223","line":336,"column":28,"nodeType":"224","messageId":"225","endLine":336,"endColumn":30},{"ruleId":"230","severity":1,"message":"233","line":337,"column":11,"nodeType":"218","messageId":"232","endLine":337,"endColumn":18},{"ruleId":"222","severity":1,"message":"223","line":340,"column":17,"nodeType":"224","messageId":"225","endLine":340,"endColumn":19},{"ruleId":"222","severity":1,"message":"223","line":340,"column":27,"nodeType":"224","messageId":"225","endLine":340,"endColumn":29},{"ruleId":"222","severity":1,"message":"223","line":340,"column":38,"nodeType":"224","messageId":"225","endLine":340,"endColumn":40},{"ruleId":"222","severity":1,"message":"223","line":340,"column":48,"nodeType":"224","messageId":"225","endLine":340,"endColumn":50},{"ruleId":"222","severity":1,"message":"235","line":348,"column":97,"nodeType":"224","messageId":"225","endLine":348,"endColumn":99},{"ruleId":"222","severity":1,"message":"223","line":354,"column":30,"nodeType":"224","messageId":"225","endLine":354,"endColumn":32},{"ruleId":"230","severity":1,"message":"233","line":355,"column":11,"nodeType":"218","messageId":"232","endLine":355,"endColumn":18},{"ruleId":"230","severity":1,"message":"234","line":356,"column":16,"nodeType":"218","messageId":"232","endLine":356,"endColumn":17},{"ruleId":"222","severity":1,"message":"223","line":362,"column":28,"nodeType":"224","messageId":"225","endLine":362,"endColumn":30},{"ruleId":"230","severity":1,"message":"233","line":363,"column":11,"nodeType":"218","messageId":"232","endLine":363,"endColumn":18},{"ruleId":"230","severity":1,"message":"234","line":364,"column":16,"nodeType":"218","messageId":"232","endLine":364,"endColumn":17},{"ruleId":"222","severity":1,"message":"223","line":371,"column":28,"nodeType":"224","messageId":"225","endLine":371,"endColumn":30},{"ruleId":"230","severity":1,"message":"233","line":372,"column":11,"nodeType":"218","messageId":"232","endLine":372,"endColumn":18},{"ruleId":"230","severity":1,"message":"234","line":373,"column":16,"nodeType":"218","messageId":"232","endLine":373,"endColumn":17},{"ruleId":"222","severity":1,"message":"223","line":380,"column":28,"nodeType":"224","messageId":"225","endLine":380,"endColumn":30},{"ruleId":"230","severity":1,"message":"233","line":381,"column":11,"nodeType":"218","messageId":"232","endLine":381,"endColumn":18},{"ruleId":"230","severity":1,"message":"234","line":382,"column":16,"nodeType":"218","messageId":"232","endLine":382,"endColumn":17},{"ruleId":"222","severity":1,"message":"223","line":395,"column":23,"nodeType":"224","messageId":"225","endLine":395,"endColumn":25},{"ruleId":"236","severity":1,"message":"237","line":492,"column":6,"nodeType":"238","endLine":492,"endColumn":21,"suggestions":"239"},{"ruleId":"222","severity":1,"message":"223","line":548,"column":73,"nodeType":"224","messageId":"225","endLine":548,"endColumn":75},{"ruleId":"222","severity":1,"message":"235","line":617,"column":28,"nodeType":"224","messageId":"225","endLine":617,"endColumn":30},{"ruleId":"222","severity":1,"message":"223","line":695,"column":25,"nodeType":"224","messageId":"225","endLine":695,"endColumn":27},{"ruleId":"222","severity":1,"message":"223","line":8,"column":24,"nodeType":"224","messageId":"225","endLine":8,"endColumn":26},{"ruleId":"222","severity":1,"message":"223","line":8,"column":48,"nodeType":"224","messageId":"225","endLine":8,"endColumn":50},{"ruleId":"222","severity":1,"message":"223","line":11,"column":29,"nodeType":"224","messageId":"225","endLine":11,"endColumn":31},{"ruleId":"222","severity":1,"message":"223","line":11,"column":54,"nodeType":"224","messageId":"225","endLine":11,"endColumn":56},{"ruleId":"222","severity":1,"message":"223","line":6,"column":20,"nodeType":"224","messageId":"225","endLine":6,"endColumn":22},{"ruleId":"222","severity":1,"message":"223","line":6,"column":47,"nodeType":"224","messageId":"225","endLine":6,"endColumn":49},{"ruleId":"222","severity":1,"message":"223","line":18,"column":20,"nodeType":"224","messageId":"225","endLine":18,"endColumn":22},{"ruleId":"222","severity":1,"message":"223","line":18,"column":47,"nodeType":"224","messageId":"225","endLine":18,"endColumn":49},{"ruleId":"222","severity":1,"message":"223","line":28,"column":24,"nodeType":"224","messageId":"225","endLine":28,"endColumn":26},{"ruleId":"222","severity":1,"message":"223","line":28,"column":48,"nodeType":"224","messageId":"225","endLine":28,"endColumn":50},{"ruleId":"222","severity":1,"message":"223","line":31,"column":29,"nodeType":"224","messageId":"225","endLine":31,"endColumn":31},{"ruleId":"222","severity":1,"message":"223","line":31,"column":54,"nodeType":"224","messageId":"225","endLine":31,"endColumn":56},{"ruleId":"222","severity":1,"message":"223","line":37,"column":39,"nodeType":"224","messageId":"225","endLine":37,"endColumn":41},{"ruleId":"222","severity":1,"message":"223","line":41,"column":31,"nodeType":"224","messageId":"225","endLine":41,"endColumn":33},{"ruleId":"222","severity":1,"message":"223","line":12,"column":28,"nodeType":"224","messageId":"225","endLine":12,"endColumn":30},{"ruleId":"222","severity":1,"message":"223","line":12,"column":55,"nodeType":"224","messageId":"225","endLine":12,"endColumn":57},{"ruleId":"222","severity":1,"message":"223","line":16,"column":32,"nodeType":"224","messageId":"225","endLine":16,"endColumn":34},{"ruleId":"222","severity":1,"message":"223","line":16,"column":59,"nodeType":"224","messageId":"225","endLine":16,"endColumn":61},{"ruleId":"222","severity":1,"message":"223","line":22,"column":40,"nodeType":"224","messageId":"225","endLine":22,"endColumn":42},{"ruleId":"222","severity":1,"message":"223","line":26,"column":31,"nodeType":"224","messageId":"225","endLine":26,"endColumn":33},{"ruleId":"230","severity":1,"message":"234","line":33,"column":14,"nodeType":"218","messageId":"232","endLine":33,"endColumn":15},{"ruleId":"230","severity":1,"message":"240","line":34,"column":18,"nodeType":"218","messageId":"232","endLine":34,"endColumn":19},{"ruleId":"222","severity":1,"message":"223","line":35,"column":28,"nodeType":"224","messageId":"225","endLine":35,"endColumn":30},{"ruleId":"222","severity":1,"message":"223","line":35,"column":55,"nodeType":"224","messageId":"225","endLine":35,"endColumn":57},{"ruleId":"230","severity":1,"message":"234","line":43,"column":14,"nodeType":"218","messageId":"232","endLine":43,"endColumn":15},{"ruleId":"230","severity":1,"message":"240","line":44,"column":18,"nodeType":"218","messageId":"232","endLine":44,"endColumn":19},{"ruleId":"222","severity":1,"message":"223","line":45,"column":28,"nodeType":"224","messageId":"225","endLine":45,"endColumn":30},{"ruleId":"222","severity":1,"message":"223","line":45,"column":55,"nodeType":"224","messageId":"225","endLine":45,"endColumn":57},{"ruleId":"222","severity":1,"message":"223","line":2,"column":19,"nodeType":"224","messageId":"225","endLine":2,"endColumn":21},{"ruleId":"216","severity":1,"message":"241","line":18,"column":13,"nodeType":"218","messageId":"219","endLine":18,"endColumn":18},{"ruleId":"222","severity":1,"message":"223","line":85,"column":19,"nodeType":"224","messageId":"225","endLine":85,"endColumn":21},{"ruleId":"222","severity":1,"message":"223","line":16,"column":22,"nodeType":"224","messageId":"225","endLine":16,"endColumn":24},{"ruleId":"222","severity":1,"message":"223","line":76,"column":18,"nodeType":"224","messageId":"225","endLine":76,"endColumn":20},{"ruleId":"222","severity":1,"message":"223","line":2,"column":19,"nodeType":"224","messageId":"225","endLine":2,"endColumn":21},{"ruleId":"222","severity":1,"message":"223","line":85,"column":19,"nodeType":"224","messageId":"225","endLine":85,"endColumn":21},{"ruleId":"222","severity":1,"message":"223","line":16,"column":16,"nodeType":"224","messageId":"225","endLine":16,"endColumn":18},{"ruleId":"222","severity":1,"message":"223","line":76,"column":14,"nodeType":"224","messageId":"225","endLine":76,"endColumn":16},{"ruleId":"216","severity":1,"message":"242","line":5,"column":7,"nodeType":"218","messageId":"219","endLine":5,"endColumn":8},{"ruleId":"216","severity":1,"message":"243","line":6,"column":7,"nodeType":"218","messageId":"219","endLine":6,"endColumn":8},{"ruleId":"222","severity":1,"message":"235","line":16,"column":32,"nodeType":"224","messageId":"225","endLine":16,"endColumn":34},{"ruleId":"222","severity":1,"message":"235","line":16,"column":60,"nodeType":"224","messageId":"225","endLine":16,"endColumn":62},{"ruleId":"222","severity":1,"message":"223","line":23,"column":23,"nodeType":"224","messageId":"225","endLine":23,"endColumn":25},{"ruleId":"222","severity":1,"message":"223","line":23,"column":49,"nodeType":"224","messageId":"225","endLine":23,"endColumn":51},{"ruleId":"222","severity":1,"message":"223","line":23,"column":77,"nodeType":"224","messageId":"225","endLine":23,"endColumn":79},{"ruleId":"222","severity":1,"message":"223","line":32,"column":36,"nodeType":"224","messageId":"225","endLine":32,"endColumn":38},{"ruleId":"222","severity":1,"message":"223","line":36,"column":19,"nodeType":"224","messageId":"225","endLine":36,"endColumn":21},{"ruleId":"222","severity":1,"message":"235","line":37,"column":36,"nodeType":"224","messageId":"225","endLine":37,"endColumn":38},{"ruleId":"222","severity":1,"message":"235","line":37,"column":71,"nodeType":"224","messageId":"225","endLine":37,"endColumn":73},{"ruleId":"222","severity":1,"message":"223","line":54,"column":13,"nodeType":"224","messageId":"225","endLine":54,"endColumn":15},{"ruleId":"222","severity":1,"message":"223","line":54,"column":23,"nodeType":"224","messageId":"225","endLine":54,"endColumn":25},{"ruleId":"222","severity":1,"message":"223","line":54,"column":47,"nodeType":"224","messageId":"225","endLine":54,"endColumn":49},{"ruleId":"222","severity":1,"message":"223","line":54,"column":57,"nodeType":"224","messageId":"225","endLine":54,"endColumn":59},{"ruleId":"222","severity":1,"message":"223","line":55,"column":24,"nodeType":"224","messageId":"225","endLine":55,"endColumn":26},{"ruleId":"222","severity":1,"message":"223","line":55,"column":51,"nodeType":"224","messageId":"225","endLine":55,"endColumn":53},{"ruleId":"216","severity":1,"message":"242","line":5,"column":7,"nodeType":"218","messageId":"219","endLine":5,"endColumn":8},{"ruleId":"216","severity":1,"message":"243","line":6,"column":7,"nodeType":"218","messageId":"219","endLine":6,"endColumn":8},{"ruleId":"222","severity":1,"message":"235","line":16,"column":32,"nodeType":"224","messageId":"225","endLine":16,"endColumn":34},{"ruleId":"222","severity":1,"message":"235","line":16,"column":60,"nodeType":"224","messageId":"225","endLine":16,"endColumn":62},{"ruleId":"222","severity":1,"message":"223","line":23,"column":22,"nodeType":"224","messageId":"225","endLine":23,"endColumn":24},{"ruleId":"222","severity":1,"message":"223","line":23,"column":49,"nodeType":"224","messageId":"225","endLine":23,"endColumn":51},{"ruleId":"222","severity":1,"message":"223","line":23,"column":76,"nodeType":"224","messageId":"225","endLine":23,"endColumn":78},{"ruleId":"222","severity":1,"message":"223","line":32,"column":37,"nodeType":"224","messageId":"225","endLine":32,"endColumn":39},{"ruleId":"222","severity":1,"message":"223","line":36,"column":19,"nodeType":"224","messageId":"225","endLine":36,"endColumn":21},{"ruleId":"222","severity":1,"message":"235","line":37,"column":37,"nodeType":"224","messageId":"225","endLine":37,"endColumn":39},{"ruleId":"222","severity":1,"message":"235","line":37,"column":73,"nodeType":"224","messageId":"225","endLine":37,"endColumn":75},{"ruleId":"222","severity":1,"message":"223","line":54,"column":13,"nodeType":"224","messageId":"225","endLine":54,"endColumn":15},{"ruleId":"222","severity":1,"message":"223","line":54,"column":23,"nodeType":"224","messageId":"225","endLine":54,"endColumn":25},{"ruleId":"222","severity":1,"message":"223","line":54,"column":47,"nodeType":"224","messageId":"225","endLine":54,"endColumn":49},{"ruleId":"222","severity":1,"message":"223","line":54,"column":57,"nodeType":"224","messageId":"225","endLine":54,"endColumn":59},{"ruleId":"222","severity":1,"message":"223","line":55,"column":24,"nodeType":"224","messageId":"225","endLine":55,"endColumn":26},{"ruleId":"222","severity":1,"message":"223","line":55,"column":51,"nodeType":"224","messageId":"225","endLine":55,"endColumn":53},{"ruleId":"222","severity":1,"message":"235","line":24,"column":16,"nodeType":"224","messageId":"225","endLine":24,"endColumn":18},{"ruleId":"212","replacedBy":"244"},{"ruleId":"214","replacedBy":"245"},"no-native-reassign",["246"],"no-negated-in-lhs",["247"],"no-unused-vars","'Carousel' is defined but never used.","Identifier","unusedVar","'isActive' is assigned a value but never used.","'isPaused' is assigned a value but never used.","eqeqeq","Expected '===' and instead saw '=='.","BinaryExpression","unexpected","no-loop-func","Function declared in a loop contains unsafe references to variable(s) 'START_NODE_ROW', 'START_NODE_COL', 'FINISH_NODE_ROW', 'FINISH_NODE_COL'.","ArrowFunctionExpression","unsafeRefs","no-redeclare","'start2' is already defined.","redeclared","'griddef' is already defined.","'i' is already defined.","Expected '!==' and instead saw '!='.","react-hooks/exhaustive-deps","React Hook useEffect has a missing dependency: 'demoMazeAlgorithm'. Either include it or remove the dependency array.","ArrayExpression",["248"],"'j' is already defined.","'count' is assigned a value but never used.","'x' is assigned a value but never used.","'y' is assigned a value but never used.",["246"],["247"],"no-global-assign","no-unsafe-negation",{"desc":"249","fix":"250"},"Update the dependencies array to be: [demoMazeAlgorithm, mazeAlgorithm]",{"range":"251","text":"252"},[19174,19189],"[demoMazeAlgorithm, mazeAlgorithm]"]