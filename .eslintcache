[{"C:\\React Projects\\new\\Visualization\\src\\index.js":"1","C:\\React Projects\\new\\Visualization\\src\\App.js":"2","C:\\React Projects\\new\\Visualization\\src\\visualizers\\PathfindingVisualizer.jsx":"3","C:\\React Projects\\new\\Visualization\\src\\mazeAlgorithms\\Simplestair.js":"4","C:\\React Projects\\new\\Visualization\\src\\mazeAlgorithms\\recursive.js":"5","C:\\React Projects\\new\\Visualization\\src\\mazeAlgorithms\\basicRandom.js":"6","C:\\React Projects\\new\\Visualization\\src\\mazeAlgorithms\\basicWeighted.js":"7","C:\\React Projects\\new\\Visualization\\src\\mazeAlgorithms\\Snakemaze.js":"8","C:\\React Projects\\new\\Visualization\\src\\algorithms\\Astar.js":"9","C:\\React Projects\\new\\Visualization\\src\\algorithms\\DFS.js":"10","C:\\React Projects\\new\\Visualization\\src\\algorithms\\BFS.js":"11","C:\\React Projects\\new\\Visualization\\src\\algorithms\\dijkstra.js":"12","C:\\React Projects\\new\\Visualization\\src\\components\\Card.js":"13","C:\\React Projects\\new\\Visualization\\src\\models\\Node\\Node.jsx":"14"},{"size":174,"mtime":1617428000044,"results":"15","hashOfConfig":"16"},{"size":347,"mtime":1618127353547,"results":"17","hashOfConfig":"16"},{"size":19549,"mtime":1618205304937,"results":"18","hashOfConfig":"16"},{"size":622,"mtime":1618203015988,"results":"19","hashOfConfig":"16"},{"size":1604,"mtime":1618203016004,"results":"20","hashOfConfig":"16"},{"size":1395,"mtime":1618203016004,"results":"21","hashOfConfig":"16"},{"size":671,"mtime":1618203016004,"results":"22","hashOfConfig":"16"},{"size":1702,"mtime":1618203016004,"results":"23","hashOfConfig":"16"},{"size":3388,"mtime":1618203015980,"results":"24","hashOfConfig":"16"},{"size":3524,"mtime":1618203015980,"results":"25","hashOfConfig":"16"},{"size":3649,"mtime":1618203015980,"results":"26","hashOfConfig":"16"},{"size":3527,"mtime":1618203015988,"results":"27","hashOfConfig":"16"},{"size":614,"mtime":1618203015988,"results":"28","hashOfConfig":"16"},{"size":780,"mtime":1617428000052,"results":"29","hashOfConfig":"16"},{"filePath":"30","messages":"31","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"32"},"h3v5v8",{"filePath":"33","messages":"34","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"32"},{"filePath":"35","messages":"36","errorCount":0,"warningCount":36,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"37","messages":"38","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"39","usedDeprecatedRules":"32"},{"filePath":"40","messages":"41","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"42","usedDeprecatedRules":"32"},{"filePath":"43","messages":"44","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"45","usedDeprecatedRules":"32"},{"filePath":"46","messages":"47","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"48","usedDeprecatedRules":"32"},{"filePath":"49","messages":"50","errorCount":0,"warningCount":14,"fixableErrorCount":0,"fixableWarningCount":0,"source":"51","usedDeprecatedRules":"32"},{"filePath":"52","messages":"53","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"54","usedDeprecatedRules":"32"},{"filePath":"55","messages":"56","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"57","usedDeprecatedRules":"32"},{"filePath":"58","messages":"59","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"60","usedDeprecatedRules":"32"},{"filePath":"61","messages":"62","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"63","usedDeprecatedRules":"32"},{"filePath":"64","messages":"65","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"32"},{"filePath":"66","messages":"67","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"68","usedDeprecatedRules":"32"},"C:\\React Projects\\new\\Visualization\\src\\index.js",[],["69","70"],"C:\\React Projects\\new\\Visualization\\src\\App.js",[],"C:\\React Projects\\new\\Visualization\\src\\visualizers\\PathfindingVisualizer.jsx",["71","72","73","74","75","76","77","78","79","80","81","82","83","84","85","86","87","88","89","90","91","92","93","94","95","96","97","98","99","100","101","102","103","104","105","106"],"C:\\React Projects\\new\\Visualization\\src\\mazeAlgorithms\\Simplestair.js",["107","108","109","110"],"function Simplestair(grid, startNode, finishNode) {\r\n  var grid1 = [];\r\n  let x = grid.length;\r\n  let y = 0;\r\n  while (x < 2 * (grid.length) - 1 && y < grid.length - 4) {\r\n    if (grid[y][x] == startNode || grid[y][x] == finishNode) {\r\n      continue;\r\n    }\r\n    else {\r\n      grid1.push(grid[y][x]);\r\n    }\r\n    x++;\r\n    y++;\r\n  };\r\n  x = grid.length - 1;\r\n  y = 0;\r\n  while (x >= 0 && y < grid.length) {\r\n    if (grid[y][x] == startNode || grid[y][x] == finishNode) {\r\n      continue;\r\n    }\r\n    else {\r\n      grid1.push(grid[y][x]);\r\n    }\r\n    x--;\r\n    y++;\r\n  };\r\n  return grid1;\r\n}\r\n\r\nexport default Simplestair;","C:\\React Projects\\new\\Visualization\\src\\mazeAlgorithms\\recursive.js",["111"],"function recursive(grid, rowStart, rowEnd, colStart, colEnd, startNode, finishNode) {\r\n    if (rowEnd >= (grid.length) || colEnd >= grid.length || rowStart < 0 || colStart < 0) {\r\n        // console.log(\"Return with first attempt\");\r\n        return;\r\n    }\r\n    let grid1 = []\r\n    let possibleRows = [];\r\n    for (let number = rowStart; number <= rowEnd; number += 2) {\r\n        possibleRows.push(number);\r\n    }\r\n    let possibleCols = []\r\n    for (let number = colStart; number <= colEnd; number += 2) {\r\n        possibleCols.push(number);\r\n    }\r\n    var randomRowIndex = Math.ceil(Math.random() * possibleRows.length);\r\n    var randomColIndex = Math.ceil(Math.random() * possibleCols.length);\r\n    // console.log(\"randomRowIndex\", randomRowIndex);\r\n    // console.log(\"randomColIndex\", randomColIndex);\r\n    let currentRow = possibleRows[randomRowIndex];\r\n    let colRandom = possibleCols[randomColIndex];\r\n    if (currentRow != null || colRandom != null) {\r\n        // console.log(\"currentRow\", currentRow);\r\n        // console.log(\"colRandom\", colRandom);\r\n        // console.log(\"rowStart\", rowStart);\r\n        // console.log(\"rowEnd\", rowEnd);\r\n        // console.log(\"colStart\", colStart);\r\n        // console.log(\"colEnd\", colEnd);\r\n    }\r\n    // if((currentRow!=startNode.col && colRandom!=startNode.row) || (currentRow != finishNode.col && colRandom != finishNode.row))\r\n    // {\r\n    //     grid1.push(grid[colRandom][currentRow]);\r\n    // }\r\n    // console.log(grid1);\r\n    recursive(grid, rowStart, currentRow - 2, colStart, colEnd, startNode, finishNode);\r\n}\r\n\r\nexport default recursive;","C:\\React Projects\\new\\Visualization\\src\\mazeAlgorithms\\basicRandom.js",["112","113","114","115"],"function basicRandom(grid, startNode, finishNode) {\r\n     var grid1 = []\r\n     // let cIdY=grid.length[0]-10;\r\n     // for(let c=0 ;c<10;c++)\r\n     // {\r\n     //      let cIdXone= Math.floor(grid.length/2)-c;\r\n     //      let cIdXtwo = Math.floor(grid.length/2)+c;\r\n     //      // let cIdone = cIdY-cIdXone;\r\n     //      // let cIdtwo = cIdY-cIdXtwo;\r\n     //      console.log(cIdXone);\r\n     //      console.log(cIdXtwo);\r\n     //      // console.log((cIdY,cIdtwo));\r\n     //      if(cIdy>=20 || CIdXone>=50 || cIdXtwo>=50){\r\n     //           continue;\r\n     //      }\r\n     //      else{\r\n     //           grid1.push(grid[cIdY][cIdXone]);\r\n     //           grid1.push(grid[cIdY][cIdXtwo]);\r\n     //      }\r\n     //      // console.log(cIdone);\r\n     //      // console.log(cIdtwo);\r\n     // }\r\n     for (var i = 0; i < 20; i += 3) {\r\n          for (var j = 0; j < 50; j += 3) {\r\n               var x = Math.floor((Math.random() * 10) + 1);\r\n               var col = Math.abs(i - x);\r\n               var row = Math.abs(j - x);\r\n               if (col == startNode.col && row == startNode.row) {\r\n                    continue;\r\n               }\r\n               else if (col == finishNode.col && row == finishNode.row) {\r\n                    continue;\r\n               }\r\n               grid1.push(grid[col][row]);\r\n          }\r\n     }\r\n     return grid1;\r\n}\r\n\r\n\r\nexport default basicRandom;","C:\\React Projects\\new\\Visualization\\src\\mazeAlgorithms\\basicWeighted.js",["116","117","118","119"],"function basicWeighted(grid, startNode, finishNode) {\r\n     var grid1 = []\r\n     for (var i = 0; i < 20; i += 3) {\r\n          for (var j = 0; j < 50; j += 3) {\r\n               var x = Math.floor((Math.random() * 10) + 1);\r\n               var col = Math.abs(i - x);\r\n               var row = Math.abs(j - x);\r\n               if (col == startNode.col && row == startNode.row) {\r\n                    continue;\r\n               }\r\n               else if (col == finishNode.col && row == finishNode.row) {\r\n                    continue;\r\n               }\r\n               grid1.push(grid[col][row]);\r\n          }\r\n     }\r\n     return grid1;\r\n}\r\n\r\n\r\nexport default basicWeighted;","C:\\React Projects\\new\\Visualization\\src\\mazeAlgorithms\\Snakemaze.js",["120","121","122","123","124","125","126","127","128","129","130","131","132","133"],"function Snake(grid, startNode, finishNode) {\r\n    let grid1 = []\r\n    let nrequired = []\r\n    for (let k = 1; k < 10; k++) {\r\n        for (let j = 1; j < 20; j++) {\r\n            let x = Math.floor((Math.random() * 50) + 1);\r\n            nrequired.push(grid[j][x]);\r\n        }\r\n    }\r\n    for (var i = 1; i < 20; i += 2) {\r\n        for (var j = 0; j < 50; j++) {\r\n            if (grid[i][j] == startNode && grid[i][j] == finishNode) {\r\n                continue;\r\n            }\r\n            else {\r\n                if (grid[i][j] == startNode || grid[i][j] == finishNode) {\r\n                    continue;\r\n                }\r\n                else {\r\n                    let count = 1;\r\n                    for (let z = 0; z < nrequired.length; z++) {\r\n                        if (grid[i][j] == nrequired[z]) {\r\n                            count = 0;\r\n                        }\r\n                    }\r\n                    if (count == 1) {\r\n                        grid1.push(grid[i][j]);\r\n                    }\r\n                }\r\n            }\r\n        }\r\n    }\r\n    for (var i = 2; i < 20; i += 2) {\r\n        for (var j = 10; j < 30; j += 2) {\r\n            if (grid[i][j] == startNode || grid[i][j] == finishNode) {\r\n                continue;\r\n            }\r\n            else {\r\n                grid1.push(grid[i][j - i + 10]);\r\n            }\r\n        }\r\n    }\r\n    for (var i = 1; i < 19; i += 2) {\r\n        for (var j = 35; j < 50; j += 2) {\r\n            if (grid[i][j] == startNode || grid[i][j] == finishNode) {\r\n                continue;\r\n            }\r\n            else {\r\n                grid1.push(grid[i][j - i]);\r\n            }\r\n        }\r\n    }\r\n    return grid1;\r\n}\r\n\r\nexport default Snake;","C:\\React Projects\\new\\Visualization\\src\\algorithms\\Astar.js",["134","135"],"export default function AStar(grid, startnode, endnode) {\r\n  startnode.distance = 0;\r\n  const visited = new Map();\r\n  const visitedinorder = [];\r\n  const visitList = [];\r\n  visitList.push(startnode);\r\n  const graph = creategraph(grid);\r\n  while (visitList.length !== 0) {\r\n    const node = visitList.shift();\r\n    if (node && !visited.has(node)) {\r\n      if (node.isWall) continue;\r\n      visitedinorder.push(node);\r\n      visited.set(node);\r\n      // console.log(node.row);\r\n      // console.log(node.col);\r\n      if (node == endnode) {\r\n        return visitedinorder;\r\n      }\r\n      graph.getAdjacents(node).forEach(adj => visitList.push(adj));\r\n      updateUnvisitedNeighbors(visitList, node, graph);\r\n      sortnodebydistance(visitList, endnode);\r\n    }\r\n  }\r\n  return visitedinorder;\r\n}\r\n\r\nfunction creategraph(grid) {\r\n  const graph = new Graph(1000);\r\n  for (let row = 0; row < 20; row++) {\r\n    for (let col = 0; col < 50; col++) {\r\n      graph.addVertex(grid[row][col]);\r\n    }\r\n  }\r\n  for (let row = 0; row < 20; row++) {\r\n    for (let col = 0; col < 50; col++) {\r\n      if ((col + 1 < 50)) {\r\n        graph.addEdge(grid[row][col], grid[row][col + 1]);\r\n      }\r\n      if ((row + 1) < 20) {\r\n        graph.addEdge(grid[row][col], grid[row + 1][col]);\r\n      }\r\n      if ((col - 1) >= 0) {\r\n        graph.addEdge(grid[row][col], grid[row][col - 1]);\r\n      }\r\n      if ((row - 1) >= 0) {\r\n        graph.addEdge(grid[row][col], grid[row - 1][col]);\r\n      }\r\n\r\n    }\r\n  }\r\n  return graph;\r\n}\r\n\r\nclass Graph {\r\n  constructor(noOfVertices) {\r\n    this.noOfVertices = noOfVertices;\r\n    this.AdjList = new Map();\r\n  }\r\n  addVertex(v) {\r\n    this.AdjList.set(v, []);\r\n  }\r\n  addEdge(v, w) {\r\n    this.AdjList.get(v).push(w);\r\n  }\r\n  getAdjacents(node) {\r\n    return this.AdjList.get(node);\r\n  }\r\n\r\n  isAdjacent(node, neighbor) {\r\n    var temp = 0;\r\n    this.AdjList.get(node).forEach(adj => {\r\n      if (adj === neighbor) {\r\n        temp++;\r\n      }\r\n    })\r\n    if (temp == 0) {\r\n      return false;\r\n    } else {\r\n      return true;\r\n    }\r\n  }\r\n}\r\n\r\nfunction sortnodebydistance(unvisitednodes, finishNode) {\r\n  unvisitednodes.sort((nodeA, nodeB) => (nodeA.distance + manhattendistance(nodeA, finishNode)) - (nodeB.distance + manhattendistance(nodeB, finishNode)));\r\n}\r\n\r\nfunction updateUnvisitedNeighbors(visitList, node, graph) {\r\n  for (const neighbor of visitList) {\r\n    if ((neighbor.previousNode !== null && neighbor.distance <= node.distance) || !graph.isAdjacent(node, neighbor)) {\r\n      continue;\r\n    } else if (graph.isAdjacent(node, neighbor)) {\r\n      neighbor.distance = node.distance + neighbor.weight + 1;\r\n      neighbor.previousNode = node;\r\n    }\r\n  }\r\n}\r\n\r\nexport function getNodesInShortestPathOrderAStar(finishNode, startNode) {\r\n  const nodesInShortestPathOrder = [];\r\n  let currentNode = finishNode;\r\n  while (currentNode !== null) {\r\n    nodesInShortestPathOrder.unshift(currentNode);\r\n    //   console.log(currentNode.row);\r\n    //   console.log(currentNode.col);\r\n    currentNode = currentNode.previousNode;\r\n    if (currentNode === startNode) {\r\n      //   console.log(currentNode.row);\r\n      //   console.log(currentNode.col);\r\n      break;\r\n    }\r\n  }\r\n  return nodesInShortestPathOrder;\r\n}\r\n\r\nfunction manhattendistance(node, finishnode) {\r\n  var hn = (Math.abs(node.row - finishnode.row) + Math.abs(node.col - finishnode.col));\r\n  return hn;\r\n}\r\n","C:\\React Projects\\new\\Visualization\\src\\algorithms\\DFS.js",["136","137"],"export default function DFS(grid, startNode, finishNode) {\r\n    if (startNode == finishNode || !startNode || !finishNode) {\r\n        return false;\r\n    }\r\n    console.log(\"in DFS\");\r\n    var count = 0;\r\n    startNode.distance = 0;\r\n    const visited = new Map();\r\n    const visitedinorder = [];\r\n    const visitList = [];\r\n    visitList.push(startNode)\r\n    const graph = creategraph(grid);\r\n    while (visitList.length !== 0) {\r\n        const node = visitList.pop();\r\n        if (node && !visited.has(node)) {\r\n            if (node.isWall) continue;\r\n            visitedinorder.push(node);\r\n            count++;\r\n            visited.set(node);\r\n            // console.log(\"visited\");\r\n            // console.log(node.row);\r\n            // console.log(node.col);\r\n            if (node === finishNode) {\r\n                console.log(\"count\", count);\r\n                return visitedinorder;\r\n            }\r\n            graph.getAdjacents(node).forEach(adj => visitList.push(adj));\r\n            updateUnvisitedNeighbors(visitList, node, graph, visited);\r\n        }\r\n    }\r\n    return visitedinorder;\r\n\r\n}\r\n\r\n\r\n\r\nfunction creategraph(grid) {\r\n    const graph = new Graph(1000);\r\n    for (let row = 0; row < 20; row++) {\r\n        for (let col = 0; col < 50; col++) {\r\n            graph.addVertex(grid[row][col]);\r\n        }\r\n    }\r\n    for (let row = 0; row < 20; row++) {\r\n        for (let col = 0; col < 50; col++) {\r\n            if ((row + 1) < 20) {\r\n                graph.addEdge(grid[row][col], grid[row + 1][col]);\r\n            }\r\n            if ((col - 1 >= 0)) {\r\n                graph.addEdge(grid[row][col], grid[row][col - 1]);\r\n            }\r\n            if ((col + 1 < 50)) {\r\n                graph.addEdge(grid[row][col], grid[row][col + 1]);\r\n            }\r\n            if ((row - 1) >= 0) {\r\n                graph.addEdge(grid[row][col], grid[row - 1][col]);\r\n            }\r\n        }\r\n    }\r\n    return graph;\r\n}\r\n\r\n\r\nclass Graph {\r\n    constructor(noOfVertices) {\r\n        this.noOfVertices = noOfVertices;\r\n        this.Adjlist = new Map();\r\n    }\r\n\r\n    addVertex(v) {\r\n        this.Adjlist.set(v, []);\r\n    }\r\n\r\n    addEdge(v, w) {\r\n        this.Adjlist.get(v).push(w);\r\n    }\r\n\r\n    getAdjacents(node) {\r\n        return this.Adjlist.get(node);\r\n    }\r\n\r\n    isAdjacent(node, neighbor) {\r\n        var temp = 0;\r\n        this.Adjlist.get(neighbor).forEach(x => {\r\n            if (x == node) {\r\n                temp++;\r\n            }\r\n        })\r\n        if (temp === 0) {\r\n            return false;\r\n        } else {\r\n            return true;\r\n        }\r\n    }\r\n}\r\n\r\nfunction updateUnvisitedNeighbors(visitList, node, graph, visited) {\r\n    // console.log(\"neigbour\");\r\n    for (const neighbor of visitList) {\r\n        if (graph.isAdjacent(node, neighbor) && !visited.has(neighbor)) {\r\n            neighbor.distance = node.distance + neighbor.weight + 1;\r\n            neighbor.previousNode = node;\r\n        }\r\n    }\r\n}\r\n\r\nexport function getNodesInShortestPathOrderDFS(finishNode, startNode) {\r\n    // console.log(\"shortest Path\");\r\n    const nodesInShortestPathOrder = [];\r\n    let currentNode = finishNode;\r\n    while (currentNode !== null) {\r\n        nodesInShortestPathOrder.unshift(currentNode);\r\n        //   console.log(currentNode);\r\n        currentNode = currentNode.previousNode;\r\n        if (currentNode === startNode) {\r\n            //   console.log(currentNode.row);\r\n            //   console.log(currentNode.col);\r\n            break;\r\n        }\r\n    }\r\n    return nodesInShortestPathOrder;\r\n}\r\n","C:\\React Projects\\new\\Visualization\\src\\algorithms\\BFS.js",["138","139","140"],"export default function BFS(grid, startNode, finishNode) {\r\n    if (startNode == finishNode || !startNode || !finishNode) {\r\n        return false;\r\n    }\r\n    // console.log(\"in BFS\");\r\n    var count = 0;\r\n    startNode.distance = 0;\r\n    const visited = new Map();\r\n    const visitedinorder = [];\r\n    const visitList = [];\r\n    visitList.push(startNode)\r\n    const graph = creategraph(grid);\r\n    while (visitList.length !== 0) {\r\n        const node = visitList.shift();\r\n        if (node && !visited.has(node)) {\r\n            if (node.isWall) continue;\r\n            visitedinorder.push(node);\r\n            count++;\r\n            visited.set(node);\r\n            // console.log(\"visited\");\r\n            // console.log(node.row);\r\n            // console.log(node.col);\r\n            if (node === finishNode) {\r\n                // console.log(\"count\",count);\r\n                return visitedinorder;\r\n            }\r\n            graph.getAdjacents(node).forEach(adj => visitList.push(adj));\r\n            updateUnvisitedNeighbors(visitList, node, graph);\r\n        }\r\n    }\r\n    return visitedinorder;\r\n\r\n}\r\n\r\n\r\n\r\nfunction creategraph(grid) {\r\n    const graph = new Graph(1000);\r\n    for (let row = 0; row < 20; row++) {\r\n        for (let col = 0; col < 50; col++) {\r\n            graph.addVertex(grid[row][col]);\r\n        }\r\n    }\r\n    for (let row = 0; row < 20; row++) {\r\n        for (let col = 0; col < 50; col++) {\r\n            if ((col + 1 < 50)) {\r\n                graph.addEdge(grid[row][col], grid[row][col + 1]);\r\n            }\r\n            if ((col - 1 >= 0)) {\r\n                graph.addEdge(grid[row][col], grid[row][col - 1]);\r\n            }\r\n            if ((row - 1) >= 0) {\r\n                graph.addEdge(grid[row][col], grid[row - 1][col]);\r\n            }\r\n            if ((row + 1) < 20) {\r\n                graph.addEdge(grid[row][col], grid[row + 1][col]);\r\n            }\r\n        }\r\n    }\r\n    return graph;\r\n}\r\n\r\n\r\nclass Graph {\r\n    constructor(noOfVertices) {\r\n        this.noOfVertices = noOfVertices;\r\n        this.Adjlist = new Map();\r\n    }\r\n\r\n    addVertex(v) {\r\n        this.Adjlist.set(v, []);\r\n    }\r\n\r\n    addEdge(v, w) {\r\n        this.Adjlist.get(v).push(w);\r\n    }\r\n\r\n    getAdjacents(node) {\r\n        return this.Adjlist.get(node);\r\n    }\r\n\r\n    isAdjacent(node, neighbor) {\r\n        var temp = 0;\r\n        this.Adjlist.get(neighbor).forEach(x => {\r\n            if (x == node) {\r\n                temp++;\r\n            }\r\n        })\r\n        if (temp === 0) {\r\n            return false;\r\n        } else {\r\n            return true;\r\n        }\r\n    }\r\n}\r\n\r\nfunction updateUnvisitedNeighbors(visitList, node, graph) {\r\n    // console.log(\"neigbour\");\r\n    for (const neighbor of visitList) {\r\n        if (!graph.isAdjacent(node, neighbor) || neighbor.previousNode !== null) {\r\n            continue;\r\n        } else if (graph.isAdjacent(node, neighbor)) {\r\n            neighbor.distance = node.distance + neighbor.weight + 1;\r\n            neighbor.previousNode = node;\r\n        }\r\n    }\r\n}\r\n\r\nexport function getNodesInShortestPathOrderBFS(finishNode, startNode) {\r\n    // console.log(\"shortest Path\");\r\n    const nodesInShortestPathOrder = [];\r\n    let currentNode = finishNode;\r\n    while (currentNode !== null) {\r\n        nodesInShortestPathOrder.unshift(currentNode);\r\n        //   console.log(currentNode.row);\r\n        //   console.log(currentNode.col);\r\n        currentNode = currentNode.previousNode;\r\n        if (currentNode === startNode) {\r\n            //   console.log(currentNode.row);\r\n            //   console.log(currentNode.col);\r\n            break;\r\n        }\r\n    }\r\n    return nodesInShortestPathOrder;\r\n}\r\n","C:\\React Projects\\new\\Visualization\\src\\algorithms\\dijkstra.js",["141","142"],"export default function dijkstra(grid, startnode, endnode) {\r\n    startnode.distance = 0;\r\n    const visited = new Map();\r\n    const visitedinorder = [];\r\n    const visitList = [];\r\n    visitList.push(startnode);\r\n    const graph = creategraph(grid);\r\n    while (visitList.length !== 0) {\r\n        const node = visitList.shift();\r\n        if (node && !visited.has(node)) {\r\n            if (node.isWall) continue;\r\n            visitedinorder.push(node);\r\n            visited.set(node);\r\n            //   console.log(node.row);\r\n            //   console.log(node.col);\r\n            if (node == endnode) {\r\n                return visitedinorder;\r\n            }\r\n            graph.getAdjacents(node).forEach(adj => visitList.push(adj));\r\n            updateUnvisitedNeighbors(visitList, node, graph);\r\n            sortnodebydistance(visitList);\r\n        }\r\n    }\r\n    return visitedinorder;\r\n}\r\n\r\nfunction creategraph(grid) {\r\n    const graph = new Graph(1000);\r\n    for (let row = 0; row < 20; row++) {\r\n        for (let col = 0; col < 50; col++) {\r\n            graph.addVertex(grid[row][col]);\r\n        }\r\n    }\r\n    for (let row = 0; row < 20; row++) {\r\n        for (let col = 0; col < 50; col++) {\r\n            if ((col + 1 < 50)) {\r\n                graph.addEdge(grid[row][col], grid[row][col + 1]);\r\n            }\r\n            if ((row + 1) < 20) {\r\n                graph.addEdge(grid[row][col], grid[row + 1][col]);\r\n            }\r\n            if ((col - 1) >= 0) {\r\n                graph.addEdge(grid[row][col], grid[row][col - 1]);\r\n            }\r\n            if ((row - 1) >= 0) {\r\n                graph.addEdge(grid[row][col], grid[row - 1][col]);\r\n            }\r\n\r\n        }\r\n    }\r\n    return graph;\r\n}\r\n\r\nclass Graph {\r\n    constructor(noOfVertices) {\r\n        this.noOfVertices = noOfVertices;\r\n        this.AdjList = new Map();\r\n    }\r\n    addVertex(v) {\r\n        this.AdjList.set(v, []);\r\n    }\r\n    addEdge(v, w) {\r\n        this.AdjList.get(v).push(w);\r\n    }\r\n    getAdjacents(node) {\r\n        return this.AdjList.get(node);\r\n    }\r\n\r\n    isAdjacent(node, neighbor) {\r\n        var temp = 0;\r\n        this.AdjList.get(node).forEach(adj => {\r\n            if (adj === neighbor) {\r\n                temp++;\r\n            }\r\n        })\r\n        if (temp == 0) {\r\n            return false;\r\n        } else {\r\n            return true;\r\n        }\r\n    }\r\n}\r\n\r\nfunction sortnodebydistance(unvisitednodes) {\r\n    unvisitednodes.sort((nodeA, nodeB) => nodeA.distance - nodeB.distance);\r\n}\r\n\r\nfunction updateUnvisitedNeighbors(visitList, node, graph) {\r\n    for (const neighbor of visitList) {\r\n        if ((neighbor.previousNode !== null && neighbor.distance <= node.distance) || !graph.isAdjacent(node, neighbor)) {\r\n            continue;\r\n        } else if (graph.isAdjacent(node, neighbor)) {\r\n            neighbor.distance = node.distance + neighbor.weight + 1;\r\n            neighbor.previousNode = node;\r\n        }\r\n    }\r\n}\r\n\r\nexport function getNodesInShortestPathOrderDijkstra(finishNode, startNode) {\r\n    const nodesInShortestPathOrder = [];\r\n    let currentNode = finishNode;\r\n    while (currentNode !== null) {\r\n        nodesInShortestPathOrder.unshift(currentNode);\r\n        // console.log(currentNode.row);\r\n        // console.log(currentNode.col);\r\n        currentNode = currentNode.previousNode;\r\n        if (currentNode === startNode) {\r\n            // console.log(currentNode.row);\r\n            // console.log(currentNode.col);\r\n            break;\r\n        }\r\n    }\r\n    return nodesInShortestPathOrder;\r\n}\r\n","C:\\React Projects\\new\\Visualization\\src\\components\\Card.js",[],"C:\\React Projects\\new\\Visualization\\src\\models\\Node\\Node.jsx",["143"],"import React, {Component} from 'react';\r\n\r\nimport './Node.css';\r\n\r\nexport default class Node extends Component {\r\n  render() {\r\n    const {\r\n      col,\r\n      isFinish,\r\n      isStart,\r\n      isWall,\r\n      onMouseDown,\r\n      onMouseEnter,\r\n      onMouseUp,\r\n      row,\r\n      weight = 0,\r\n    } = this.props;\r\n    const extraClassName = isFinish\r\n      ? 'node-finish'\r\n      : isStart\r\n      ? 'node-start'\r\n      : isWall\r\n      ? 'node-wall'\r\n      : weight != 0\r\n      ? 'node-weight'\r\n      : '';\r\n\r\n    return (\r\n      <div\r\n        id={`node-${row}-${col}`}\r\n        className={`node ${extraClassName}`}\r\n        onMouseDown={() => onMouseDown(row, col)}\r\n        onMouseEnter={() => onMouseEnter(row, col)}\r\n        onMouseUp={() => onMouseUp()}></div>\r\n    );\r\n  }\r\n}\r\n",{"ruleId":"144","replacedBy":"145"},{"ruleId":"146","replacedBy":"147"},{"ruleId":"148","severity":1,"message":"149","line":13,"column":8,"nodeType":"150","messageId":"151","endLine":13,"endColumn":17},{"ruleId":"148","severity":1,"message":"152","line":28,"column":10,"nodeType":"150","messageId":"151","endLine":28,"endColumn":18},{"ruleId":"148","severity":1,"message":"153","line":29,"column":10,"nodeType":"150","messageId":"151","endLine":29,"endColumn":18},{"ruleId":"154","severity":1,"message":"155","line":106,"column":12,"nodeType":"156","messageId":"157","endLine":106,"endColumn":14},{"ruleId":"154","severity":1,"message":"155","line":106,"column":37,"nodeType":"156","messageId":"157","endLine":106,"endColumn":39},{"ruleId":"154","severity":1,"message":"155","line":110,"column":18,"nodeType":"156","messageId":"157","endLine":110,"endColumn":20},{"ruleId":"154","severity":1,"message":"155","line":110,"column":44,"nodeType":"156","messageId":"157","endLine":110,"endColumn":46},{"ruleId":"154","severity":1,"message":"155","line":126,"column":23,"nodeType":"156","messageId":"157","endLine":126,"endColumn":25},{"ruleId":"154","severity":1,"message":"155","line":126,"column":48,"nodeType":"156","messageId":"157","endLine":126,"endColumn":50},{"ruleId":"154","severity":1,"message":"155","line":126,"column":75,"nodeType":"156","messageId":"157","endLine":126,"endColumn":77},{"ruleId":"154","severity":1,"message":"155","line":126,"column":101,"nodeType":"156","messageId":"157","endLine":126,"endColumn":103},{"ruleId":"158","severity":1,"message":"159","line":146,"column":18,"nodeType":"160","messageId":"161","endLine":152,"endColumn":8},{"ruleId":"158","severity":1,"message":"159","line":158,"column":18,"nodeType":"160","messageId":"161","endLine":168,"endColumn":8},{"ruleId":"154","severity":1,"message":"155","line":180,"column":19,"nodeType":"156","messageId":"157","endLine":180,"endColumn":21},{"ruleId":"154","severity":1,"message":"155","line":187,"column":24,"nodeType":"156","messageId":"157","endLine":187,"endColumn":26},{"ruleId":"162","severity":1,"message":"163","line":190,"column":11,"nodeType":"150","messageId":"164","endLine":190,"endColumn":17},{"ruleId":"154","severity":1,"message":"155","line":194,"column":24,"nodeType":"156","messageId":"157","endLine":194,"endColumn":26},{"ruleId":"162","severity":1,"message":"163","line":197,"column":11,"nodeType":"150","messageId":"164","endLine":197,"endColumn":17},{"ruleId":"154","severity":1,"message":"155","line":200,"column":26,"nodeType":"156","messageId":"157","endLine":200,"endColumn":28},{"ruleId":"162","severity":1,"message":"163","line":205,"column":11,"nodeType":"150","messageId":"164","endLine":205,"endColumn":17},{"ruleId":"154","severity":1,"message":"155","line":257,"column":23,"nodeType":"156","messageId":"157","endLine":257,"endColumn":25},{"ruleId":"154","severity":1,"message":"155","line":266,"column":28,"nodeType":"156","messageId":"157","endLine":266,"endColumn":30},{"ruleId":"162","severity":1,"message":"165","line":267,"column":11,"nodeType":"150","messageId":"164","endLine":267,"endColumn":18},{"ruleId":"162","severity":1,"message":"166","line":268,"column":16,"nodeType":"150","messageId":"164","endLine":268,"endColumn":17},{"ruleId":"154","severity":1,"message":"155","line":275,"column":28,"nodeType":"156","messageId":"157","endLine":275,"endColumn":30},{"ruleId":"162","severity":1,"message":"165","line":278,"column":11,"nodeType":"150","messageId":"164","endLine":278,"endColumn":18},{"ruleId":"162","severity":1,"message":"166","line":279,"column":16,"nodeType":"150","messageId":"164","endLine":279,"endColumn":17},{"ruleId":"154","severity":1,"message":"155","line":286,"column":28,"nodeType":"156","messageId":"157","endLine":286,"endColumn":30},{"ruleId":"162","severity":1,"message":"165","line":287,"column":11,"nodeType":"150","messageId":"164","endLine":287,"endColumn":18},{"ruleId":"162","severity":1,"message":"166","line":288,"column":16,"nodeType":"150","messageId":"164","endLine":288,"endColumn":17},{"ruleId":"154","severity":1,"message":"155","line":295,"column":28,"nodeType":"156","messageId":"157","endLine":295,"endColumn":30},{"ruleId":"154","severity":1,"message":"155","line":311,"column":23,"nodeType":"156","messageId":"157","endLine":311,"endColumn":25},{"ruleId":"167","severity":1,"message":"168","line":343,"column":6,"nodeType":"169","endLine":343,"endColumn":21,"suggestions":"170"},{"ruleId":"154","severity":1,"message":"155","line":387,"column":73,"nodeType":"156","messageId":"157","endLine":387,"endColumn":75},{"ruleId":"154","severity":1,"message":"171","line":439,"column":28,"nodeType":"156","messageId":"157","endLine":439,"endColumn":30},{"ruleId":"154","severity":1,"message":"155","line":509,"column":25,"nodeType":"156","messageId":"157","endLine":509,"endColumn":27},{"ruleId":"154","severity":1,"message":"155","line":6,"column":20,"nodeType":"156","messageId":"157","endLine":6,"endColumn":22},{"ruleId":"154","severity":1,"message":"155","line":6,"column":47,"nodeType":"156","messageId":"157","endLine":6,"endColumn":49},{"ruleId":"154","severity":1,"message":"155","line":18,"column":20,"nodeType":"156","messageId":"157","endLine":18,"endColumn":22},{"ruleId":"154","severity":1,"message":"155","line":18,"column":47,"nodeType":"156","messageId":"157","endLine":18,"endColumn":49},{"ruleId":"148","severity":1,"message":"172","line":6,"column":9,"nodeType":"150","messageId":"151","endLine":6,"endColumn":14},{"ruleId":"154","severity":1,"message":"155","line":28,"column":24,"nodeType":"156","messageId":"157","endLine":28,"endColumn":26},{"ruleId":"154","severity":1,"message":"155","line":28,"column":48,"nodeType":"156","messageId":"157","endLine":28,"endColumn":50},{"ruleId":"154","severity":1,"message":"155","line":31,"column":29,"nodeType":"156","messageId":"157","endLine":31,"endColumn":31},{"ruleId":"154","severity":1,"message":"155","line":31,"column":54,"nodeType":"156","messageId":"157","endLine":31,"endColumn":56},{"ruleId":"154","severity":1,"message":"155","line":8,"column":24,"nodeType":"156","messageId":"157","endLine":8,"endColumn":26},{"ruleId":"154","severity":1,"message":"155","line":8,"column":48,"nodeType":"156","messageId":"157","endLine":8,"endColumn":50},{"ruleId":"154","severity":1,"message":"155","line":11,"column":29,"nodeType":"156","messageId":"157","endLine":11,"endColumn":31},{"ruleId":"154","severity":1,"message":"155","line":11,"column":54,"nodeType":"156","messageId":"157","endLine":11,"endColumn":56},{"ruleId":"154","severity":1,"message":"155","line":12,"column":28,"nodeType":"156","messageId":"157","endLine":12,"endColumn":30},{"ruleId":"154","severity":1,"message":"155","line":12,"column":55,"nodeType":"156","messageId":"157","endLine":12,"endColumn":57},{"ruleId":"154","severity":1,"message":"155","line":16,"column":32,"nodeType":"156","messageId":"157","endLine":16,"endColumn":34},{"ruleId":"154","severity":1,"message":"155","line":16,"column":59,"nodeType":"156","messageId":"157","endLine":16,"endColumn":61},{"ruleId":"154","severity":1,"message":"155","line":22,"column":40,"nodeType":"156","messageId":"157","endLine":22,"endColumn":42},{"ruleId":"154","severity":1,"message":"155","line":26,"column":31,"nodeType":"156","messageId":"157","endLine":26,"endColumn":33},{"ruleId":"162","severity":1,"message":"166","line":33,"column":14,"nodeType":"150","messageId":"164","endLine":33,"endColumn":15},{"ruleId":"162","severity":1,"message":"173","line":34,"column":18,"nodeType":"150","messageId":"164","endLine":34,"endColumn":19},{"ruleId":"154","severity":1,"message":"155","line":35,"column":28,"nodeType":"156","messageId":"157","endLine":35,"endColumn":30},{"ruleId":"154","severity":1,"message":"155","line":35,"column":55,"nodeType":"156","messageId":"157","endLine":35,"endColumn":57},{"ruleId":"162","severity":1,"message":"166","line":43,"column":14,"nodeType":"150","messageId":"164","endLine":43,"endColumn":15},{"ruleId":"162","severity":1,"message":"173","line":44,"column":18,"nodeType":"150","messageId":"164","endLine":44,"endColumn":19},{"ruleId":"154","severity":1,"message":"155","line":45,"column":28,"nodeType":"156","messageId":"157","endLine":45,"endColumn":30},{"ruleId":"154","severity":1,"message":"155","line":45,"column":55,"nodeType":"156","messageId":"157","endLine":45,"endColumn":57},{"ruleId":"154","severity":1,"message":"155","line":16,"column":16,"nodeType":"156","messageId":"157","endLine":16,"endColumn":18},{"ruleId":"154","severity":1,"message":"155","line":76,"column":14,"nodeType":"156","messageId":"157","endLine":76,"endColumn":16},{"ruleId":"154","severity":1,"message":"155","line":2,"column":19,"nodeType":"156","messageId":"157","endLine":2,"endColumn":21},{"ruleId":"154","severity":1,"message":"155","line":85,"column":19,"nodeType":"156","messageId":"157","endLine":85,"endColumn":21},{"ruleId":"154","severity":1,"message":"155","line":2,"column":19,"nodeType":"156","messageId":"157","endLine":2,"endColumn":21},{"ruleId":"148","severity":1,"message":"174","line":18,"column":13,"nodeType":"150","messageId":"151","endLine":18,"endColumn":18},{"ruleId":"154","severity":1,"message":"155","line":85,"column":19,"nodeType":"156","messageId":"157","endLine":85,"endColumn":21},{"ruleId":"154","severity":1,"message":"155","line":16,"column":22,"nodeType":"156","messageId":"157","endLine":16,"endColumn":24},{"ruleId":"154","severity":1,"message":"155","line":76,"column":18,"nodeType":"156","messageId":"157","endLine":76,"endColumn":20},{"ruleId":"154","severity":1,"message":"171","line":24,"column":16,"nodeType":"156","messageId":"157","endLine":24,"endColumn":18},"no-native-reassign",["175"],"no-negated-in-lhs",["176"],"no-unused-vars","'recursive' is defined but never used.","Identifier","unusedVar","'isActive' is assigned a value but never used.","'isPaused' is assigned a value but never used.","eqeqeq","Expected '===' and instead saw '=='.","BinaryExpression","unexpected","no-loop-func","Function declared in a loop contains unsafe references to variable(s) 'START_NODE_ROW', 'START_NODE_COL', 'FINISH_NODE_ROW', 'FINISH_NODE_COL'.","ArrowFunctionExpression","unsafeRefs","no-redeclare","'start2' is already defined.","redeclared","'griddef' is already defined.","'i' is already defined.","react-hooks/exhaustive-deps","React Hook useEffect has a missing dependency: 'demoMazeAlgorithm'. Either include it or remove the dependency array.","ArrayExpression",["177"],"Expected '!==' and instead saw '!='.","'grid1' is assigned a value but never used.","'j' is already defined.","'count' is assigned a value but never used.","no-global-assign","no-unsafe-negation",{"desc":"178","fix":"179"},"Update the dependencies array to be: [demoMazeAlgorithm, mazeAlgorithm]",{"range":"180","text":"181"},[12858,12873],"[demoMazeAlgorithm, mazeAlgorithm]"]