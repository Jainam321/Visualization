<<<<<<< HEAD
[{"C:\\Users\\kadam\\react\\Visualization\\src\\index.js":"1","C:\\Users\\kadam\\react\\Visualization\\src\\App.js":"2","C:\\Users\\kadam\\react\\Visualization\\src\\visualizers\\PathfindingVisualizer.jsx":"3","C:\\Users\\kadam\\react\\Visualization\\src\\mazeAlgorithms\\Simplestair.js":"4","C:\\Users\\kadam\\react\\Visualization\\src\\mazeAlgorithms\\basicRandom.js":"5","C:\\Users\\kadam\\react\\Visualization\\src\\mazeAlgorithms\\basicWeighted.js":"6","C:\\Users\\kadam\\react\\Visualization\\src\\algorithms\\BFS.js":"7","C:\\Users\\kadam\\react\\Visualization\\src\\algorithms\\DFS.js":"8","C:\\Users\\kadam\\react\\Visualization\\src\\algorithms\\dijkstra.js":"9","C:\\Users\\kadam\\react\\Visualization\\src\\models\\Node\\Node.jsx":"10"},{"size":174,"mtime":1616938834922,"results":"11","hashOfConfig":"12"},{"size":281,"mtime":1616930096196,"results":"13","hashOfConfig":"12"},{"size":12670,"mtime":1617179302672,"results":"14","hashOfConfig":"12"},{"size":592,"mtime":1617034610184,"results":"15","hashOfConfig":"12"},{"size":1406,"mtime":1617035113851,"results":"16","hashOfConfig":"12"},{"size":662,"mtime":1617035130523,"results":"17","hashOfConfig":"12"},{"size":3428,"mtime":1617179302629,"results":"18","hashOfConfig":"12"},{"size":3426,"mtime":1617183935026,"results":"19","hashOfConfig":"12"},{"size":3243,"mtime":1617179302632,"results":"20","hashOfConfig":"12"},{"size":780,"mtime":1617007082949,"results":"21","hashOfConfig":"12"},{"filePath":"22","messages":"23","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"24"},"triyp6",{"filePath":"25","messages":"26","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"24"},{"filePath":"27","messages":"28","errorCount":0,"warningCount":13,"fixableErrorCount":0,"fixableWarningCount":0,"source":"29"},{"filePath":"30","messages":"31","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"32","usedDeprecatedRules":"24"},{"filePath":"33","messages":"34","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"35","usedDeprecatedRules":"24"},{"filePath":"36","messages":"37","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"38","usedDeprecatedRules":"24"},{"filePath":"39","messages":"40","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"41"},{"filePath":"42","messages":"43","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"44","messages":"45","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"46"},{"filePath":"47","messages":"48","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"49","usedDeprecatedRules":"24"},"C:\\Users\\kadam\\react\\Visualization\\src\\index.js",[],["50","51"],"C:\\Users\\kadam\\react\\Visualization\\src\\App.js",[],"C:\\Users\\kadam\\react\\Visualization\\src\\visualizers\\PathfindingVisualizer.jsx",["52","53","54","55","56","57","58","59","60","61","62","63","64"],"import React, {useEffect ,useState, useRef} from 'react';\r\nimport dijkstra,{getNodesInShortestPathOrderDijkstra} from '../algorithms/dijkstra';\r\nimport BFS,{getNodesInShortestPathOrderBFS} from '../algorithms/BFS';\r\nimport DFS,{getNodesInShortestPathOrderDFS} from '../algorithms/DFS';\r\nimport {Nav, Navbar, Button, NavDropdown, Toast} from 'react-bootstrap';\r\nimport Node from '../models/Node/Node';\r\nimport './PathfindingVisualizer.css'; \r\nimport 'bootstrap/dist/css/bootstrap.min.css';\r\nimport  basicRandom from '../mazeAlgorithms/basicRandom.js';\r\nimport  basicWeighted from '../mazeAlgorithms/basicWeighted.js';\r\nimport  Simplestair from '../mazeAlgorithms/Simplestair.js';\r\n\r\nconst START_NODE_ROW = 10;\r\nconst START_NODE_COL = 10;\r\nconst FINISH_NODE_ROW = 8;\r\nconst FINISH_NODE_COL = 39;\r\n\r\nconst NODE_WEIGHT =10;\r\n\r\nconst PathfindingVisualizer = () => {\r\n  const [grid, setGrid] = useState([]);\r\n  const [mouseIsPressed, setMouseIsPressed] = useState(false);\r\n  const [timer, setTimer] = useState(0);\r\n  const [isActive, setIsActive] = useState(false);\r\n  const [isPaused, setIsPaused] = useState(false);\r\n  const [noOfCellVisited, setNoOfCellVisited] = useState(0);\r\n  const [totalcost, settotalcost] = useState(0);\r\n  const [algorithm, setAlgorithm] = useState(\"Choose Algorithm\");\r\n  const [mazeAlgorithm , setmazeAlgorithm ]=useState(\"Choose Maze Algorithm\");\r\n  const [show, setShow] = useState(false);\r\n  const [isAddWeight, setIsAddWeight] = useState(false);\r\n  const countRef = useRef(null)\r\n\r\n\r\n  const handleStart = () => {\r\n    setIsActive(true);\r\n    setIsPaused(true);\r\n    countRef.current = setInterval(() => {\r\n      setTimer((timer) => timer + 1);\r\n    }, 1000);\r\n  }\r\n\r\n  const handlePause = () => {\r\n    clearInterval(countRef.current);\r\n    setIsPaused(false);\r\n  }\r\n\r\n  const handleReset = () => {\r\n    clearInterval(countRef.current);\r\n    setIsActive(false);\r\n    setIsPaused(false);\r\n    setTimer(0);\r\n  }\r\n\r\n  const formatTime = () => {\r\n    const getSeconds = `0${(timer % 60)}`.slice(-2)\r\n    const minutes = `${Math.floor(timer / 60)}`\r\n    const getMinutes = `0${minutes % 60}`.slice(-2)\r\n    const getHours = `0${Math.floor(timer / 3600)}`.slice(-2)\r\n\r\n    return `${getHours} : ${getMinutes} : ${getSeconds}`\r\n  }\r\n\r\n  useEffect(()=>{\r\n    console.log('component mounted');\r\n    const grid = getInitialGrid();\r\n    setGrid(grid);\r\n  },[])\r\n\r\n  const handleMouseDown = (row, col) => {\r\n    const newGrid = getNewGridWithWallToggled(grid, row, col, isAddWeight);\r\n    setGrid(newGrid);\r\n    setMouseIsPressed(true);\r\n  }\r\n\r\n  const handleMouseEnter = (row, col) => {\r\n    if (!mouseIsPressed) return;\r\n    const newGrid = getNewGridWithWallToggled(grid, row, col, isAddWeight);\r\n    setGrid(newGrid);\r\n  }\r\n\r\n  const handleMouseUp = () => {\r\n    setMouseIsPressed(false);\r\n  }\r\n\r\n  const animateAlgorithm = (visitedNodesInOrder, nodesInShortestPathOrder) => {\r\n    for (let i = 0; i <= visitedNodesInOrder.length; i++) {\r\n      if (i === visitedNodesInOrder.length) {\r\n        setTimeout(() => {\r\n          animateShortestPath(nodesInShortestPathOrder);\r\n        }, 10 * i);\r\n        return;\r\n      }\r\n      setTimeout(() => {\r\n        const node = visitedNodesInOrder[i];\r\n        document.getElementById(`node-${node.row}-${node.col}`).className =\r\n          'node node-visited';\r\n      }, 10 * i);\r\n    }\r\n  }\r\n\r\n  const animateShortestPath = (nodesInShortestPathOrder) =>  {\r\n    for (let i = 0; i < nodesInShortestPathOrder.length; i++) {\r\n      setTimeout(() => {\r\n        const node = nodesInShortestPathOrder[i];\r\n        document.getElementById(`node-${node.row}-${node.col}`).className =\r\n          'node node-shortest-path';\r\n      }, 50 * i);\r\n    }\r\n    handlePause();\r\n  }\r\n\r\n  const visualizeAlgorithm = () => {\r\n    handleStart();\r\n    const startNode = grid[START_NODE_ROW][START_NODE_COL];\r\n    const finishNode = grid[FINISH_NODE_ROW][FINISH_NODE_COL];\r\n    let visitedNodesInOrder, nodesInShortestPathOrder;\r\n    if(algorithm == \"Dijkstra\"){\r\n      visitedNodesInOrder = dijkstra(grid, startNode, finishNode);\r\n      nodesInShortestPathOrder = getNodesInShortestPathOrderDijkstra(finishNode,startNode);\r\n    }\r\n    else if(algorithm == \"BFS\"){\r\n      visitedNodesInOrder = BFS(grid, startNode, finishNode);\r\n      nodesInShortestPathOrder = getNodesInShortestPathOrderBFS(finishNode,startNode);\r\n    }\r\n    else if(algorithm == \"DFS\"){\r\n      visitedNodesInOrder = DFS(grid, startNode, finishNode);\r\n      nodesInShortestPathOrder = getNodesInShortestPathOrderDFS(finishNode,startNode);\r\n    }\r\n    else{\r\n      setShow(true);\r\n      handlePause();\r\n      return;\r\n    }\r\n    settotalcost(finishNode.distance);\r\n    animateAlgorithm(visitedNodesInOrder, nodesInShortestPathOrder);\r\n    setNoOfCellVisited(nodesInShortestPathOrder.length);\r\n  }\r\n\r\n  const clearBoard = () => {\r\n    handleReset();\r\n    setGrid(getInitialGrid());\r\n    setNoOfCellVisited(0);\r\n    clearGrid();\r\n    // setAlgorithm(\"Choose Algorithm\");\r\n    // setmazeAlgorithm(\"Choose Maze Algorithm\");\r\n    document.getElementById(`node-${START_NODE_ROW}-${START_NODE_COL}`).className = 'node node-start';\r\n    document.getElementById(`node-${FINISH_NODE_ROW}-${FINISH_NODE_COL}`).className = 'node node-finish';\r\n  }\r\n\r\n  const clearVisualization = () => {\r\n    handleReset();\r\n    setNoOfCellVisited(0);\r\n    clearGrid();\r\n    document.getElementById(`node-${START_NODE_ROW}-${START_NODE_COL}`).className = 'node node-start';\r\n    document.getElementById(`node-${FINISH_NODE_ROW}-${FINISH_NODE_COL}`).className = 'node node-finish';\r\n  }\r\n\r\n  const demoMazeAlgorithm=()=>{\r\n    clearBoard();\r\n    console.log(mazeAlgorithm);\r\n    const startNode = grid[START_NODE_ROW][START_NODE_COL];\r\n    const finishNode = grid[FINISH_NODE_ROW][FINISH_NODE_COL];\r\n    if(mazeAlgorithm==\"Basic Random Maze\")\r\n    {\r\n      var griddef=basicRandom(grid,startNode, finishNode);\r\n      for(var i=0;i<griddef.length;i++)\r\n      {\r\n        document.getElementById(`node-${griddef[i].row}-${griddef[i].col}`).className =\r\n        'node node-wall';\r\n        const newGrid = getNewGridWithWallToggled(grid, griddef[i].row, griddef[i].col, isAddWeight);\r\n        setGrid(newGrid);\r\n      }\r\n    }\r\n    else if(mazeAlgorithm==\"Basic Weight Maze\")\r\n    {\r\n        var griddef=basicWeighted(grid,startNode, finishNode);\r\n        for(var i=0;i<griddef.length;i++)\r\n        {\r\n          document.getElementById(`node-${griddef[i].row}-${griddef[i].col}`).className =\r\n          'node node-weight';\r\n          const newGrid = getNewGridWithWallToggled(grid, griddef[i].row, griddef[i].col);\r\n          setGrid(newGrid);\r\n        }\r\n    }\r\n    else if(mazeAlgorithm==\"Simple Stair Pattern\")\r\n    {\r\n        var griddef=Simplestair(grid,startNode, finishNode);\r\n        for(var i=0;i<griddef.length;i++)\r\n        {\r\n          document.getElementById(`node-${griddef[i].row}-${griddef[i].col}`).className =\r\n          'node node-weight';\r\n          const newGrid = getNewGridWithWallToggled(grid, griddef[i].row, griddef[i].col);\r\n          setGrid(newGrid);\r\n        }\r\n    }\r\n  }\r\n\r\n  \r\n\r\n  const clearGrid = () => {\r\n      const newGrid = grid;\r\n      for (const row of newGrid) {\r\n        for (const node of row) {\r\n          let nodeClassName = document.getElementById(`node-${node.row}-${node.col}`,).className;\r\n          if( nodeClassName !== 'node node-start' && \r\n              nodeClassName !== 'node node-finish' && \r\n              nodeClassName !== 'node node-wall') {\r\n            document.getElementById(`node-${node.row}-${node.col}`).className =\r\n              'node';\r\n          }\r\n        }\r\n      }\r\n  }\r\n\r\n  const addWeights = () => {\r\n    setIsAddWeight(!isAddWeight);\r\n  }\r\n\r\n\r\n  return (\r\n    <>\r\n      <Navbar bg=\"light\" variant=\"light\">\r\n        <div className=\"container\">\r\n        <Navbar.Brand href=\"#home\">Path Visualization</Navbar.Brand>\r\n        <Nav className=\"mr-auto\">\r\n          <NavDropdown title={algorithm} id=\"basic-nav-dropdown\">\r\n            <NavDropdown.Item href=\"\" onClick={() => setAlgorithm(\"Dijkstra\")}>Dijkstra</NavDropdown.Item>\r\n            <NavDropdown.Item href=\"\" onClick={() => setAlgorithm(\"BFS\")}>BFS</NavDropdown.Item>\r\n            <NavDropdown.Item href=\"\" onClick={() => setAlgorithm(\"DFS\")}>DFS</NavDropdown.Item>\r\n          </NavDropdown>\r\n          <NavDropdown title={mazeAlgorithm} id=\"basic-nav-dropdown\">\r\n            <NavDropdown.Item href=\"\" onClick={() => {\r\n              setmazeAlgorithm(\"Basic Random Maze\");\r\n              demoMazeAlgorithm();\r\n            }}>Basic Random Maze</NavDropdown.Item>\r\n            <NavDropdown.Item href=\"\" onClick={() => {\r\n              setmazeAlgorithm(\"Basic Weight Maze\");\r\n              demoMazeAlgorithm();\r\n            }}>Basic Weight Maze</NavDropdown.Item>\r\n            <NavDropdown.Item href=\"\" onClick={() => {\r\n              setmazeAlgorithm(\"Simple Stair Pattern\");\r\n              demoMazeAlgorithm();\r\n            }}>Simple Stair Pattern</NavDropdown.Item>\r\n            <NavDropdown.Item href=\"\" onClick={() => {\r\n              setmazeAlgorithm(\"Recursive Division\");\r\n              demoMazeAlgorithm();\r\n            }}>Recursive Division</NavDropdown.Item>\r\n          </NavDropdown>\r\n        </Nav>\r\n        <div>\r\n\r\n        <Toast onClose={() => setShow(false)} show={show} delay={3000} autohide \r\n          style={{\r\n            position: 'absolute',\r\n            top: 0,\r\n            right: \"50%\",\r\n          }}>\r\n          <Toast.Header>\r\n            <strong className=\"mr-auto\">First Choose Algorithm</strong>\r\n          </Toast.Header>\r\n        </Toast>\r\n        </div>\r\n        <div className=\"m\">\r\n          <span className=\"pBtn\">\r\n            <Button variant=\"success\" size=\"sm\" onClick={() => addWeights()}>\r\n              {isAddWeight ? \"Adding Weights\" : \"Add Weights\"}\r\n            </Button>\r\n          </span>\r\n          <span className=\"pBtn\">\r\n            <Button variant=\"secondary\" size=\"sm\" onClick={() => clearBoard()}>Clear Board</Button>\r\n          </span>\r\n          <span className=\"pBtn\">\r\n            <Button variant=\"secondary\" size=\"sm\" onClick={() => clearVisualization()}>Clear Visualization</Button>\r\n          </span>\r\n          <Button variant=\"primary\" onClick={() => visualizeAlgorithm()}>Start</Button>\r\n        </div>\r\n        </div>        \r\n      </Navbar>\r\n      <span className=\"pText\">Timer</span>\r\n      <span className=\"timeBox\">{formatTime()}</span>\r\n      <span className=\"pText\">No. of Cells Visited</span>\r\n      <span className=\"timeBox\">{noOfCellVisited}</span>\r\n      <span className=\"pText\">Total Cost</span>\r\n      <span className=\"timeBox\">{totalcost}</span>\r\n\r\n      <div className=\"grid\">\r\n        {grid.map((row, rowIdx) => {\r\n          return (\r\n            <div key={rowIdx}>\r\n              {row.map((node, nodeIdx) => {\r\n                const {row, col, isFinish, isStart, isWall, weight} = node;\r\n                return (\r\n                  <Node\r\n                    key={nodeIdx}\r\n                    col={col}\r\n                    isFinish={isFinish}\r\n                    isStart={isStart}\r\n                    isWall={isWall}\r\n                    mouseIsPressed={mouseIsPressed}\r\n                    weight={weight}\r\n                    onMouseDown={(row, col) => handleMouseDown(row, col)}\r\n                    onMouseEnter={(row, col) =>\r\n                      handleMouseEnter(row, col)\r\n                    }\r\n                    onMouseUp={() => handleMouseUp()}\r\n                    row={row}></Node>\r\n                );\r\n              })}\r\n            </div>\r\n          );\r\n        })}\r\n      </div>\r\n    </>\r\n  );\r\n}\r\n\r\n\r\n\r\nconst getInitialGrid = () => {\r\n    const grid = [];\r\n    for (let row = 0; row < 20; row++) {\r\n      const currentRow = [];\r\n      for (let col = 0; col < 50; col++) {\r\n        currentRow.push(createNode(col, row));\r\n      }\r\n      grid.push(currentRow);\r\n    }\r\n    return grid;\r\n};\r\n\r\nconst createNode = (col, row) => {\r\n    return {\r\n        col,\r\n        row,\r\n        isStart: row === START_NODE_ROW && col === START_NODE_COL,\r\n        isFinish: row === FINISH_NODE_ROW && col === FINISH_NODE_COL,\r\n        distance: Infinity,\r\n        isVisited: false,\r\n        isWall: false,\r\n        previousNode: null,\r\n        weight: 0,\r\n    };\r\n};\r\n\r\nconst getNewGridWithWallToggled = (grid, row, col, isAddWeight) => {\r\n    const newGrid = grid.slice();\r\n    const node = newGrid[row][col];\r\n    const newNode = {\r\n        ...node,\r\n        isWall: isAddWeight ? false : !node.isWall,\r\n        weight: node.weight==0 && isAddWeight ? NODE_WEIGHT : 0,\r\n    };\r\n    newGrid[row][col] = newNode;\r\n    return newGrid;\r\n};\r\n  \r\n\r\nexport default PathfindingVisualizer;\r\n","C:\\Users\\kadam\\react\\Visualization\\src\\mazeAlgorithms\\Simplestair.js",["65","66","67","68"],"function Simplestair(grid,startNode, finishNode)\r\n{\r\nvar grid1=[];\r\n  let  x=grid.length;\r\n  let y=0;\r\n  while(x<2*(grid.length)-1 && y<grid.length-4){\r\n    if(grid[y][x]==startNode || grid[y][x]==finishNode){\r\n        continue;\r\n    }\r\n    else{\r\n        grid1.push(grid[y][x]);\r\n    }\r\n    x++;\r\n    y++;\r\n    };\r\n    x=grid.length-1;\r\n    y=0;\r\n  while(x>=0 && y<grid.length){\r\n    if(grid[y][x]==startNode || grid[y][x]==finishNode){\r\n        continue;\r\n    }\r\n    else{\r\n        grid1.push(grid[y][x]);\r\n    }\r\n    x--;\r\n    y++;\r\n  };\r\n  return grid1;\r\n}\r\n\r\nexport default Simplestair; ","C:\\Users\\kadam\\react\\Visualization\\src\\mazeAlgorithms\\basicRandom.js",["69","70","71","72"],"function basicRandom(grid,startNode, finishNode){\r\n     var grid1=[]\r\n     // let cIdY=grid.length[0]-10;\r\n     // for(let c=0 ;c<10;c++)\r\n     // {\r\n     //      let cIdXone= Math.floor(grid.length/2)-c;\r\n     //      let cIdXtwo = Math.floor(grid.length/2)+c;\r\n     //      // let cIdone = cIdY-cIdXone;\r\n     //      // let cIdtwo = cIdY-cIdXtwo;\r\n     //      console.log(cIdXone);\r\n     //      console.log(cIdXtwo);\r\n     //      // console.log((cIdY,cIdtwo));\r\n     //      if(cIdy>=20 || CIdXone>=50 || cIdXtwo>=50){\r\n     //           continue;\r\n     //      }\r\n     //      else{\r\n     //           grid1.push(grid[cIdY][cIdXone]);\r\n     //           grid1.push(grid[cIdY][cIdXtwo]);\r\n     //      }\r\n     //      // console.log(cIdone);\r\n     //      // console.log(cIdtwo);\r\n     // }\r\n     for(var i=0 ; i<20;i+=3)\r\n     {\r\n          for (var j=0 ;j<50;j+=3)\r\n          {\r\n               var x=Math.floor((Math.random() * 10) + 1);\r\n               var col=Math.abs(i-x);\r\n               var row=Math.abs(j-x);\r\n               if(col==startNode.col && row==startNode.row)\r\n               {\r\n                    continue;\r\n               }\r\n               else if(col==finishNode.col && row==finishNode.row)\r\n               {\r\n                    continue;\r\n               }\r\n               grid1.push(grid[col][row]);\r\n          }\r\n     }\r\n     return grid1;\r\n}\r\n\r\n\r\nexport default basicRandom;","C:\\Users\\kadam\\react\\Visualization\\src\\mazeAlgorithms\\basicWeighted.js",["73","74","75","76"],"function basicWeighted(grid,startNode, finishNode){\r\n    var grid1=[]\r\n    for(var i=0 ; i<20;i+=3)\r\n    {\r\n         for (var j=0 ;j<50;j+=3)\r\n         {\r\n              var x=Math.floor((Math.random() * 10) + 1);\r\n              var col=Math.abs(i-x);\r\n              var row=Math.abs(j-x);\r\n              if(col==startNode.col && row==startNode.row)\r\n              {\r\n                   continue;\r\n              }\r\n              else if(col==finishNode.col && row==finishNode.row)\r\n              {\r\n                   continue;\r\n              }\r\n              grid1.push(grid[col][row]);\r\n         }\r\n    }\r\n    return grid1;\r\n}\r\n\r\n\r\nexport default basicWeighted;","C:\\Users\\kadam\\react\\Visualization\\src\\algorithms\\BFS.js",["77","78"],"\r\nexport default function BFS(grid,startNode, finishNode){\r\n    if(startNode==finishNode || !startNode || !finishNode){\r\n        return false;\r\n    }\r\n    console.log(\"in BFS\");\r\n    var count=0;\r\n    startNode.distance=0;\r\n    const visited=new Map();\r\n    const visitedinorder=[];\r\n    const visitList=[];\r\n    visitList.push(startNode)\r\n    const graph=creategraph(grid);\r\n    while(visitList.length!==0)\r\n    {\r\n        const node =visitList.shift();\r\n        if(node && !visited.has(node))\r\n        {\r\n            if (node.isWall) continue;\r\n            visitedinorder.push(node);\r\n            count++;\r\n            visited.set(node);\r\n            console.log(\"visited\");\r\n            console.log(node.row);\r\n            console.log(node.col);\r\n            if(node===finishNode){\r\n                console.log(\"count\",count);\r\n                return visitedinorder;\r\n            }\r\n            graph.getAdjacents(node).forEach(adj => visitList.push(adj));\r\n            updateUnvisitedNeighbors(visitList,node,graph);\r\n        }\r\n    }\r\n    return visitedinorder;\r\n\r\n}\r\n\r\n\r\n\r\nfunction creategraph(grid){\r\n    const graph=new Graph(1000);\r\n    for(let row=0;row<20;row++)\r\n    {\r\n        for(let col=0;col<50;col++)\r\n        {\r\n            graph.addVertex(grid[row][col]);\r\n        }\r\n    }\r\n    for(let row=0;row<20;row++)\r\n    {\r\n        for(let col=0;col<50;col++)\r\n        {\r\n            if((col+1<50)){\r\n                graph.addEdge(grid[row][col],grid[row][col+1]);\r\n            }\r\n            if((col-1>=0)){\r\n                graph.addEdge(grid[row][col],grid[row][col-1]);\r\n            }\r\n            if((row-1)>=0){\r\n                graph.addEdge(grid[row][col],grid[row-1][col]);\r\n            }\r\n            if((row+1)<20){\r\n                graph.addEdge(grid[row][col],grid[row+1][col]);\r\n            }\r\n        }\r\n    }\r\n    return graph;\r\n}\r\n\r\n\r\nclass Graph{\r\n  constructor(noOfVertices){\r\n      this.noOfVertices=noOfVertices;\r\n      this.Adjlist=new Map();\r\n  }  \r\n\r\n  addVertex(v){\r\n    this.Adjlist.set(v,[]);\r\n  }\r\n\r\n  addEdge(v,w){\r\n     this.Adjlist.get(v).push(w);\r\n  }\r\n\r\n  getAdjacents(node){\r\n      return this.Adjlist.get(node);\r\n  }\r\n\r\n  isAdjacent(node,neighbor) {\r\n    var temp=0;\r\n    this.Adjlist.get(neighbor).forEach( x => {\r\n        if(x==node){\r\n            temp++;\r\n        }\r\n    })\r\n    if(temp===0){\r\n        return false;\r\n    }else{\r\n        return true;\r\n    }\r\n}\r\n}\r\n\r\nfunction updateUnvisitedNeighbors(visitList,node,graph) {\r\n    console.log(\"neigbour\");\r\n    for (const neighbor of visitList) {\r\n        if(!graph.isAdjacent(node,neighbor) || neighbor.previousNode !== null){\r\n            continue;\r\n        }else if(graph.isAdjacent(node,neighbor)){\r\n            neighbor.distance = node.distance + neighbor.weight + 1;\r\n            neighbor.previousNode = node;\r\n        }\r\n    }\r\n  }\r\n\r\nexport function getNodesInShortestPathOrderBFS(finishNode,startNode) {\r\n    console.log(\"shortest Path\");\r\n    const nodesInShortestPathOrder = [];\r\n    let currentNode = finishNode;\r\n    while (currentNode !== null) {\r\n      nodesInShortestPathOrder.unshift(currentNode);\r\n      console.log(currentNode.row);\r\n      console.log(currentNode.col);\r\n      currentNode = currentNode.previousNode;\r\n      if(currentNode===startNode){\r\n          console.log(currentNode.row);\r\n          console.log(currentNode.col);\r\n          break;\r\n      }\r\n    }\r\n    return nodesInShortestPathOrder;\r\n  }\r\n","C:\\Users\\kadam\\react\\Visualization\\src\\algorithms\\DFS.js",["79","80"],"C:\\Users\\kadam\\react\\Visualization\\src\\algorithms\\dijkstra.js",["81","82"],"export default function dijkstra(grid,startnode,endnode){\r\n  startnode.distance=0;\r\n  const visited = new Map();\r\n  const visitedinorder =[];\r\n  const visitList = [];\r\n  visitList.push(startnode);\r\n  const graph=creategraph(grid);\r\n  while(visitList.length !== 0) {\r\n      const node = visitList.shift();\r\n      if(node && !visited.has(node)) {\r\n          if (node.isWall) continue;\r\n          visitedinorder.push(node);\r\n          visited.set(node);\r\n          console.log(node.row);\r\n          console.log(node.col);\r\n          if(node==endnode){\r\n              return visitedinorder;\r\n          }\r\n          graph.getAdjacents(node).forEach(adj => visitList.push(adj));\r\n          updateUnvisitedNeighbors(visitList,node,graph);\r\n          sortnodebydistance(visitList);\r\n      }\r\n  }\r\n  return visitedinorder;\r\n}\r\n\r\nfunction creategraph(grid){\r\n  const graph=new Graph(1000);\r\n  for (let row = 0; row < 20; row++) {\r\n      for (let col = 0; col < 50; col++) {\r\n        graph.addVertex(grid[row][col]);\r\n      }\r\n  }\r\n  for (let row = 0; row < 20; row++) {\r\n      for (let col = 0; col < 50; col++) {\r\n          if((col+1<50)){\r\n              graph.addEdge(grid[row][col],grid[row][col+1]);\r\n          }\r\n          if((row+1)<20){\r\n              graph.addEdge(grid[row][col],grid[row+1][col]);\r\n          }\r\n          if((col-1)>=0){\r\n              graph.addEdge(grid[row][col],grid[row][col-1]);\r\n          }\r\n          if((row-1)>=0){\r\n              graph.addEdge(grid[row][col],grid[row-1][col]);\r\n          }         \r\n             \r\n      }\r\n    }\r\n  return graph;\r\n}\r\n\r\nclass Graph { \r\n  constructor(noOfVertices) { \r\n      this.noOfVertices = noOfVertices; \r\n      this.AdjList = new Map(); \r\n  }\r\n  addVertex(v) { \r\n  this.AdjList.set(v, []); \r\n  } \r\n  addEdge(v, w) { \r\n  this.AdjList.get(v).push(w);\r\n  }\r\n  getAdjacents(node) {\r\n      return this.AdjList.get(node);\r\n  }\r\n  \r\n  isAdjacent(node,neighbor) {\r\n      var temp=0;\r\n      this.AdjList.get(node).forEach(adj => {\r\n          if(adj === neighbor){\r\n              temp++;\r\n          }\r\n      })\r\n      if(temp==0){\r\n          return false;\r\n      }else{\r\n          return true;\r\n      }\r\n  }\r\n} \r\n\r\nfunction sortnodebydistance(unvisitednodes){\r\n  unvisitednodes.sort((nodeA, nodeB) => nodeA.distance - nodeB.distance);\r\n}\r\n\r\nfunction updateUnvisitedNeighbors(visitList,node,graph) {\r\n  for (const neighbor of visitList) {\r\n      if((neighbor.previousNode !== null && neighbor.distance <= node.distance)  || !graph.isAdjacent(node,neighbor) ){\r\n          continue;\r\n      }else if(graph.isAdjacent(node,neighbor)){\r\n          neighbor.distance = node.distance + neighbor.weight + 1;\r\n          neighbor.previousNode = node;\r\n      }\r\n  }\r\n}\r\n\r\nexport function getNodesInShortestPathOrderDijkstra(finishNode,startNode) {\r\n  const nodesInShortestPathOrder = [];\r\n  let currentNode = finishNode;\r\n  while (currentNode !== null) {\r\n    nodesInShortestPathOrder.unshift(currentNode);\r\n    console.log(currentNode.row);\r\n    console.log(currentNode.col);\r\n    currentNode = currentNode.previousNode;\r\n    if(currentNode===startNode){\r\n        console.log(currentNode.row);\r\n        console.log(currentNode.col);\r\n        break;\r\n    }\r\n  }\r\n  return nodesInShortestPathOrder;\r\n}\r\n","C:\\Users\\kadam\\react\\Visualization\\src\\models\\Node\\Node.jsx",["83"],"import React, {Component} from 'react';\r\n\r\nimport './Node.css';\r\n\r\nexport default class Node extends Component {\r\n  render() {\r\n    const {\r\n      col,\r\n      isFinish,\r\n      isStart,\r\n      isWall,\r\n      onMouseDown,\r\n      onMouseEnter,\r\n      onMouseUp,\r\n      row,\r\n      weight = 0,\r\n    } = this.props;\r\n    const extraClassName = isFinish\r\n      ? 'node-finish'\r\n      : isStart\r\n      ? 'node-start'\r\n      : isWall\r\n      ? 'node-wall'\r\n      : weight != 0\r\n      ? 'node-weight'\r\n      : '';\r\n\r\n    return (\r\n      <div\r\n        id={`node-${row}-${col}`}\r\n        className={`node ${extraClassName}`}\r\n        onMouseDown={() => onMouseDown(row, col)}\r\n        onMouseEnter={() => onMouseEnter(row, col)}\r\n        onMouseUp={() => onMouseUp()}></div>\r\n    );\r\n  }\r\n}\r\n",{"ruleId":"84","replacedBy":"85"},{"ruleId":"86","replacedBy":"87"},{"ruleId":"88","severity":1,"message":"89","line":24,"column":10,"nodeType":"90","messageId":"91","endLine":24,"endColumn":18},{"ruleId":"88","severity":1,"message":"92","line":25,"column":10,"nodeType":"90","messageId":"91","endLine":25,"endColumn":18},{"ruleId":"93","severity":1,"message":"94","line":118,"column":18,"nodeType":"95","messageId":"96","endLine":118,"endColumn":20},{"ruleId":"93","severity":1,"message":"94","line":122,"column":23,"nodeType":"95","messageId":"96","endLine":122,"endColumn":25},{"ruleId":"93","severity":1,"message":"94","line":126,"column":23,"nodeType":"95","messageId":"96","endLine":126,"endColumn":25},{"ruleId":"93","severity":1,"message":"94","line":164,"column":21,"nodeType":"95","messageId":"96","endLine":164,"endColumn":23},{"ruleId":"93","severity":1,"message":"94","line":175,"column":26,"nodeType":"95","messageId":"96","endLine":175,"endColumn":28},{"ruleId":"97","severity":1,"message":"98","line":177,"column":13,"nodeType":"90","messageId":"99","endLine":177,"endColumn":20},{"ruleId":"97","severity":1,"message":"100","line":178,"column":17,"nodeType":"90","messageId":"99","endLine":178,"endColumn":18},{"ruleId":"93","severity":1,"message":"94","line":186,"column":26,"nodeType":"95","messageId":"96","endLine":186,"endColumn":28},{"ruleId":"97","severity":1,"message":"98","line":188,"column":13,"nodeType":"90","messageId":"99","endLine":188,"endColumn":20},{"ruleId":"97","severity":1,"message":"100","line":189,"column":17,"nodeType":"90","messageId":"99","endLine":189,"endColumn":18},{"ruleId":"93","severity":1,"message":"94","line":352,"column":28,"nodeType":"95","messageId":"96","endLine":352,"endColumn":30},{"ruleId":"93","severity":1,"message":"94","line":7,"column":18,"nodeType":"95","messageId":"96","endLine":7,"endColumn":20},{"ruleId":"93","severity":1,"message":"94","line":7,"column":43,"nodeType":"95","messageId":"96","endLine":7,"endColumn":45},{"ruleId":"93","severity":1,"message":"94","line":19,"column":18,"nodeType":"95","messageId":"96","endLine":19,"endColumn":20},{"ruleId":"93","severity":1,"message":"94","line":19,"column":43,"nodeType":"95","messageId":"96","endLine":19,"endColumn":45},{"ruleId":"93","severity":1,"message":"94","line":30,"column":22,"nodeType":"95","messageId":"96","endLine":30,"endColumn":24},{"ruleId":"93","severity":1,"message":"94","line":30,"column":44,"nodeType":"95","messageId":"96","endLine":30,"endColumn":46},{"ruleId":"93","severity":1,"message":"94","line":34,"column":27,"nodeType":"95","messageId":"96","endLine":34,"endColumn":29},{"ruleId":"93","severity":1,"message":"94","line":34,"column":50,"nodeType":"95","messageId":"96","endLine":34,"endColumn":52},{"ruleId":"93","severity":1,"message":"94","line":10,"column":21,"nodeType":"95","messageId":"96","endLine":10,"endColumn":23},{"ruleId":"93","severity":1,"message":"94","line":10,"column":43,"nodeType":"95","messageId":"96","endLine":10,"endColumn":45},{"ruleId":"93","severity":1,"message":"94","line":14,"column":26,"nodeType":"95","messageId":"96","endLine":14,"endColumn":28},{"ruleId":"93","severity":1,"message":"94","line":14,"column":49,"nodeType":"95","messageId":"96","endLine":14,"endColumn":51},{"ruleId":"93","severity":1,"message":"94","line":3,"column":17,"nodeType":"95","messageId":"96","endLine":3,"endColumn":19},{"ruleId":"93","severity":1,"message":"94","line":92,"column":13,"nodeType":"95","messageId":"96","endLine":92,"endColumn":15},{"ruleId":"93","severity":1,"message":"94","line":3,"column":17,"nodeType":"95","messageId":"96","endLine":3,"endColumn":19},{"ruleId":"93","severity":1,"message":"94","line":92,"column":13,"nodeType":"95","messageId":"96","endLine":92,"endColumn":15},{"ruleId":"93","severity":1,"message":"94","line":16,"column":18,"nodeType":"95","messageId":"96","endLine":16,"endColumn":20},{"ruleId":"93","severity":1,"message":"94","line":76,"column":14,"nodeType":"95","messageId":"96","endLine":76,"endColumn":16},{"ruleId":"93","severity":1,"message":"101","line":24,"column":16,"nodeType":"95","messageId":"96","endLine":24,"endColumn":18},"no-native-reassign",["102"],"no-negated-in-lhs",["103"],"no-unused-vars","'isActive' is assigned a value but never used.","Identifier","unusedVar","'isPaused' is assigned a value but never used.","eqeqeq","Expected '===' and instead saw '=='.","BinaryExpression","unexpected","no-redeclare","'griddef' is already defined.","redeclared","'i' is already defined.","Expected '!==' and instead saw '!='.","no-global-assign","no-unsafe-negation"]
=======
[{"C:\\React Projects\\new\\Visualization\\src\\index.js":"1","C:\\React Projects\\new\\Visualization\\src\\App.js":"2","C:\\React Projects\\new\\Visualization\\src\\visualizers\\PathfindingVisualizer.jsx":"3","C:\\React Projects\\new\\Visualization\\src\\mazeAlgorithms\\Simplestair.js":"4","C:\\React Projects\\new\\Visualization\\src\\mazeAlgorithms\\basicWeighted.js":"5","C:\\React Projects\\new\\Visualization\\src\\mazeAlgorithms\\basicRandom.js":"6","C:\\React Projects\\new\\Visualization\\src\\algorithms\\dijkstra.js":"7","C:\\React Projects\\new\\Visualization\\src\\algorithms\\DFS.js":"8","C:\\React Projects\\new\\Visualization\\src\\algorithms\\BFS.js":"9","C:\\React Projects\\new\\Visualization\\src\\models\\Node\\Node.jsx":"10","C:\\React Projects\\new\\Visualization\\src\\algorithms\\Astar.js":"11"},{"size":174,"mtime":1617428000044,"results":"12","hashOfConfig":"13"},{"size":281,"mtime":1617428000036,"results":"14","hashOfConfig":"13"},{"size":14029,"mtime":1617429479889,"results":"15","hashOfConfig":"13"},{"size":592,"mtime":1617428000044,"results":"16","hashOfConfig":"13"},{"size":662,"mtime":1617428000044,"results":"17","hashOfConfig":"13"},{"size":1406,"mtime":1617428000044,"results":"18","hashOfConfig":"13"},{"size":3243,"mtime":1617428000036,"results":"19","hashOfConfig":"13"},{"size":3426,"mtime":1617428000036,"results":"20","hashOfConfig":"13"},{"size":3428,"mtime":1617428000036,"results":"21","hashOfConfig":"13"},{"size":780,"mtime":1617428000052,"results":"22","hashOfConfig":"13"},{"size":3732,"mtime":1617430366501,"results":"23","hashOfConfig":"13"},{"filePath":"24","messages":"25","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"h3v5v8",{"filePath":"26","messages":"27","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"28","messages":"29","errorCount":0,"warningCount":16,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"30","messages":"31","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"32","usedDeprecatedRules":"33"},{"filePath":"34","messages":"35","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"36","usedDeprecatedRules":"33"},{"filePath":"37","messages":"38","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"39","usedDeprecatedRules":"33"},{"filePath":"40","messages":"41","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"42","usedDeprecatedRules":"33"},{"filePath":"43","messages":"44","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"45","usedDeprecatedRules":"33"},{"filePath":"46","messages":"47","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"48","usedDeprecatedRules":"33"},{"filePath":"49","messages":"50","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"51","usedDeprecatedRules":"33"},{"filePath":"52","messages":"53","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},"C:\\React Projects\\new\\Visualization\\src\\index.js",[],"C:\\React Projects\\new\\Visualization\\src\\App.js",[],"C:\\React Projects\\new\\Visualization\\src\\visualizers\\PathfindingVisualizer.jsx",["54","55","56","57","58","59","60","61","62","63","64","65","66","67","68","69"],"C:\\React Projects\\new\\Visualization\\src\\mazeAlgorithms\\Simplestair.js",["70","71","72","73"],"function Simplestair(grid,startNode, finishNode)\r\n{\r\nvar grid1=[];\r\n  let  x=grid.length;\r\n  let y=0;\r\n  while(x<2*(grid.length)-1 && y<grid.length-4){\r\n    if(grid[y][x]==startNode || grid[y][x]==finishNode){\r\n        continue;\r\n    }\r\n    else{\r\n        grid1.push(grid[y][x]);\r\n    }\r\n    x++;\r\n    y++;\r\n    };\r\n    x=grid.length-1;\r\n    y=0;\r\n  while(x>=0 && y<grid.length){\r\n    if(grid[y][x]==startNode || grid[y][x]==finishNode){\r\n        continue;\r\n    }\r\n    else{\r\n        grid1.push(grid[y][x]);\r\n    }\r\n    x--;\r\n    y++;\r\n  };\r\n  return grid1;\r\n}\r\n\r\nexport default Simplestair; ",["74","75"],"C:\\React Projects\\new\\Visualization\\src\\mazeAlgorithms\\basicWeighted.js",["76","77","78","79"],"function basicWeighted(grid,startNode, finishNode){\r\n    var grid1=[]\r\n    for(var i=0 ; i<20;i+=3)\r\n    {\r\n         for (var j=0 ;j<50;j+=3)\r\n         {\r\n              var x=Math.floor((Math.random() * 10) + 1);\r\n              var col=Math.abs(i-x);\r\n              var row=Math.abs(j-x);\r\n              if(col==startNode.col && row==startNode.row)\r\n              {\r\n                   continue;\r\n              }\r\n              else if(col==finishNode.col && row==finishNode.row)\r\n              {\r\n                   continue;\r\n              }\r\n              grid1.push(grid[col][row]);\r\n         }\r\n    }\r\n    return grid1;\r\n}\r\n\r\n\r\nexport default basicWeighted;","C:\\React Projects\\new\\Visualization\\src\\mazeAlgorithms\\basicRandom.js",["80","81","82","83"],"function basicRandom(grid,startNode, finishNode){\r\n     var grid1=[]\r\n     // let cIdY=grid.length[0]-10;\r\n     // for(let c=0 ;c<10;c++)\r\n     // {\r\n     //      let cIdXone= Math.floor(grid.length/2)-c;\r\n     //      let cIdXtwo = Math.floor(grid.length/2)+c;\r\n     //      // let cIdone = cIdY-cIdXone;\r\n     //      // let cIdtwo = cIdY-cIdXtwo;\r\n     //      console.log(cIdXone);\r\n     //      console.log(cIdXtwo);\r\n     //      // console.log((cIdY,cIdtwo));\r\n     //      if(cIdy>=20 || CIdXone>=50 || cIdXtwo>=50){\r\n     //           continue;\r\n     //      }\r\n     //      else{\r\n     //           grid1.push(grid[cIdY][cIdXone]);\r\n     //           grid1.push(grid[cIdY][cIdXtwo]);\r\n     //      }\r\n     //      // console.log(cIdone);\r\n     //      // console.log(cIdtwo);\r\n     // }\r\n     for(var i=0 ; i<20;i+=3)\r\n     {\r\n          for (var j=0 ;j<50;j+=3)\r\n          {\r\n               var x=Math.floor((Math.random() * 10) + 1);\r\n               var col=Math.abs(i-x);\r\n               var row=Math.abs(j-x);\r\n               if(col==startNode.col && row==startNode.row)\r\n               {\r\n                    continue;\r\n               }\r\n               else if(col==finishNode.col && row==finishNode.row)\r\n               {\r\n                    continue;\r\n               }\r\n               grid1.push(grid[col][row]);\r\n          }\r\n     }\r\n     return grid1;\r\n}\r\n\r\n\r\nexport default basicRandom;","C:\\React Projects\\new\\Visualization\\src\\algorithms\\dijkstra.js",["84","85"],"export default function dijkstra(grid,startnode,endnode){\r\n  startnode.distance=0;\r\n  const visited = new Map();\r\n  const visitedinorder =[];\r\n  const visitList = [];\r\n  visitList.push(startnode);\r\n  const graph=creategraph(grid);\r\n  while(visitList.length !== 0) {\r\n      const node = visitList.shift();\r\n      if(node && !visited.has(node)) {\r\n          if (node.isWall) continue;\r\n          visitedinorder.push(node);\r\n          visited.set(node);\r\n          console.log(node.row);\r\n          console.log(node.col);\r\n          if(node==endnode){\r\n              return visitedinorder;\r\n          }\r\n          graph.getAdjacents(node).forEach(adj => visitList.push(adj));\r\n          updateUnvisitedNeighbors(visitList,node,graph);\r\n          sortnodebydistance(visitList);\r\n      }\r\n  }\r\n  return visitedinorder;\r\n}\r\n\r\nfunction creategraph(grid){\r\n  const graph=new Graph(1000);\r\n  for (let row = 0; row < 20; row++) {\r\n      for (let col = 0; col < 50; col++) {\r\n        graph.addVertex(grid[row][col]);\r\n      }\r\n  }\r\n  for (let row = 0; row < 20; row++) {\r\n      for (let col = 0; col < 50; col++) {\r\n          if((col+1<50)){\r\n              graph.addEdge(grid[row][col],grid[row][col+1]);\r\n          }\r\n          if((row+1)<20){\r\n              graph.addEdge(grid[row][col],grid[row+1][col]);\r\n          }\r\n          if((col-1)>=0){\r\n              graph.addEdge(grid[row][col],grid[row][col-1]);\r\n          }\r\n          if((row-1)>=0){\r\n              graph.addEdge(grid[row][col],grid[row-1][col]);\r\n          }         \r\n             \r\n      }\r\n    }\r\n  return graph;\r\n}\r\n\r\nclass Graph { \r\n  constructor(noOfVertices) { \r\n      this.noOfVertices = noOfVertices; \r\n      this.AdjList = new Map(); \r\n  }\r\n  addVertex(v) { \r\n  this.AdjList.set(v, []); \r\n  } \r\n  addEdge(v, w) { \r\n  this.AdjList.get(v).push(w);\r\n  }\r\n  getAdjacents(node) {\r\n      return this.AdjList.get(node);\r\n  }\r\n  \r\n  isAdjacent(node,neighbor) {\r\n      var temp=0;\r\n      this.AdjList.get(node).forEach(adj => {\r\n          if(adj === neighbor){\r\n              temp++;\r\n          }\r\n      })\r\n      if(temp==0){\r\n          return false;\r\n      }else{\r\n          return true;\r\n      }\r\n  }\r\n} \r\n\r\nfunction sortnodebydistance(unvisitednodes){\r\n  unvisitednodes.sort((nodeA, nodeB) => nodeA.distance - nodeB.distance);\r\n}\r\n\r\nfunction updateUnvisitedNeighbors(visitList,node,graph) {\r\n  for (const neighbor of visitList) {\r\n      if((neighbor.previousNode !== null && neighbor.distance <= node.distance)  || !graph.isAdjacent(node,neighbor) ){\r\n          continue;\r\n      }else if(graph.isAdjacent(node,neighbor)){\r\n          neighbor.distance = node.distance + neighbor.weight + 1;\r\n          neighbor.previousNode = node;\r\n      }\r\n  }\r\n}\r\n\r\nexport function getNodesInShortestPathOrderDijkstra(finishNode,startNode) {\r\n  const nodesInShortestPathOrder = [];\r\n  let currentNode = finishNode;\r\n  while (currentNode !== null) {\r\n    nodesInShortestPathOrder.unshift(currentNode);\r\n    console.log(currentNode.row);\r\n    console.log(currentNode.col);\r\n    currentNode = currentNode.previousNode;\r\n    if(currentNode===startNode){\r\n        console.log(currentNode.row);\r\n        console.log(currentNode.col);\r\n        break;\r\n    }\r\n  }\r\n  return nodesInShortestPathOrder;\r\n}\r\n","C:\\React Projects\\new\\Visualization\\src\\algorithms\\DFS.js",["86","87"],"\r\nexport default function DFS(grid,startNode, finishNode){\r\n    if(startNode==finishNode || !startNode || !finishNode){\r\n        return false;\r\n    }\r\n    console.log(\"in BFS\");\r\n    var count=0;\r\n    startNode.distance=0;\r\n    const visited=new Map();\r\n    const visitedinorder=[];\r\n    const visitList=[];\r\n    visitList.push(startNode)\r\n    const graph=creategraph(grid);\r\n    while(visitList.length!==0)\r\n    {\r\n        const node =visitList.pop();\r\n        if(node && !visited.has(node))\r\n        {\r\n            if (node.isWall) continue;\r\n            visitedinorder.push(node);\r\n            count++;\r\n            visited.set(node);\r\n            console.log(\"visited\");\r\n            console.log(node.row);\r\n            console.log(node.col);\r\n            if(node===finishNode){\r\n                console.log(\"count\",count);\r\n                return visitedinorder;\r\n            }\r\n            graph.getAdjacents(node).forEach(adj => visitList.push(adj));\r\n            updateUnvisitedNeighbors(visitList,node,graph);\r\n        }\r\n    }\r\n    return visitedinorder;\r\n\r\n}\r\n\r\n\r\n\r\nfunction creategraph(grid){\r\n    const graph=new Graph(1000);\r\n    for(let row=0;row<20;row++)\r\n    {\r\n        for(let col=0;col<50;col++)\r\n        {\r\n            graph.addVertex(grid[row][col]);\r\n        }\r\n    }\r\n    for(let row=0;row<20;row++)\r\n    {\r\n        for(let col=0;col<50;col++)\r\n        {\r\n            if((col+1<50)){\r\n                graph.addEdge(grid[row][col],grid[row][col+1]);\r\n            }\r\n            if((col-1>=0)){\r\n                graph.addEdge(grid[row][col],grid[row][col-1]);\r\n            }\r\n            if((row-1)>=0){\r\n                graph.addEdge(grid[row][col],grid[row-1][col]);\r\n            }\r\n            if((row+1)<20){\r\n                graph.addEdge(grid[row][col],grid[row+1][col]);\r\n            }\r\n        }\r\n    }\r\n    return graph;\r\n}\r\n\r\n\r\nclass Graph{\r\n  constructor(noOfVertices){\r\n      this.noOfVertices=noOfVertices;\r\n      this.Adjlist=new Map();\r\n  }  \r\n\r\n  addVertex(v){\r\n    this.Adjlist.set(v,[]);\r\n  }\r\n\r\n  addEdge(v,w){\r\n     this.Adjlist.get(v).push(w);\r\n  }\r\n\r\n  getAdjacents(node){\r\n      return this.Adjlist.get(node);\r\n  }\r\n\r\n  isAdjacent(node,neighbor) {\r\n    var temp=0;\r\n    this.Adjlist.get(neighbor).forEach( x => {\r\n        if(x==node){\r\n            temp++;\r\n        }\r\n    })\r\n    if(temp===0){\r\n        return false;\r\n    }else{\r\n        return true;\r\n    }\r\n}\r\n}\r\n\r\nfunction updateUnvisitedNeighbors(visitList,node,graph) {\r\n    console.log(\"neigbour\");\r\n    for (const neighbor of visitList) {\r\n        if(!graph.isAdjacent(node,neighbor) || neighbor.previousNode !== null){\r\n            continue;\r\n        }else if(graph.isAdjacent(node,neighbor)){\r\n            neighbor.distance = node.distance + neighbor.weight + 1;\r\n            neighbor.previousNode = node;\r\n        }\r\n    }\r\n  }\r\n\r\nexport function getNodesInShortestPathOrderDFS(finishNode,startNode) {\r\n    console.log(\"shortest Path\");\r\n    const nodesInShortestPathOrder = [];\r\n    let currentNode = finishNode;\r\n    while (currentNode !== null) {\r\n      nodesInShortestPathOrder.unshift(currentNode);\r\n      console.log(currentNode.row);\r\n      console.log(currentNode.col);\r\n      currentNode = currentNode.previousNode;\r\n      if(currentNode===startNode){\r\n          console.log(currentNode.row);\r\n          console.log(currentNode.col);\r\n          break;\r\n      }\r\n    }\r\n    return nodesInShortestPathOrder;\r\n  }\r\n","C:\\React Projects\\new\\Visualization\\src\\algorithms\\BFS.js",["88","89"],"\r\nexport default function BFS(grid,startNode, finishNode){\r\n    if(startNode==finishNode || !startNode || !finishNode){\r\n        return false;\r\n    }\r\n    console.log(\"in BFS\");\r\n    var count=0;\r\n    startNode.distance=0;\r\n    const visited=new Map();\r\n    const visitedinorder=[];\r\n    const visitList=[];\r\n    visitList.push(startNode)\r\n    const graph=creategraph(grid);\r\n    while(visitList.length!==0)\r\n    {\r\n        const node =visitList.shift();\r\n        if(node && !visited.has(node))\r\n        {\r\n            if (node.isWall) continue;\r\n            visitedinorder.push(node);\r\n            count++;\r\n            visited.set(node);\r\n            console.log(\"visited\");\r\n            console.log(node.row);\r\n            console.log(node.col);\r\n            if(node===finishNode){\r\n                console.log(\"count\",count);\r\n                return visitedinorder;\r\n            }\r\n            graph.getAdjacents(node).forEach(adj => visitList.push(adj));\r\n            updateUnvisitedNeighbors(visitList,node,graph);\r\n        }\r\n    }\r\n    return visitedinorder;\r\n\r\n}\r\n\r\n\r\n\r\nfunction creategraph(grid){\r\n    const graph=new Graph(1000);\r\n    for(let row=0;row<20;row++)\r\n    {\r\n        for(let col=0;col<50;col++)\r\n        {\r\n            graph.addVertex(grid[row][col]);\r\n        }\r\n    }\r\n    for(let row=0;row<20;row++)\r\n    {\r\n        for(let col=0;col<50;col++)\r\n        {\r\n            if((col+1<50)){\r\n                graph.addEdge(grid[row][col],grid[row][col+1]);\r\n            }\r\n            if((col-1>=0)){\r\n                graph.addEdge(grid[row][col],grid[row][col-1]);\r\n            }\r\n            if((row-1)>=0){\r\n                graph.addEdge(grid[row][col],grid[row-1][col]);\r\n            }\r\n            if((row+1)<20){\r\n                graph.addEdge(grid[row][col],grid[row+1][col]);\r\n            }\r\n        }\r\n    }\r\n    return graph;\r\n}\r\n\r\n\r\nclass Graph{\r\n  constructor(noOfVertices){\r\n      this.noOfVertices=noOfVertices;\r\n      this.Adjlist=new Map();\r\n  }  \r\n\r\n  addVertex(v){\r\n    this.Adjlist.set(v,[]);\r\n  }\r\n\r\n  addEdge(v,w){\r\n     this.Adjlist.get(v).push(w);\r\n  }\r\n\r\n  getAdjacents(node){\r\n      return this.Adjlist.get(node);\r\n  }\r\n\r\n  isAdjacent(node,neighbor) {\r\n    var temp=0;\r\n    this.Adjlist.get(neighbor).forEach( x => {\r\n        if(x==node){\r\n            temp++;\r\n        }\r\n    })\r\n    if(temp===0){\r\n        return false;\r\n    }else{\r\n        return true;\r\n    }\r\n}\r\n}\r\n\r\nfunction updateUnvisitedNeighbors(visitList,node,graph) {\r\n    console.log(\"neigbour\");\r\n    for (const neighbor of visitList) {\r\n        if(!graph.isAdjacent(node,neighbor) || neighbor.previousNode !== null){\r\n            continue;\r\n        }else if(graph.isAdjacent(node,neighbor)){\r\n            neighbor.distance = node.distance + neighbor.weight + 1;\r\n            neighbor.previousNode = node;\r\n        }\r\n    }\r\n  }\r\n\r\nexport function getNodesInShortestPathOrderBFS(finishNode,startNode) {\r\n    console.log(\"shortest Path\");\r\n    const nodesInShortestPathOrder = [];\r\n    let currentNode = finishNode;\r\n    while (currentNode !== null) {\r\n      nodesInShortestPathOrder.unshift(currentNode);\r\n      console.log(currentNode.row);\r\n      console.log(currentNode.col);\r\n      currentNode = currentNode.previousNode;\r\n      if(currentNode===startNode){\r\n          console.log(currentNode.row);\r\n          console.log(currentNode.col);\r\n          break;\r\n      }\r\n    }\r\n    return nodesInShortestPathOrder;\r\n  }\r\n","C:\\React Projects\\new\\Visualization\\src\\models\\Node\\Node.jsx",["90"],"import React, {Component} from 'react';\r\n\r\nimport './Node.css';\r\n\r\nexport default class Node extends Component {\r\n  render() {\r\n    const {\r\n      col,\r\n      isFinish,\r\n      isStart,\r\n      isWall,\r\n      onMouseDown,\r\n      onMouseEnter,\r\n      onMouseUp,\r\n      row,\r\n      weight = 0,\r\n    } = this.props;\r\n    const extraClassName = isFinish\r\n      ? 'node-finish'\r\n      : isStart\r\n      ? 'node-start'\r\n      : isWall\r\n      ? 'node-wall'\r\n      : weight != 0\r\n      ? 'node-weight'\r\n      : '';\r\n\r\n    return (\r\n      <div\r\n        id={`node-${row}-${col}`}\r\n        className={`node ${extraClassName}`}\r\n        onMouseDown={() => onMouseDown(row, col)}\r\n        onMouseEnter={() => onMouseEnter(row, col)}\r\n        onMouseUp={() => onMouseUp()}></div>\r\n    );\r\n  }\r\n}\r\n","C:\\React Projects\\new\\Visualization\\src\\algorithms\\Astar.js",["91","92"],{"ruleId":"93","severity":1,"message":"94","line":25,"column":10,"nodeType":"95","messageId":"96","endLine":25,"endColumn":18},{"ruleId":"93","severity":1,"message":"97","line":26,"column":10,"nodeType":"95","messageId":"96","endLine":26,"endColumn":18},{"ruleId":"98","severity":1,"message":"99","line":127,"column":18,"nodeType":"100","messageId":"101","endLine":127,"endColumn":20},{"ruleId":"98","severity":1,"message":"99","line":131,"column":23,"nodeType":"100","messageId":"101","endLine":131,"endColumn":25},{"ruleId":"98","severity":1,"message":"99","line":135,"column":23,"nodeType":"100","messageId":"101","endLine":135,"endColumn":25},{"ruleId":"98","severity":1,"message":"99","line":138,"column":24,"nodeType":"100","messageId":"101","endLine":138,"endColumn":26},{"ruleId":"98","severity":1,"message":"99","line":178,"column":21,"nodeType":"100","messageId":"101","endLine":178,"endColumn":23},{"ruleId":"98","severity":1,"message":"99","line":190,"column":26,"nodeType":"100","messageId":"101","endLine":190,"endColumn":28},{"ruleId":"102","severity":1,"message":"103","line":192,"column":13,"nodeType":"95","messageId":"104","endLine":192,"endColumn":20},{"ruleId":"102","severity":1,"message":"105","line":193,"column":17,"nodeType":"95","messageId":"104","endLine":193,"endColumn":18},{"ruleId":"98","severity":1,"message":"99","line":201,"column":26,"nodeType":"100","messageId":"101","endLine":201,"endColumn":28},{"ruleId":"102","severity":1,"message":"103","line":203,"column":13,"nodeType":"95","messageId":"104","endLine":203,"endColumn":20},{"ruleId":"102","severity":1,"message":"105","line":204,"column":17,"nodeType":"95","messageId":"104","endLine":204,"endColumn":18},{"ruleId":"106","severity":1,"message":"107","line":237,"column":5,"nodeType":"108","endLine":237,"endColumn":20,"suggestions":"109"},{"ruleId":"98","severity":1,"message":"99","line":278,"column":69,"nodeType":"100","messageId":"101","endLine":278,"endColumn":71},{"ruleId":"98","severity":1,"message":"99","line":376,"column":28,"nodeType":"100","messageId":"101","endLine":376,"endColumn":30},{"ruleId":"98","severity":1,"message":"99","line":7,"column":18,"nodeType":"100","messageId":"101","endLine":7,"endColumn":20},{"ruleId":"98","severity":1,"message":"99","line":7,"column":43,"nodeType":"100","messageId":"101","endLine":7,"endColumn":45},{"ruleId":"98","severity":1,"message":"99","line":19,"column":18,"nodeType":"100","messageId":"101","endLine":19,"endColumn":20},{"ruleId":"98","severity":1,"message":"99","line":19,"column":43,"nodeType":"100","messageId":"101","endLine":19,"endColumn":45},{"ruleId":"110","replacedBy":"111"},{"ruleId":"112","replacedBy":"113"},{"ruleId":"98","severity":1,"message":"99","line":10,"column":21,"nodeType":"100","messageId":"101","endLine":10,"endColumn":23},{"ruleId":"98","severity":1,"message":"99","line":10,"column":43,"nodeType":"100","messageId":"101","endLine":10,"endColumn":45},{"ruleId":"98","severity":1,"message":"99","line":14,"column":26,"nodeType":"100","messageId":"101","endLine":14,"endColumn":28},{"ruleId":"98","severity":1,"message":"99","line":14,"column":49,"nodeType":"100","messageId":"101","endLine":14,"endColumn":51},{"ruleId":"98","severity":1,"message":"99","line":30,"column":22,"nodeType":"100","messageId":"101","endLine":30,"endColumn":24},{"ruleId":"98","severity":1,"message":"99","line":30,"column":44,"nodeType":"100","messageId":"101","endLine":30,"endColumn":46},{"ruleId":"98","severity":1,"message":"99","line":34,"column":27,"nodeType":"100","messageId":"101","endLine":34,"endColumn":29},{"ruleId":"98","severity":1,"message":"99","line":34,"column":50,"nodeType":"100","messageId":"101","endLine":34,"endColumn":52},{"ruleId":"98","severity":1,"message":"99","line":16,"column":18,"nodeType":"100","messageId":"101","endLine":16,"endColumn":20},{"ruleId":"98","severity":1,"message":"99","line":76,"column":14,"nodeType":"100","messageId":"101","endLine":76,"endColumn":16},{"ruleId":"98","severity":1,"message":"99","line":3,"column":17,"nodeType":"100","messageId":"101","endLine":3,"endColumn":19},{"ruleId":"98","severity":1,"message":"99","line":92,"column":13,"nodeType":"100","messageId":"101","endLine":92,"endColumn":15},{"ruleId":"98","severity":1,"message":"99","line":3,"column":17,"nodeType":"100","messageId":"101","endLine":3,"endColumn":19},{"ruleId":"98","severity":1,"message":"99","line":92,"column":13,"nodeType":"100","messageId":"101","endLine":92,"endColumn":15},{"ruleId":"98","severity":1,"message":"114","line":24,"column":16,"nodeType":"100","messageId":"101","endLine":24,"endColumn":18},{"ruleId":"98","severity":1,"message":"99","line":16,"column":20,"nodeType":"100","messageId":"101","endLine":16,"endColumn":22},{"ruleId":"98","severity":1,"message":"99","line":76,"column":16,"nodeType":"100","messageId":"101","endLine":76,"endColumn":18},"no-unused-vars","'isActive' is assigned a value but never used.","Identifier","unusedVar","'isPaused' is assigned a value but never used.","eqeqeq","Expected '===' and instead saw '=='.","BinaryExpression","unexpected","no-redeclare","'griddef' is already defined.","redeclared","'i' is already defined.","react-hooks/exhaustive-deps","React Hook useEffect has a missing dependency: 'demoMazeAlgorithm'. Either include it or remove the dependency array.","ArrayExpression",["115"],"no-native-reassign",["116"],"no-negated-in-lhs",["117"],"Expected '!==' and instead saw '!='.",{"desc":"118","fix":"119"},"no-global-assign","no-unsafe-negation","Update the dependencies array to be: [demoMazeAlgorithm, mazeAlgorithm]",{"range":"120","text":"121"},[8724,8739],"[demoMazeAlgorithm, mazeAlgorithm]"]
>>>>>>> 640d00fc249d663c0bd56915a8a93dce2a9850b3
