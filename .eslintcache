[{"/home/sourabh/Downloads/react/visualization/src/index.js":"1","/home/sourabh/Downloads/react/visualization/src/App.js":"2","/home/sourabh/Downloads/react/visualization/src/visualizers/PathfindingVisualizer.jsx":"3","/home/sourabh/Downloads/react/visualization/src/algorithms/dijkstra.js":"4","/home/sourabh/Downloads/react/visualization/src/models/Node/Node.jsx":"5","/home/sourabh/Downloads/react/visualization/src/algorithms/DFS.js":"6","/home/sourabh/Downloads/react/visualization/src/algorithms/BFS.js":"7","/home/sourabh/Downloads/react/visualization/src/mazeAlgorithms/basicRandom.js":"8","/home/sourabh/Downloads/react/visualization/src/mazeAlgorithms/basicWeighted.js":"9"},{"size":168,"mtime":1616949317524,"results":"10","hashOfConfig":"11"},{"size":268,"mtime":1616867199773,"results":"12","hashOfConfig":"11"},{"size":12058,"mtime":1617084416183,"results":"13","hashOfConfig":"11"},{"size":3225,"mtime":1617084219560,"results":"14","hashOfConfig":"11"},{"size":743,"mtime":1617002358463,"results":"15","hashOfConfig":"11"},{"size":3403,"mtime":1617027008387,"results":"16","hashOfConfig":"11"},{"size":3348,"mtime":1616997659459,"results":"17","hashOfConfig":"11"},{"size":1362,"mtime":1617026430642,"results":"18","hashOfConfig":"11"},{"size":638,"mtime":1617021718473,"results":"19","hashOfConfig":"11"},{"filePath":"20","messages":"21","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"22"},"15hazi4",{"filePath":"23","messages":"24","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"22"},{"filePath":"25","messages":"26","errorCount":0,"warningCount":10,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"27","messages":"28","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"29","messages":"30","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"31","usedDeprecatedRules":"22"},{"filePath":"32","messages":"33","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"34","usedDeprecatedRules":"22"},{"filePath":"35","messages":"36","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"37","usedDeprecatedRules":"22"},{"filePath":"38","messages":"39","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"40","usedDeprecatedRules":"22"},{"filePath":"41","messages":"42","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"43","usedDeprecatedRules":"22"},"/home/sourabh/Downloads/react/visualization/src/index.js",[],["44","45"],"/home/sourabh/Downloads/react/visualization/src/App.js",[],"/home/sourabh/Downloads/react/visualization/src/visualizers/PathfindingVisualizer.jsx",["46","47","48","49","50","51","52","53","54","55"],"/home/sourabh/Downloads/react/visualization/src/algorithms/dijkstra.js",["56","57"],"/home/sourabh/Downloads/react/visualization/src/models/Node/Node.jsx",["58"],"import React, {Component} from 'react';\n\nimport './Node.css';\n\nexport default class Node extends Component {\n  render() {\n    const {\n      col,\n      isFinish,\n      isStart,\n      isWall,\n      onMouseDown,\n      onMouseEnter,\n      onMouseUp,\n      row,\n      weight = 0,\n    } = this.props;\n    const extraClassName = isFinish\n      ? 'node-finish'\n      : isStart\n      ? 'node-start'\n      : isWall\n      ? 'node-wall'\n      : weight != 0\n      ? 'node-weight'\n      : '';\n\n    return (\n      <div\n        id={`node-${row}-${col}`}\n        className={`node ${extraClassName}`}\n        onMouseDown={() => onMouseDown(row, col)}\n        onMouseEnter={() => onMouseEnter(row, col)}\n        onMouseUp={() => onMouseUp()}></div>\n    );\n  }\n}\n","/home/sourabh/Downloads/react/visualization/src/algorithms/DFS.js",["59","60"],"\nexport default function DFS(grid,startNode, finishNode){\n    if(startNode==finishNode || !startNode || !finishNode){\n        return false;\n    }\n    console.log(\"in DFS\");\n    var count=0;\n    startNode.distance=0;\n    const visited=new Map();\n    const visitedinorder=[];\n    const visitList=[];\n    visitList.push(startNode)\n    const graph=creategraph(grid);\n    while(visitList.length!==0)\n    {\n        const node =visitList.pop();\n        if(node && !visited.has(node))\n        {\n            if (node.isWall) continue;\n            visitedinorder.push(node);\n            count++;\n            visited.set(node);\n            console.log(\"visited\");\n            console.log(node.row);\n            console.log(node.col);\n            if(node===finishNode){\n                console.log(\"count\",count);\n                return visitedinorder;\n            }\n            graph.getAdjacents(node).forEach(adj => visitList.push(adj));\n            updateUnvisitedNeighbors(visitList,node,graph);\n        }\n    }\n    return visitedinorder;\n\n}\n\n\n\nfunction creategraph(grid){\n    const graph=new Graph(1000);\n    for(let row=0;row<15;row++)\n    {\n        for(let col=0;col<40;col++)\n        {\n            graph.addVertex(grid[row][col]);\n        }\n    }\n    for(let row=0;row<15;row++)\n    {\n        for(let col=0;col<40;col++)\n        {\n            if((col+1<40)){\n                graph.addEdge(grid[row][col],grid[row][col+1]);\n            }\n            if((col-1>=0)){\n                graph.addEdge(grid[row][col],grid[row][col-1]);\n            }\n            if((row-1)>=0){\n                graph.addEdge(grid[row][col],grid[row-1][col]);\n            }\n            if((row+1)<15){\n                graph.addEdge(grid[row][col],grid[row+1][col]);\n            }\n        }\n    }\n    return graph;\n}\n\n\nclass Graph{\n  constructor(noOfVertices){\n      this.noOfVertices=noOfVertices;\n      this.Adjlist=new Map();\n  }  \n\n  addVertex(v){\n    this.Adjlist.set(v,[]);\n  }\n\n  addEdge(v,w){\n     this.Adjlist.get(v).push(w);\n  }\n\n  getAdjacents(node){\n      return this.Adjlist.get(node);\n  }\n\n  isAdjacent(node,neighbor) {\n    var temp=0;\n    // this.AdjList.get(node).forEach(adj => {\n    //     if(adj === neighbor){\n    //         temp++;\n    //     }\n    // })\n    this.Adjlist.get(neighbor).forEach( x => {\n        if(x==node){\n            temp++;\n        }\n    })\n    if(temp===0){\n        return false;\n    }else{\n        return true;\n    }\n}\n}\n\nfunction updateUnvisitedNeighbors(visitList,node,graph) {\n    for (const neighbor of visitList) {\n        console.log(neighbor);\n        neighbor.previousNode = node;\n        // if(neighbor.previousNode!==null && !graph.isAdjacent(node,neighbor)){\n        //     continue;\n        // }else if(graph.isAdjacent(node,neighbor)){\n        //     neighbor.previousNode = node;\n        // }\n    }\n  }\n\nexport function getNodesInShortestPathOrderDFS(finishNode,startNode) {\n    console.log(\"shortest Path\");\n    const nodesInShortestPathOrder = [];\n    let currentNode = finishNode;\n    while (currentNode !== null) {\n      nodesInShortestPathOrder.unshift(currentNode);\n      console.log(currentNode.row);\n      console.log(currentNode.col);\n      currentNode = currentNode.previousNode;\n      if(currentNode===startNode){\n          console.log(currentNode.row);\n          console.log(currentNode.col);\n          break;\n      }\n    }\n    return nodesInShortestPathOrder;\n  }","/home/sourabh/Downloads/react/visualization/src/algorithms/BFS.js",["61","62"],"\nexport default function BFS(grid,startNode, finishNode){\n    if(startNode==finishNode || !startNode || !finishNode){\n        return false;\n    }\n    console.log(\"in BFS\");\n    var count=0;\n    startNode.distance=0;\n    const visited=new Map();\n    const visitedinorder=[];\n    const visitList=[];\n    visitList.push(startNode)\n    const graph=creategraph(grid);\n    while(visitList.length!==0)\n    {\n        const node =visitList.shift();\n        if(node && !visited.has(node))\n        {\n            if (node.isWall) continue;\n            visitedinorder.push(node);\n            count++;\n            visited.set(node);\n            console.log(\"visited\");\n            console.log(node.row);\n            console.log(node.col);\n            if(node===finishNode){\n                console.log(\"count\",count);\n                return visitedinorder;\n            }\n            graph.getAdjacents(node).forEach(adj => visitList.push(adj));\n            updateUnvisitedNeighbors(visitList,node,graph);\n        }\n    }\n    return visitedinorder;\n\n}\n\n\n\nfunction creategraph(grid){\n    const graph=new Graph(1000);\n    for(let row=0;row<20;row++)\n    {\n        for(let col=0;col<50;col++)\n        {\n            graph.addVertex(grid[row][col]);\n        }\n    }\n    for(let row=0;row<20;row++)\n    {\n        for(let col=0;col<50;col++)\n        {\n            if((col+1<50)){\n                graph.addEdge(grid[row][col],grid[row][col+1]);\n            }\n            if((col-1>=0)){\n                graph.addEdge(grid[row][col],grid[row][col-1]);\n            }\n            if((row-1)>=0){\n                graph.addEdge(grid[row][col],grid[row-1][col]);\n            }\n            if((row+1)<20){\n                graph.addEdge(grid[row][col],grid[row+1][col]);\n            }\n        }\n    }\n    return graph;\n}\n\n\nclass Graph{\n  constructor(noOfVertices){\n      this.noOfVertices=noOfVertices;\n      this.Adjlist=new Map();\n  }  \n\n  addVertex(v){\n    this.Adjlist.set(v,[]);\n  }\n\n  addEdge(v,w){\n     this.Adjlist.get(v).push(w);\n  }\n\n  getAdjacents(node){\n      return this.Adjlist.get(node);\n  }\n\n  isAdjacent(node,neighbor) {\n    var temp=0;\n    // this.AdjList.get(node).forEach(adj => {\n    //     if(adj === node){\n    //         temp++;\n    //     }\n    // })\n    this.Adjlist.get(neighbor).forEach( x => {\n        if(x==node){\n            temp++;\n        }\n    })\n    if(temp===0){\n        return false;\n    }else{\n        return true;\n    }\n}\n}\n\nfunction updateUnvisitedNeighbors(visitList,node,graph) {\n    console.log(\"neigbour\");\n    for (const neighbor of visitList) {\n        if(!graph.isAdjacent(node,neighbor) || neighbor.previousNode !== null){\n            continue;\n        }else if(graph.isAdjacent(node,neighbor)){\n            neighbor.previousNode = node;\n        }\n    }\n  }\n\nexport function getNodesInShortestPathOrderBFS(finishNode,startNode) {\n    console.log(\"shortest Path\");\n    const nodesInShortestPathOrder = [];\n    let currentNode = finishNode;\n    while (currentNode !== null) {\n      nodesInShortestPathOrder.unshift(currentNode);\n      console.log(currentNode.row);\n      console.log(currentNode.col);\n      currentNode = currentNode.previousNode;\n      if(currentNode===startNode){\n          console.log(currentNode.row);\n          console.log(currentNode.col);\n          break;\n      }\n    }\n    return nodesInShortestPathOrder;\n  }","/home/sourabh/Downloads/react/visualization/src/mazeAlgorithms/basicRandom.js",["63","64","65","66"],"function basicRandom(grid,startNode, finishNode){\n     var grid1=[]\n     // let cIdY=grid.length[0]-10;\n     // for(let c=0 ;c<10;c++)\n     // {\n     //      let cIdXone= Math.floor(grid.length/2)-c;\n     //      let cIdXtwo = Math.floor(grid.length/2)+c;\n     //      // let cIdone = cIdY-cIdXone;\n     //      // let cIdtwo = cIdY-cIdXtwo;\n     //      console.log(cIdXone);\n     //      console.log(cIdXtwo);\n     //      // console.log((cIdY,cIdtwo));\n     //      if(cIdy>=20 || CIdXone>=50 || cIdXtwo>=50){\n     //           continue;\n     //      }\n     //      else{\n     //           grid1.push(grid[cIdY][cIdXone]);\n     //           grid1.push(grid[cIdY][cIdXtwo]);\n     //      }\n     //      // console.log(cIdone);\n     //      // console.log(cIdtwo);\n     // }\n     for(var i=0 ; i<20;i+=3)\n     {\n          for (var j=0 ;j<50;j+=3)\n          {\n               var x=Math.floor((Math.random() * 10) + 1);\n               var col=Math.abs(i-x);\n               var row=Math.abs(j-x);\n               if(col==startNode.col && row==startNode.row)\n               {\n                    continue;\n               }\n               else if(col==finishNode.col && row==finishNode.row)\n               {\n                    continue;\n               }\n               grid1.push(grid[col][row]);\n          }\n     }\n     return grid1;\n}\n\n\nexport default basicRandom;","/home/sourabh/Downloads/react/visualization/src/mazeAlgorithms/basicWeighted.js",["67","68","69","70"],"function basicWeighted(grid,startNode, finishNode){\n    var grid1=[]\n    for(var i=0 ; i<20;i+=3)\n    {\n         for (var j=0 ;j<50;j+=3)\n         {\n              var x=Math.floor((Math.random() * 10) + 1);\n              var col=Math.abs(i-x);\n              var row=Math.abs(j-x);\n              if(col==startNode.col && row==startNode.row)\n              {\n                   continue;\n              }\n              else if(col==finishNode.col && row==finishNode.row)\n              {\n                   continue;\n              }\n              grid1.push(grid[col][row]);\n         }\n    }\n    return grid1;\n}\n\n\nexport default basicWeighted;",{"ruleId":"71","replacedBy":"72"},{"ruleId":"73","replacedBy":"74"},{"ruleId":"75","severity":1,"message":"76","line":23,"column":10,"nodeType":"77","messageId":"78","endLine":23,"endColumn":18},{"ruleId":"75","severity":1,"message":"79","line":24,"column":10,"nodeType":"77","messageId":"78","endLine":24,"endColumn":18},{"ruleId":"80","severity":1,"message":"81","line":119,"column":18,"nodeType":"82","messageId":"83","endLine":119,"endColumn":20},{"ruleId":"80","severity":1,"message":"81","line":123,"column":23,"nodeType":"82","messageId":"83","endLine":123,"endColumn":25},{"ruleId":"80","severity":1,"message":"81","line":127,"column":23,"nodeType":"82","messageId":"83","endLine":127,"endColumn":25},{"ruleId":"80","severity":1,"message":"81","line":163,"column":21,"nodeType":"82","messageId":"83","endLine":163,"endColumn":23},{"ruleId":"80","severity":1,"message":"81","line":175,"column":26,"nodeType":"82","messageId":"83","endLine":175,"endColumn":28},{"ruleId":"84","severity":1,"message":"85","line":177,"column":13,"nodeType":"77","messageId":"86","endLine":177,"endColumn":20},{"ruleId":"84","severity":1,"message":"87","line":178,"column":17,"nodeType":"77","messageId":"86","endLine":178,"endColumn":18},{"ruleId":"80","severity":1,"message":"81","line":339,"column":28,"nodeType":"82","messageId":"83","endLine":339,"endColumn":30},{"ruleId":"80","severity":1,"message":"81","line":16,"column":18,"nodeType":"82","messageId":"83","endLine":16,"endColumn":20},{"ruleId":"80","severity":1,"message":"81","line":76,"column":14,"nodeType":"82","messageId":"83","endLine":76,"endColumn":16},{"ruleId":"80","severity":1,"message":"88","line":24,"column":16,"nodeType":"82","messageId":"83","endLine":24,"endColumn":18},{"ruleId":"80","severity":1,"message":"81","line":3,"column":17,"nodeType":"82","messageId":"83","endLine":3,"endColumn":19},{"ruleId":"80","severity":1,"message":"81","line":97,"column":13,"nodeType":"82","messageId":"83","endLine":97,"endColumn":15},{"ruleId":"80","severity":1,"message":"81","line":3,"column":17,"nodeType":"82","messageId":"83","endLine":3,"endColumn":19},{"ruleId":"80","severity":1,"message":"81","line":97,"column":13,"nodeType":"82","messageId":"83","endLine":97,"endColumn":15},{"ruleId":"80","severity":1,"message":"81","line":30,"column":22,"nodeType":"82","messageId":"83","endLine":30,"endColumn":24},{"ruleId":"80","severity":1,"message":"81","line":30,"column":44,"nodeType":"82","messageId":"83","endLine":30,"endColumn":46},{"ruleId":"80","severity":1,"message":"81","line":34,"column":27,"nodeType":"82","messageId":"83","endLine":34,"endColumn":29},{"ruleId":"80","severity":1,"message":"81","line":34,"column":50,"nodeType":"82","messageId":"83","endLine":34,"endColumn":52},{"ruleId":"80","severity":1,"message":"81","line":10,"column":21,"nodeType":"82","messageId":"83","endLine":10,"endColumn":23},{"ruleId":"80","severity":1,"message":"81","line":10,"column":43,"nodeType":"82","messageId":"83","endLine":10,"endColumn":45},{"ruleId":"80","severity":1,"message":"81","line":14,"column":26,"nodeType":"82","messageId":"83","endLine":14,"endColumn":28},{"ruleId":"80","severity":1,"message":"81","line":14,"column":49,"nodeType":"82","messageId":"83","endLine":14,"endColumn":51},"no-native-reassign",["89"],"no-negated-in-lhs",["90"],"no-unused-vars","'isActive' is assigned a value but never used.","Identifier","unusedVar","'isPaused' is assigned a value but never used.","eqeqeq","Expected '===' and instead saw '=='.","BinaryExpression","unexpected","no-redeclare","'griddef' is already defined.","redeclared","'i' is already defined.","Expected '!==' and instead saw '!='.","no-global-assign","no-unsafe-negation"]