<<<<<<< HEAD
[{"C:\\Users\\kadam\\react\\Visualization\\src\\index.js":"1","C:\\Users\\kadam\\react\\Visualization\\src\\components\\Navbar.jsx":"2","C:\\Users\\kadam\\react\\Visualization\\src\\components\\Button.jsx":"3","C:\\Users\\kadam\\react\\Visualization\\src\\components\\Heading.jsx":"4","C:\\Users\\kadam\\react\\Visualization\\src\\components\\Dropdown.jsx":"5","C:\\Users\\kadam\\react\\Visualization\\src\\components\\Matrix.js":"6","C:\\Users\\kadam\\react\\Visualization\\src\\components\\Node.js":"7","C:\\Users\\kadam\\react\\Visualization\\src\\algorithms\\dijkstra.js":"8","C:\\Users\\kadam\\react\\Visualization\\src\\algorithms\\Astar.js":"9","C:\\Users\\kadam\\react\\Visualization\\src\\algorithms\\BFS.js":"10"},{"size":214,"mtime":1616737413823,"results":"11","hashOfConfig":"12"},{"size":652,"mtime":1612093118126,"results":"13","hashOfConfig":"12"},{"size":202,"mtime":1612092257458,"results":"14","hashOfConfig":"12"},{"size":193,"mtime":1612089458921,"results":"15","hashOfConfig":"12"},{"size":350,"mtime":1612093074459,"results":"16","hashOfConfig":"12"},{"size":4258,"mtime":1616765527764,"results":"17","hashOfConfig":"12"},{"size":510,"mtime":1612193667368,"results":"18","hashOfConfig":"12"},{"size":3353,"mtime":1616744682459,"results":"19","hashOfConfig":"12"},{"size":1596,"mtime":1616743918475,"results":"20","hashOfConfig":"12"},{"size":2236,"mtime":1616765586611,"results":"21","hashOfConfig":"12"},{"filePath":"22","messages":"23","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"24"},"1fu3vci",{"filePath":"25","messages":"26","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"27","usedDeprecatedRules":"28"},{"filePath":"29","messages":"30","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"31","usedDeprecatedRules":"24"},{"filePath":"32","messages":"33","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"34","usedDeprecatedRules":"35"},{"filePath":"36","messages":"37","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"38","usedDeprecatedRules":"24"},{"filePath":"39","messages":"40","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"41","usedDeprecatedRules":"24"},{"filePath":"42","messages":"43","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"24"},{"filePath":"44","messages":"45","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"46","usedDeprecatedRules":"24"},{"filePath":"47","messages":"48","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"49","usedDeprecatedRules":"24"},{"filePath":"50","messages":"51","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"52","usedDeprecatedRules":"24"},"C:\\Users\\kadam\\react\\Visualization\\src\\index.js",[],["53","54"],"C:\\Users\\kadam\\react\\Visualization\\src\\components\\Navbar.jsx",["55"],"import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport \"./index.css\";\r\nimport Button from \"./Button\"; \r\nimport Heading from \"./Heading\";\r\nimport Dropdown from \"./Dropdown\"\r\n\r\nfunction Navbar(){\r\n    return (\r\n        <>\r\n        <div className=\"navbar\">\r\n                <Heading name=\"Path Visualization\"></Heading>\r\n            <ul>\r\n                <Dropdown name=\"Algorithm\"></Dropdown>\r\n                <Dropdown name=\"Maze and pattern\"></Dropdown>\r\n                <Button title=\"Start!\"></Button>\r\n                <Button title=\"Stop!\"></Button>\r\n            </ul>\r\n        </div>\r\n        </>\r\n    );\r\n}\r\n\r\nexport default Navbar;",["56","57"],"C:\\Users\\kadam\\react\\Visualization\\src\\components\\Button.jsx",["58"],"import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\n\r\n\r\nfunction Button(props){\r\n  return (\r\n  <>\r\n  <button className=\"buttons\">{props.title}</button>\r\n  </>);\r\n}\r\n\r\n\r\nexport default Button;","C:\\Users\\kadam\\react\\Visualization\\src\\components\\Heading.jsx",["59"],"import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\n\r\n\r\nfunction Heading(props){\r\n  return (\r\n  <>\r\n  <p className=\"heading\">{props.name}</p>\r\n  </>);\r\n}\r\n\r\n\r\nexport default Heading;",["60","61"],"C:\\Users\\kadam\\react\\Visualization\\src\\components\\Dropdown.jsx",["62"],"import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport \"./index.css\"\r\n\r\n\r\nfunction Dropdown(props){\r\n  return (\r\n  <>\r\n <select name=\"myName\" className=\"Dropdown\">\r\n\t<option value=\"1\">{props.name}</option>\r\n\t<option value=\"2\">Option 2</option>\r\n\t<option value=\"3\">Option 3</option>\r\n </select>\r\n  </>);\r\n}\r\n\r\n\r\nexport default Dropdown;","C:\\Users\\kadam\\react\\Visualization\\src\\components\\Matrix.js",["63","64","65","66"],"import React, { useEffect ,useState} from \"react\";\r\nimport \"./Matrix.css\";\r\nimport Node from \"./Node\";\r\nimport \"./Node.css\";\r\nimport dijkstra,{getNodesInShortestPathOrder} from \"../algorithms/dijkstra\";\r\nimport Astar from \"../algorithms/Astar\";\r\nimport BFS from \"../algorithms/BFS\";\r\nimport \"./index.css\";\r\nimport Button from \"./Button\"; \r\nimport Heading from \"./Heading\";\r\nimport Dropdown from \"./Dropdown\"\r\n\r\nfunction getInitialGrid () {\r\n  const grid=[];\r\n  for (let row = 0; row < 15; row++) {\r\n    const rowgri=[];\r\n    for (let col = 0; col < 40; col++) {\r\n      rowgri.push(createNode(col, row));\r\n    }\r\n    grid.push(rowgri);\r\n  }\r\n  return grid;\r\n};\r\n\r\nfunction Matrix() {\r\n  const [grid1, setgrid] = useState([]);\r\n  useEffect(()=>{\r\n    const grid2=getInitialGrid();\r\n    setgrid(grid2);\r\n  },[]);\r\n  return (\r\n    <>\r\n      <div className=\"navbar\">\r\n                <Heading name=\"Path Visualization\"></Heading>\r\n            <ul>\r\n                <Dropdown name=\"Algorithm\"></Dropdown>\r\n                <Dropdown name=\"Maze and pattern\"></Dropdown>\r\n                {/* <button onClick={()=>visualizeBFS(grid1)}>Start</button> */}\r\n                {/* <button onClick={()=>visualizeAstar(grid1)}>Start</button> */}\r\n                <button onClick={()=>visualizeDijkstra(grid1)}>Start</button>\r\n                <Button title=\"Stop!\"></Button>\r\n            </ul>\r\n        </div>\r\n      <center>\r\n        <div className=\"grid\">\r\n          {grid1.map((row, rowIdx) => {\r\n            return (\r\n              <div key={rowIdx}>\r\n                {row.map((node, nodeIdx) => {\r\n                  const { row, col, isFinish, isStart, isWall } = node;\r\n                  return (\r\n                    <Node\r\n                      key={nodeIdx}\r\n                      col={col}\r\n                      isFinish={isFinish}\r\n                      isStart={isStart}\r\n                      isWall={isWall}\r\n                      row={row}\r\n                    />\r\n                  );\r\n                })}\r\n              </div>\r\n            );\r\n          })}\r\n        </div>\r\n      </center>\r\n    </>\r\n  );\r\n}\r\n\r\nexport default Matrix;\r\n\r\nconst createNode = (col, row) => {\r\n  return {\r\n    col,\r\n    row,\r\n    isStart: row === 6 && col === 10,\r\n    isFinish: row === 13 && col === 13,\r\n    distance: Infinity,\r\n    isVisited: false,\r\n    isWall: false,\r\n    previousNode: null,\r\n  };\r\n};\r\n\r\nfunction animateDijkstra(visitedNodesInOrder, nodesInShortestPathOrder) {\r\n  for (let i = 0; i <= visitedNodesInOrder.length; i++) {\r\n    if (i === visitedNodesInOrder.length) {\r\n      setTimeout(() => {\r\n        animateShortestPath(nodesInShortestPathOrder);\r\n      }, 10 * i);\r\n      return;\r\n    }\r\n    setTimeout(() => {\r\n      const node = visitedNodesInOrder[i];\r\n      document.getElementById(`node-${node.row}-${node.col}`).className =\r\n        'node-visited';\r\n    }, 10 * i);\r\n  }\r\n}\r\n\r\nfunction animateShortestPath(nodesInShortestPathOrder) {\r\n  for (let i = 0; i < nodesInShortestPathOrder.length; i++) {\r\n    setTimeout(() => {\r\n      const node = nodesInShortestPathOrder[i];\r\n      document.getElementById(`node-${node.row}-${node.col}`).className =\r\n        'node-shortest-path';\r\n    }, 50 * i);\r\n  }\r\n}\r\n\r\nfunction visualizeDijkstra(grid1) {\r\n  console.log(\"run\");\r\n  const startNode = grid1[6][10];\r\n  const finishNode = grid1[7][13];\r\n  const visitedNodes  = dijkstra(grid1, startNode, finishNode);\r\n  const nodesInShortestPathOrder =  getNodesInShortestPathOrder(finishNode,startNode)\r\n  animateDijkstra(visitedNodes, nodesInShortestPathOrder);\r\n}\r\n\r\n\r\nfunction visualizeAstar(grid1) {\r\n  console.log(\"run\");\r\n  const startNode = grid1[6][10];\r\n  const finishNode = grid1[7][13];\r\n  const visitedNodes  = Astar(grid1, startNode, finishNode);\r\n  // const nodesInShortestPathOrder =  getNodesInShortestPathOrder(finishNode,startNode)\r\n  // animateDijkstra(visitedNodes, nodesInShortestPathOrder);\r\n}\r\n\r\n\r\nfunction visualizeBFS(grid1) {\r\n  console.log(\"run\");\r\n  const startNode = grid1[6][10];\r\n  const finishNode = grid1[7][13];\r\n  const visitedNodes  = BFS(grid1, startNode, finishNode);\r\n  // const nodesInShortestPathOrder =  getNodesInShortestPathOrder(finishNode,startNode)\r\n  // animateDijkstra(visitedNodes, nodesInShortestPathOrder);\r\n}\r\n\r\n","C:\\Users\\kadam\\react\\Visualization\\src\\components\\Node.js",[],"C:\\Users\\kadam\\react\\Visualization\\src\\algorithms\\dijkstra.js",["67","68"],"export default function dijikstra(grid,startnode,endnode){\r\n    startnode.distance=0;\r\n    const visited = new Map();\r\n    const visitList = [];\r\n    visitList.push(startnode);\r\n    const graph=creategraph(grid);\r\n    console.log(\"alorithm\")\r\n    while(visitList.length !== 0) {\r\n        const node = visitList.shift();\r\n        if(node && !visited.has(node)) {\r\n            visited.set(node);\r\n            console.log(node.row);\r\n            console.log(node.col);\r\n            if(node==endnode){\r\n                return true;\r\n            }\r\n            graph.getAdjacents(node).forEach(adj => visitList.push(adj));\r\n            updateUnvisitedNeighbors(visitList,node,graph);\r\n            sortnodebydistance(visitList);\r\n        }\r\n    }\r\n    return false;\r\n}\r\n\r\nfunction creategraph(grid){\r\n    const graph=new Graph(600);\r\n    for (let row = 0; row < 15; row++) {\r\n        for (let col = 0; col < 40; col++) {\r\n          graph.addVertex(grid[row][col]);\r\n        }\r\n    }\r\n    for (let row = 0; row < 15; row++) {\r\n        for (let col = 0; col < 40; col++) {\r\n            if((col+1<40)){\r\n                graph.addEdge(grid[row][col],grid[row][col+1]);\r\n            }\r\n            if((row+1)<15){\r\n                graph.addEdge(grid[row][col],grid[row+1][col]);\r\n            }\r\n            if((col-1)>=0){\r\n                graph.addEdge(grid[row][col],grid[row][col-1]);\r\n            }\r\n            if((row-1)>=0){\r\n                graph.addEdge(grid[row][col],grid[row-1][col]);\r\n            }         \r\n               \r\n        }\r\n      }\r\n    return graph;\r\n}\r\n\r\nclass Graph { \r\n    constructor(noOfVertices) { \r\n        this.noOfVertices = noOfVertices; \r\n        this.AdjList = new Map(); \r\n    }\r\n    addVertex(v) { \r\n    this.AdjList.set(v, []); \r\n    } \r\n    addEdge(v, w) { \r\n    this.AdjList.get(v).push(w);\r\n    }\r\n    getAdjacents(node) {\r\n        return this.AdjList.get(node);\r\n    }\r\n    \r\n    isAdjacent(node,neighbor) {\r\n        var temp=0;\r\n        this.AdjList.get(node).forEach(adj => {\r\n            if(adj === neighbor){\r\n                temp++;\r\n            }\r\n        })\r\n        if(temp==0){\r\n            return false;\r\n        }else{\r\n            return true;\r\n        }\r\n    }\r\n} \r\n\r\nfunction sortnodebydistance(unvisitednodes){\r\n    unvisitednodes.sort((nodeA, nodeB) => nodeA.distance - nodeB.distance);\r\n}\r\n\r\nfunction updateUnvisitedNeighbors(visitList,node,graph) {\r\n    for (const neighbor of visitList) {\r\n        if((neighbor.previousNode !== null && neighbor.distance <= node.distance)  || !graph.isAdjacent(node,neighbor) ){\r\n            continue;\r\n        }else if(graph.isAdjacent(node,neighbor)){\r\n            neighbor.distance = node.distance + 1;\r\n            neighbor.previousNode = node;\r\n        }\r\n    }\r\n  }\r\n\r\nexport function getNodesInShortestPathOrder(finishNode,startNode) {\r\n    const nodesInShortestPathOrder = [];\r\n    console.log(\"Display shortest path.\")\r\n    let currentNode = finishNode;\r\n    while (currentNode !== null) {\r\n      nodesInShortestPathOrder.unshift(currentNode);\r\n      console.log(currentNode.row);\r\n      console.log(currentNode.col);\r\n      currentNode = currentNode.previousNode;\r\n      if(currentNode===startNode){\r\n          console.log(currentNode.row);\r\n          console.log(currentNode.col);\r\n          break;\r\n      }\r\n    }\r\n    return nodesInShortestPathOrder;\r\n}","C:\\Users\\kadam\\react\\Visualization\\src\\algorithms\\Astar.js",["69","70","71"],"\r\nfunction Astar(grid1,startNode, finishNode){\r\n    if(startNode==finishNode || !startNode || !finishNode){\r\n        return false;\r\n    }\r\n    \r\n    const graph=creategraph(grid1);\r\n    console.log(\"Graph created\");\r\n\r\n}\r\n\r\n\r\n\r\nfunction creategraph(grid){\r\n    const graph=new Graph();\r\n    for(let row=0;row<15;row++)\r\n    {\r\n        for(let col=0;col<=40;col++)\r\n        {\r\n            graph.addVertex(grid[row][col]);\r\n        }\r\n    }\r\n    for(let row=0;row<15;row++)\r\n    {\r\n        for(let col=0;col<=40;col++)\r\n        {\r\n            if((col+1<40)){\r\n                graph.addVertex(grid[row][col],grid[row][col+1]);\r\n            }\r\n            if((col-1>=0)){\r\n                graph.addVertex(grid[row][col],grid[row][col-1]);\r\n            }\r\n            if((row-1)>=0){\r\n                graph.addVertex(grid[row][col],grid[row-1][col]);\r\n            }\r\n            if((row+1)<15){\r\n                graph.addVertex(grid[row][col],grid[row+1][col]);\r\n            }\r\n        }\r\n    }\r\n    return graph;\r\n}\r\n\r\n\r\nclass Graph{\r\n  constructor(noOfVertices){\r\n      this.noOfVertices=noOfVertices;\r\n      this.Adjlist=new Map()\r\n  }  \r\n\r\n  addVertex(v){\r\n      this.Adjlist.set(v,[]);\r\n  }\r\n\r\n  addEdge(v,w){\r\n      this.Adjlist.get(v).push(w);\r\n  }\r\n\r\n  getAdjacents(node){\r\n      return this.Adjlist.get(node)\r\n  }\r\n\r\n  isAdjacent(node,neighbor) {\r\n    var temp=0;\r\n    this.AdjList.get(node).forEach(adj => {\r\n        if(adj === neighbor){\r\n            temp++;\r\n        }\r\n    })\r\n    if(temp==0){\r\n        return false;\r\n    }else{\r\n        return true;\r\n    }\r\n}\r\n}\r\n\r\nexport default Astar;","C:\\Users\\kadam\\react\\Visualization\\src\\algorithms\\BFS.js",["72","73"],"\r\nfunction BFS(grid1,startNode, finishNode){\r\n    // if(startNode==finishNode || !startNode || !finishNode){\r\n    //     return false;\r\n    // }\r\n    startNode.distance=0;\r\n    const visited=new Map();\r\n    const visitList=[];\r\n    visitList.push(startNode)\r\n    const graph=creategraph(grid1);\r\n    console.log(\"algorithm\");\r\n    while(visitList.length!==0)\r\n    {\r\n        const node =visitList.shift();\r\n        if(node && !visited.has(node))\r\n        {\r\n            visited.set(node);\r\n            console.log(visited);\r\n            console.log(node.row);\r\n            console.log(node.col);\r\n            if(node==finishNode){\r\n                return true \r\n            }\r\n            graph.getAdjacents(node).forEach(adj => visitList.push(adj));\r\n        }\r\n    }\r\n    console.log(graph);\r\n    return false;\r\n    // console.log(\"Graph created in BFS\");\r\n\r\n}\r\n\r\n\r\n\r\nfunction creategraph(grid){\r\n    const graph=new Graph();\r\n    for(let row=0;row<15;row++)\r\n    {\r\n        for(let col=0;col<=40;col++)\r\n        {\r\n            graph.addVertex(grid[row][col]);\r\n        }\r\n    }\r\n    for(let row=0;row<15;row++)\r\n    {\r\n        for(let col=0;col<=40;col++)\r\n        {\r\n            if((col+1<40)){\r\n                graph.addVertex(grid[row][col],grid[row][col+1]);\r\n            }\r\n            if((col-1>=0)){\r\n                graph.addVertex(grid[row][col],grid[row][col-1]);\r\n            }\r\n            if((row-1)>=0){\r\n                graph.addVertex(grid[row][col],grid[row-1][col]);\r\n            }\r\n            if((row+1)<15){\r\n                graph.addVertex(grid[row][col],grid[row+1][col]);\r\n            }\r\n        }\r\n    }\r\n    return graph;\r\n}\r\n\r\n\r\nclass Graph{\r\n  constructor(noOfVertices){\r\n      this.noOfVertices=noOfVertices;\r\n      this.Adjlist=new Map()\r\n  }  \r\n\r\n  addVertex(v){\r\n      this.Adjlist.set(v,[]);\r\n  }\r\n\r\n  addEdge(v,w){\r\n      this.Adjlist.get(v).push(w);\r\n  }\r\n\r\n  getAdjacents(node){\r\n      return this.Adjlist.get(node)\r\n  }\r\n\r\n  isAdjacent(node,neighbor) {\r\n    var temp=0;\r\n    this.AdjList.get(node).forEach(adj => {\r\n        if(adj === neighbor){\r\n            temp++;\r\n        }\r\n    })\r\n    if(temp==0){\r\n        return false;\r\n    }else{\r\n        return true;\r\n    }\r\n}\r\n}\r\n\r\nexport default BFS;",{"ruleId":"74","replacedBy":"75"},{"ruleId":"76","replacedBy":"77"},{"ruleId":"78","severity":1,"message":"79","line":2,"column":8,"nodeType":"80","messageId":"81","endLine":2,"endColumn":16},{"ruleId":"74","replacedBy":"82"},{"ruleId":"76","replacedBy":"83"},{"ruleId":"78","severity":1,"message":"79","line":2,"column":8,"nodeType":"80","messageId":"81","endLine":2,"endColumn":16},{"ruleId":"78","severity":1,"message":"79","line":2,"column":8,"nodeType":"80","messageId":"81","endLine":2,"endColumn":16},{"ruleId":"74","replacedBy":"84"},{"ruleId":"76","replacedBy":"85"},{"ruleId":"78","severity":1,"message":"79","line":2,"column":8,"nodeType":"80","messageId":"81","endLine":2,"endColumn":16},{"ruleId":"78","severity":1,"message":"86","line":122,"column":10,"nodeType":"80","messageId":"81","endLine":122,"endColumn":24},{"ruleId":"78","severity":1,"message":"87","line":126,"column":9,"nodeType":"80","messageId":"81","endLine":126,"endColumn":21},{"ruleId":"78","severity":1,"message":"88","line":132,"column":10,"nodeType":"80","messageId":"81","endLine":132,"endColumn":22},{"ruleId":"78","severity":1,"message":"87","line":136,"column":9,"nodeType":"80","messageId":"81","endLine":136,"endColumn":21},{"ruleId":"89","severity":1,"message":"90","line":14,"column":20,"nodeType":"91","messageId":"92","endLine":14,"endColumn":22},{"ruleId":"89","severity":1,"message":"90","line":74,"column":16,"nodeType":"91","messageId":"92","endLine":74,"endColumn":18},{"ruleId":"89","severity":1,"message":"90","line":3,"column":17,"nodeType":"91","messageId":"92","endLine":3,"endColumn":19},{"ruleId":"78","severity":1,"message":"93","line":7,"column":11,"nodeType":"80","messageId":"81","endLine":7,"endColumn":16},{"ruleId":"89","severity":1,"message":"90","line":70,"column":12,"nodeType":"91","messageId":"92","endLine":70,"endColumn":14},{"ruleId":"89","severity":1,"message":"90","line":21,"column":20,"nodeType":"91","messageId":"92","endLine":21,"endColumn":22},{"ruleId":"89","severity":1,"message":"90","line":91,"column":12,"nodeType":"91","messageId":"92","endLine":91,"endColumn":14},"no-native-reassign",["94"],"no-negated-in-lhs",["95"],"no-unused-vars","'ReactDOM' is defined but never used.","Identifier","unusedVar",["94"],["95"],["94"],["95"],"'visualizeAstar' is defined but never used.","'visitedNodes' is assigned a value but never used.","'visualizeBFS' is defined but never used.","eqeqeq","Expected '===' and instead saw '=='.","BinaryExpression","unexpected","'graph' is assigned a value but never used.","no-global-assign","no-unsafe-negation"]
=======
[{"/home/sourabh/Downloads/react/visualization/src/index.js":"1","/home/sourabh/Downloads/react/visualization/src/components/Matrix.js":"2","/home/sourabh/Downloads/react/visualization/src/components/Node.js":"3","/home/sourabh/Downloads/react/visualization/src/algorithms/dijkstra.js":"4","/home/sourabh/Downloads/react/visualization/src/components/Button.jsx":"5","/home/sourabh/Downloads/react/visualization/src/components/Dropdown.jsx":"6","/home/sourabh/Downloads/react/visualization/src/components/Heading.jsx":"7"},{"size":203,"mtime":1616736228311,"results":"8","hashOfConfig":"9"},{"size":3215,"mtime":1616736228311,"results":"10","hashOfConfig":"9"},{"size":486,"mtime":1616736228311,"results":"11","hashOfConfig":"9"},{"size":3283,"mtime":1616736744220,"results":"12","hashOfConfig":"9"},{"size":202,"mtime":1616736228311,"results":"13","hashOfConfig":"9"},{"size":350,"mtime":1616736228311,"results":"14","hashOfConfig":"9"},{"size":193,"mtime":1616736228311,"results":"15","hashOfConfig":"9"},{"filePath":"16","messages":"17","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"18"},"15hazi4",{"filePath":"19","messages":"20","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"18"},{"filePath":"21","messages":"22","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"18"},{"filePath":"23","messages":"24","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"18"},{"filePath":"25","messages":"26","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"27","usedDeprecatedRules":"18"},{"filePath":"28","messages":"29","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"30"},{"filePath":"31","messages":"32","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"33","usedDeprecatedRules":"18"},"/home/sourabh/Downloads/react/visualization/src/index.js",[],["34","35"],"/home/sourabh/Downloads/react/visualization/src/components/Matrix.js",[],"/home/sourabh/Downloads/react/visualization/src/components/Node.js",[],"/home/sourabh/Downloads/react/visualization/src/algorithms/dijkstra.js",[],"/home/sourabh/Downloads/react/visualization/src/components/Button.jsx",["36"],"import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\n\r\n\r\nfunction Button(props){\r\n  return (\r\n  <>\r\n  <button className=\"buttons\">{props.title}</button>\r\n  </>);\r\n}\r\n\r\n\r\nexport default Button;","/home/sourabh/Downloads/react/visualization/src/components/Dropdown.jsx",["37"],"import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport \"./index.css\"\r\n\r\n\r\nfunction Dropdown(props){\r\n  return (\r\n  <>\r\n <select name=\"myName\" className=\"Dropdown\">\r\n\t<option value=\"1\">{props.name}</option>\r\n\t<option value=\"2\">Option 2</option>\r\n\t<option value=\"3\">Option 3</option>\r\n </select>\r\n  </>);\r\n}\r\n\r\n\r\nexport default Dropdown;","/home/sourabh/Downloads/react/visualization/src/components/Heading.jsx",["38"],"import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\n\r\n\r\nfunction Heading(props){\r\n  return (\r\n  <>\r\n  <p className=\"heading\">{props.name}</p>\r\n  </>);\r\n}\r\n\r\n\r\nexport default Heading;",{"ruleId":"39","replacedBy":"40"},{"ruleId":"41","replacedBy":"42"},{"ruleId":"43","severity":1,"message":"44","line":2,"column":8,"nodeType":"45","messageId":"46","endLine":2,"endColumn":16},{"ruleId":"43","severity":1,"message":"44","line":2,"column":8,"nodeType":"45","messageId":"46","endLine":2,"endColumn":16},{"ruleId":"43","severity":1,"message":"44","line":2,"column":8,"nodeType":"45","messageId":"46","endLine":2,"endColumn":16},"no-native-reassign",["47"],"no-negated-in-lhs",["48"],"no-unused-vars","'ReactDOM' is defined but never used.","Identifier","unusedVar","no-global-assign","no-unsafe-negation"]
>>>>>>> 59b5d6baf2d527917292ff1c73e5a22703181b90
